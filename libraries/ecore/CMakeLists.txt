#############################################################################
#                                                                           #
#             CMakeList created by soft.generator.cpp Generator             # 
#                                                                           #
#############################################################################

# C++ project for model ecore.ecore, generated by soft.generator.cpp

CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

project(ecore CXX)

if(NOT CMAKE_BUILD_TYPE) 
    set(CMAKE_BUILD_TYPE Debug)
endif()
set(CMAKE_DEBUG_POSTFIX d)
set(CMAKE_CXX_STANDARD 17)

#dependencies
find_package(XercesC REQUIRED)
find_package(Threads REQUIRED)

#cmake files
include( CMakeFiles.txt OPTIONAL)
include( CMakeGenerated.txt OPTIONAL)
set(CMAKE_FILES
    CMakeLists.txt
)
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/CMakeFiles.txt")
   list(APPEND CMAKE_FILES "CMakeFiles.txt")
endif()
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/CMakeGenerated.txt")
   list(APPEND CMAKE_FILES "CMakeGenerated.txt")
endif()

#library
add_library(${PROJECT_NAME} STATIC  ${CMAKE_FILES}
                                    ${GENERATED_HEADER_ECORE_EXT_FILES}
                                    ${GENERATED_HEADER_ECORE_FILES}
                                    ${GENERATED_HEADER_ECORE_IMPL_FILES}
                                    ${GENERATED_HEADER_FILES}
                                    ${GENERATED_SOURCE_ECORE_EXT_FILES}
                                    ${GENERATED_SOURCE_ECORE_FILES}
                                    ${GENERATED_SOURCE_ECORE_IMPL_FILES}
                                    ${GENERATED_SOURCE_FILES}
                                    ${HEADER_ECORE_EXT_FILES}
                                    ${HEADER_ECORE_FILES}
                                    ${HEADER_ECORE_IMPL_FILES}
                                    ${HEADER_FILES}
                                    ${SOURCE_ECORE_EXT_FILES}
                                    ${SOURCE_ECORE_FILES}
                                    ${SOURCE_ECORE_IMPL_FILES}
                                    ${SOURCE_FILES}
)
target_include_directories(${PROJECT_NAME} PUBLIC src)
target_include_directories(${PROJECT_NAME} PUBLIC src-gen)
target_compile_options(${PROJECT_NAME} PRIVATE /wd4250) 
target_compile_options(${PROJECT_NAME} PRIVATE "/MP")
target_compile_definitions( ${PROJECT_NAME} PRIVATE _SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING)
target_link_libraries(${PROJECT_NAME} PRIVATE XercesC::XercesC)
set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "")

# Visual studio specific project layout
source_group(cmake FILES ${CMAKE_FILES})
source_group(src FILES ${HEADER_FILES} ${SOURCE_FILES})
source_group(src\\ecore FILES ${HEADER_ECORE_FILES} ${SOURCE_ECORE_FILES})
source_group(src\\ecore\\ext FILES ${HEADER_ECORE_EXT_FILES} ${SOURCE_ECORE_EXT_FILES})
source_group(src\\ecore\\impl FILES ${HEADER_ECORE_IMPL_FILES} ${SOURCE_ECORE_IMPL_FILES})
source_group(src-gen FILES ${GENERATED_HEADER_FILES} ${GENERATED_SOURCE_FILES})
source_group(src-gen\\ecore FILES ${GENERATED_HEADER_ECORE_FILES} ${GENERATED_SOURCE_ECORE_FILES})
source_group(src-gen\\ecore\\ext FILES ${GENERATED_HEADER_ECORE_EXT_FILES} ${GENERATED_SOURCE_ECORE_EXT_FILES})
source_group(src-gen\\ecore\\impl FILES ${GENERATED_HEADER_ECORE_IMPL_FILES} ${GENERATED_SOURCE_ECORE_IMPL_FILES})


#-----------------------------------------------------
# Install binaries and header
#-----------------------------------------------------
install(TARGETS ${PROJECT_NAME} DESTINATION lib )
install(FILES ${HEADER_FILES} ${GENERATED_HEADER_FILES} DESTINATION include)
install(FILES ${HEADER_ECORE_FILES} ${GENERATED_HEADER_ECORE_FILES} DESTINATION include/ecore)
install(FILES ${HEADER_ECORE_EXT_FILES} ${GENERATED_HEADER_ECORE_EXT_FILES} DESTINATION include/ecore/ext)
install(FILES ${HEADER_ECORE_IMPL_FILES} ${GENERATED_HEADER_ECORE_IMPL_FILES} DESTINATION include/ecore/impl)


#-----------------------------------------------------
# Package binaries and header
#-----------------------------------------------------
set(CPACK_GENERATOR "ZIP")
set(CPACK_PACKAGE_NAME ${PROJECT_NAME})

include(CPack)

