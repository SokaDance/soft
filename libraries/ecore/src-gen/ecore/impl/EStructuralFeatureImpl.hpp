// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2018 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//    
// Warning: This file was generated by sof.generator.cpp Generator
// 
//*****************************************************************************
#ifndef ECORE_ESTRUCTURALFEATURE_ESTRUCTURALFEATUREIMPL_HPP
#define ECORE_ESTRUCTURALFEATURE_ESTRUCTURALFEATUREIMPL_HPP

#include "ecore/EStructuralFeature.hpp"
#include "ecore/impl/ETypedElementImpl.hpp"

// Start of user code EStructuralFeatureImpl [definition-includes]
// End of user code

namespace ecore::impl 
{
    class EStructuralFeatureImpl : public virtual ETypedElementImpl, public virtual EStructuralFeature 
    {
    private:
        EStructuralFeatureImpl& operator=(EStructuralFeatureImpl const&) = delete;
    
    protected:
        friend class EcoreFactoryImpl;
        EStructuralFeatureImpl();
        std::shared_ptr<EStructuralFeatureImpl> getThisPtr() const;
        void setThisPtr(const std::shared_ptr<EStructuralFeatureImpl>& thisPtr);

    public:
        virtual ~EStructuralFeatureImpl();
        
        //*********************************
        // Operations
        //*********************************
        virtual void * getContainerClass() ;
        
        
        //*********************************
        // Attributes
        //*********************************
        virtual bool isChangeable() const ;
        
        virtual void setChangeable(bool newChangeable) ;
        
        virtual bool isVolatile() const ;
        
        virtual void setVolatile(bool newVolatile) ;
        
        virtual bool isTransient() const ;
        
        virtual void setTransient(bool newTransient) ;
        
        virtual const std::string& getDefaultValueLiteral() const ;
        
        virtual void setDefaultValueLiteral(const std::string& newDefaultValueLiteral) ;
        
        virtual const boost::any& getDefaultValue() const ;
        
        virtual void setDefaultValue(const boost::any& newDefaultValue) ;
        
        virtual bool isUnsettable() const ;
        
        virtual void setUnsettable(bool newUnsettable) ;
        
        virtual bool isDerived() const ;
        
        virtual void setDerived(bool newDerived) ;
        
        virtual int getFeatureID() const ;
        
        virtual void setFeatureID(int newFeatureID) ;
        
        
        //*********************************
        // References
        //*********************************
        virtual std::shared_ptr<ecore::EClass> getEContainingClass() const ;
        
        

    protected:
        virtual std::shared_ptr<EClass> eStaticClass() const;

        //*********************************
        // Reflectives
        //*********************************
        virtual boost::any eGet(int featureID, bool resolve, bool coreType) const;
        virtual void eSet(int featureID, const boost::any& newValue);
        virtual void eUnset(int featureID);
        virtual bool eIsSet(int featureID) const;
        virtual boost::any eInvoke( int operationID, const std::shared_ptr<EList<boost::any>>& arguments );
        virtual std::shared_ptr<ENotificationChain> eBasicInverseAdd( const std::shared_ptr<EObject>& otherEnd, int featureID, const std::shared_ptr<ENotificationChain>& notifications );
        virtual std::shared_ptr<ENotificationChain> eBasicInverseRemove( const std::shared_ptr<EObject>& otherEnd, int featureID, const std::shared_ptr<ENotificationChain>& notifications );
        

    protected:
        bool changeable_;
        bool volatile_;
        bool transient_;
        std::string defaultValueLiteral_;
        bool unsettable_;
        bool derived_;
        std::weak_ptr<ecore::EClass> eContainingClass_;
        int featureID_;
        


    private:
        std::weak_ptr<EStructuralFeatureImpl> thisPtr_;
    
        // Start of user code EStructuralFeatureImpl [definition-methods]
    public:
        virtual void setName( const std::string& newName );
        // End of user code
    };
}
#endif /* ECORE_ESTRUCTURALFEATURE_ESTRUCTURALFEATUREIMPL_HPP */
