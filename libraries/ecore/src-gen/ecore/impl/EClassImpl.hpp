// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2018 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//    
// Warning: This file was generated by sof.generator.cpp Generator
// 
//*****************************************************************************
#ifndef ECORE_ECLASS_ECLASSIMPL_HPP
#define ECORE_ECLASS_ECLASSIMPL_HPP

#include "ecore/EClass.hpp"
#include "ecore/impl/EClassifierImpl.hpp"
#include "ecore/impl/Lazy.hpp"
#include "ecore/impl/Proxy.hpp"

// Start of user code EClassImpl [definition-includes]
#include <unordered_map>
// End of user code

namespace ecore::impl 
{
    class EClassImpl : public virtual EClassifierImpl, public virtual EClass 
    {
    private:
        EClassImpl& operator=(EClassImpl const&) = delete;
    
    protected:
        friend class EcoreFactoryImpl;
        EClassImpl();
        std::shared_ptr<EClassImpl> getThisPtr() const;
        void setThisPtr(const std::shared_ptr<EClassImpl>& thisPtr);

    public:
        virtual ~EClassImpl();
        
        //*********************************
        // Operations
        //*********************************
        virtual bool isSuperTypeOf(const std::shared_ptr<ecore::EClass>& someClass) ;
        
        virtual int getFeatureCount() ;
        
        virtual std::shared_ptr<ecore::EStructuralFeature> getEStructuralFeature(int featureID) ;
        
        virtual std::shared_ptr<ecore::EStructuralFeature> getEStructuralFeature(const std::string& featureName) ;
        
        virtual int getFeatureID(const std::shared_ptr<ecore::EStructuralFeature>& feature) ;
        
        virtual int getOperationCount() ;
        
        virtual std::shared_ptr<ecore::EOperation> getEOperation(int operationID) ;
        
        virtual int getOperationID(const std::shared_ptr<ecore::EOperation>& operation) ;
        
        virtual std::shared_ptr<ecore::EOperation> getOverride(const std::shared_ptr<ecore::EOperation>& operation) ;
        
        virtual std::shared_ptr<ecore::EGenericType> getFeatureType(const std::shared_ptr<ecore::EStructuralFeature>& feature) ;
        
        
        //*********************************
        // Attributes
        //*********************************
        virtual bool isAbstract() const ;
        
        virtual void setAbstract(bool newAbstract) ;
        
        virtual bool isInterface() const ;
        
        virtual void setInterface(bool newInterface) ;
        
        
        //*********************************
        // References
        //*********************************
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EClass>>> getESuperTypes() const ;
        
        virtual void unsetESuperTypes() ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EOperation>>> getEOperations() const ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EAttribute>>> getEAllAttributes() const ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EReference>>> getEAllReferences() const ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EReference>>> getEReferences() const ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EAttribute>>> getEAttributes() const ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EReference>>> getEAllContainments() const ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EOperation>>> getEAllOperations() const ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EStructuralFeature>>> getEAllStructuralFeatures() const ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EClass>>> getEAllSuperTypes() const ;
        
        virtual std::shared_ptr<ecore::EAttribute> getEIDAttribute() const ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EStructuralFeature>>> getEStructuralFeatures() const ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EGenericType>>> getEGenericSuperTypes() const ;
        
        virtual void unsetEGenericSuperTypes() ;
        
        virtual std::shared_ptr<EList<std::shared_ptr<ecore::EGenericType>>> getEAllGenericSuperTypes() const ;
        
        

    protected:
        virtual std::shared_ptr<EClass> eStaticClass() const;

        //*********************************
        // Reflectives
        //*********************************
        virtual boost::any eGet(int featureID, bool resolve, bool coreType) const;
        virtual void eSet(int featureID, const boost::any& newValue);
        virtual void eUnset(int featureID);
        virtual bool eIsSet(int featureID) const;
        virtual boost::any eInvoke( int operationID, const std::shared_ptr<EList<boost::any>>& arguments );
        virtual std::shared_ptr<ENotificationChain> eBasicInverseAdd( const std::shared_ptr<EObject>& otherEnd, int featureID, const std::shared_ptr<ENotificationChain>& notifications );
        virtual std::shared_ptr<ENotificationChain> eBasicInverseRemove( const std::shared_ptr<EObject>& otherEnd, int featureID, const std::shared_ptr<ENotificationChain>& notifications );
        

    protected:
        bool abstract_;
        bool interface_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EClass>>>> eSuperTypes_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EOperation>>>> eOperations_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EAttribute>>>,void> eAllAttributes_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EReference>>>,void> eAllReferences_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EReference>>>,void> eReferences_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EAttribute>>>,void> eAttributes_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EReference>>>,void> eAllContainments_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EOperation>>>,void> eAllOperations_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EStructuralFeature>>>,void> eAllStructuralFeatures_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EClass>>>,void> eAllSuperTypes_;
        Lazy<std::shared_ptr<ecore::EAttribute>,void> eIDAttribute_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EStructuralFeature>>>> eStructuralFeatures_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EGenericType>>>,void> eGenericSuperTypes_;
        Lazy<std::shared_ptr<EList<std::shared_ptr<ecore::EGenericType>>>,void> eAllGenericSuperTypes_;
        

    private:
        std::shared_ptr<EList<std::shared_ptr<ecore::EClass>>> initESuperTypes();
        std::shared_ptr<EList<std::shared_ptr<ecore::EOperation>>> initEOperations();
        std::shared_ptr<EList<std::shared_ptr<ecore::EStructuralFeature>>> initEStructuralFeatures();
        void initEAllAttributes();
        void initEAllReferences();
        void initEReferences();
        void initEAttributes();
        void initEAllContainments();
        void initEAllOperations();
        void initEAllStructuralFeatures();
        void initEAllSuperTypes();
        void initEIDAttribute();
        void initEGenericSuperTypes();
        void initEAllGenericSuperTypes();
        

    private:
        std::weak_ptr<EClassImpl> thisPtr_;
    
        // Start of user code EClassImpl [definition-methods]
    public:
        std::shared_ptr<EList<std::shared_ptr<ecore::EReference>>> getEAllCrossReferences();
        void setModified( int featureID );

    private:
        void initFeaturesSubSet();
        void initNameToFeatureMap();
        void initOperationToOverrideMap();

    private:
        class ESuperAdapter;
        std::unique_ptr<ESuperAdapter> eSuperAdapter_;
        std::shared_ptr< EList<std::shared_ptr<EReference>>> eAllCrossReferences_;
        std::unique_ptr< std::unordered_map< std::string, std::shared_ptr<EStructuralFeature>>> nameToFeatureMap_;
        std::unique_ptr< std::unordered_map< std::shared_ptr<EOperation>, std::shared_ptr<EOperation>>> operationToOverrideMap_;
        // End of user code
    };
}
#endif /* ECORE_ECLASS_ECLASSIMPL_HPP */
