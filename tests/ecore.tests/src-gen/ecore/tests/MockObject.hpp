// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2018 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//    
// Warning: This file was generated by soft.generator.cpp Generator
// 
//*****************************************************************************
#ifndef ECORE_EOBJECT_MOCKOBJECT_HPP
#define ECORE_EOBJECT_MOCKOBJECT_HPP

#include "ecore/EObject.hpp"
#include "ecore/tests/MockNotifier.hpp"

namespace ecore::tests
{

    class MockObject : public virtual MockNotifier, public virtual EObject 
    {
    public:
        typedef EObject base_type;
        MOCK_CONST_METHOD0(eClass, std::shared_ptr<ecore::EClass>() );
        MOCK_CONST_METHOD0(eIsProxy, bool() );
        MOCK_CONST_METHOD0(eResource, std::shared_ptr<ecore::EResource>() );
        MOCK_CONST_METHOD0(eContainer, std::shared_ptr<ecore::EObject>() );
        MOCK_CONST_METHOD0(eContainingFeature, std::shared_ptr<ecore::EStructuralFeature>() );
        MOCK_CONST_METHOD0(eContainmentFeature, std::shared_ptr<ecore::EReference>() );
        MOCK_CONST_METHOD0(eContents, std::shared_ptr<const EList<std::shared_ptr<ecore::EObject>>>() );
        MOCK_CONST_METHOD0(eAllContents, std::shared_ptr<const ECollectionView<std::shared_ptr<ecore::EObject>>>() );
        MOCK_CONST_METHOD0(eCrossReferences, std::shared_ptr<const EList<std::shared_ptr<ecore::EObject>>>() );
        MOCK_CONST_METHOD1(eGet, ecore::Any(const std::shared_ptr<ecore::EStructuralFeature>&) );
        MOCK_CONST_METHOD2(eGet, ecore::Any(const std::shared_ptr<ecore::EStructuralFeature>&,bool) );
        MOCK_METHOD2(eSet, void(const std::shared_ptr<ecore::EStructuralFeature>&,const ecore::Any&) );
        MOCK_CONST_METHOD1(eIsSet, bool(const std::shared_ptr<ecore::EStructuralFeature>&) );
        MOCK_METHOD1(eUnset, void(const std::shared_ptr<ecore::EStructuralFeature>&) );
        MOCK_METHOD2(eInvoke, ecore::Any(const std::shared_ptr<ecore::EOperation>&,const std::shared_ptr<EList<ecore::Any>>&) );
        
        
        // Start of user code MockObject
        MOCK_METHOD2( eSetResource,
                      std::shared_ptr<ENotificationChain>( const std::shared_ptr<EResource>&,
                                                           const std::shared_ptr<ENotificationChain>& ) );
        MOCK_METHOD3( eInverseAdd,
                      std::shared_ptr<ENotificationChain>( const std::shared_ptr<EObject>&,
                                                           int,
                                                           const std::shared_ptr<ENotificationChain>& ) );
        MOCK_METHOD3( eInverseRemove,
                      std::shared_ptr<ENotificationChain>( const std::shared_ptr<EObject>&,
                                                           int,
                                                           const std::shared_ptr<ENotificationChain>& ) );
        MOCK_CONST_METHOD0( eProxyUri, Uri() );
        MOCK_METHOD1( eSetProxyURI, void( const Uri& ) );
        MOCK_CONST_METHOD1( eResolveProxy, std::shared_ptr<EObject>( const std::shared_ptr<EObject>& ) );
        // End of user code
    };
} 

#endif /* ECORE_EOBJECT_MOCKOBJECT_HPP */
