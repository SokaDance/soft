[comment encoding = UTF-8 /]
[module generateCommon('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]

[query public hasGenModel(aModelElement : EModelElement) : Boolean = eAnnotations->select( source = 'http://net.masagroup/soft/2019/GenGo' )->notEmpty() /]
[query public getGenModelAnnotation(aModelElement : EModelElement) : EAnnotation = eAnnotations->select( source = 'http://net.masagroup/soft/2019/GenGo' )->first() /]

[query public hasKey(aModelElement : EModelElement, aKey:String) : Boolean = if aModelElement.hasGenModel() then aModelElement.getGenModelAnnotation().details->select(key = aKey)->notEmpty() else false endif /]
[query public valueKey(aModelElement : EModelElement, aKey:String) : String = aModelElement.getGenModelAnnotation().details->select(key = aKey)->first().value /]

[query private getAncestor( aElement : EModelElement ) : EModelElement = 
if aElement.oclIsKindOf(EOperation) then aElement.oclAsType(EOperation).eContainingClass
else if aElement.oclIsKindOf(EStructuralFeature) then aElement.oclAsType(EStructuralFeature).eContainingClass
else if aElement.oclIsKindOf(EClass) then aElement.oclAsType(EClass).ePackage
else null
endif endif endif 
/]

[query private getAncestors( aElement : EModelElement ) : Sequence(EModelElement) = 
    let ancestor : EModelElement = aElement.getAncestor() in
    if ( ancestor.oclIsUndefined() ) then
        Sequence(EModelElement){}
    else
        ancestor.getAncestors()->prepend( ancestor )
    endif
/]

[query private getAnnotationValue(aElement : EModelElement, aKey:String ) : String =
    if aElement.hasKey(aKey) then
        aElement.valueKey( aKey )
    else
        let ancestor : EModelElement = aElement.getAncestor() in
        if ancestor.oclIsUndefined() then
            null
        else
            ancestor.getAnnotationValue(aKey)
        endif
    endif     
/]

[query private getElementName( aElement : ENamedElement, aKey:String ) : String = aElement.getElementName(aElement.name, aKey, null)/]
[query private getElementName( aElement : ENamedElement, aName : String , aKey:String ) : String = aElement.getElementName(aName, aKey, null)/]
[query private getElementName( aElement : ENamedElement, aName : String , aKey:String , defaultRule : String ) : String =
    let value : String = aElement.getAnnotationValue( aKey ) in
    let rule : String = if value.oclIsUndefined() then defaultRule else value endif in
    if rule.oclIsUndefined() then
        aName
    else
        let index : Integer = rule.index( ':' ) in
        let pattern : String = if index = -1 then '(.*)' else rule.substring(1, index - 1) endif in
        let replacement : String = if index = -1 then rule else rule.substring(index + 1) endif in
        aName.replaceFirst( pattern , replacement )
    endif
/]

[query private getFactoryName( aPackage : EPackage ) : String = aPackage.getElementName(aPackage.name, 'factoryName','$1Factory').toUpperFirst()/]
[query private getPackageName( aPackage : EPackage ) : String = aPackage.getElementName(aPackage.name, 'packageName','$1Package').toUpperFirst()/]

[query public getInterfaceName( aClass : EClass ) : String = aClass.getInterfaceName(aClass.name)/]
[query public getInterfaceName( aPackage : EPackage ) : String = aPackage.getInterfaceName( getPackageName() )/]
[query private getInterfaceName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'interfaceName').toUpperFirst() /]

[query public getQualifiedInterfaceName( aClass : EClass ) : String = aClass.ePackage.name + '.'  + aClass.getInterfaceName()/]
[query public getQualifiedInterfaceName( aPackage : EPackage ) : String = aPackage.name + '.' + aPackage.getInterfaceName()/]

[query public getImplementationName( aClass : EClass ) : String = aClass.getImplementationName( aClass.name )/]
[query public getImplementationName( aPackage : EPackage ) : String = aPackage.getImplementationName( getPackageName() ) /]
[query private getImplementationName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'implementationName', '$1Impl').toUpperFirst() /]

[query public getOutputFileName( aPackage : EPackage , aName : String ) : String = aPackage.getElementName( aName , 'ouputName', '$1_gen.go').toLower()/]

[query public getterPrefix(feature : EStructuralFeature) : String = if feature.eType.name = 'EBoolean' then 'Is' else 'Get' endif/]

[query public getSetterName(feature : EStructuralFeature) : String = feature.getElementName( name.toUpperFirst(), 'setterName', 'Set$1')/]
[query public getGetterName(feature : EStructuralFeature) : String =  feature.getElementName( name.toUpperFirst(), 'getterName', feature.getterPrefix() + '$1')/]
[query public getUnSetterName(feature : EStructuralFeature) : String = feature.getElementName( name.toUpperFirst(), 'unSetterName', 'Unset$1')/]
[query public getIsSetName(feature : EStructuralFeature) : String = feature.getElementName( name.toUpperFirst(), 'isSetName', 'IsSet$1')/]

[query public getFunctionName(aOperation : EOperation ) : String = aOperation.getElementName( aOperation.name , 'operationName' ).toUpperFirst()/]

[query public getMetaType(anENamedElement : ENamedElement) : String = if anENamedElement.eClass().ePackage.name ='ecore' then anENamedElement.eClass().getInterfaceName() else anENamedElement.eClass().getQualifiedInterfaceName() endif /]

[query private getMemberName(anENamedElement : ENamedElement) : String = 
    if anENamedElement.oclIsKindOf(EClassifier) then 
        anENamedElement.oclAsType(EClassifier).getMemberName() 
    else if anENamedElement.oclIsKindOf(EStructuralFeature) then 
        anENamedElement.oclAsType(EStructuralFeature).getMemberName()
    else if anENamedElement.oclIsKindOf(EOperation) then
        anENamedElement.oclAsType(EOperation).getMemberName()
    else
         anENamedElement.name.toLowerFirst()
    endif endif endif
/]
[query private getMemberName(anEClassifier : EClassifier) : String = anEClassifier.name.toLowerFirst() /]
[query private getMemberName(aStructural : EStructuralFeature) : String = aStructural.eContainingClass.name.toLowerFirst().concat('_').concat(aStructural.name.toUpperFirst()) /]
[query private getMemberName(aOperation : EOperation) : String = aOperation.eContainingClass.name.toLowerFirst().concat('_'.concat(aOperation.name.toUpperFirst()).concat(aOperation.getParameterListName())) /]
[query private getParameterListName( aOperation : EOperation) : String = if aOperation.eParameters->notEmpty() then '_'.concat(aOperation.getParameterListDetailsName()) else '' endif /]
[query private getParameterListDetailsName(aOperation : EOperation) : String = if aOperation.eParameters->size()>1 then aOperation.eParameters->first().eType.name.concat('_').concat(aOperation.eParameters->last().eType.name) else aOperation.eParameters->first().eType.name endif /]

[query public getElementAccessorName(anENamedElement : ENamedElement) : String = anENamedElement.getMemberName().toUpperFirst() /]
[query public getElementInstanceName(anENamedElement : ENamedElement) : String = anENamedElement.getMemberName() /]

[query public getShortQualifiedName( aQualifiedName : String , aNamespaceName : String ) : String =
    let aQualifiedNames : Sequence(String) = aQualifiedName.tokenize('.') in
    let aNamespaceNames : Sequence(String) = aNamespaceName.tokenize('.') in
    let shortQualifiedNames : Sequence(String) = Sequence{1..aQualifiedNames->size()}->iterate( index ; res : Sequence(String) = Sequence{} |
        let n : String = aQualifiedNames->at(index) in
        if ( res->isEmpty() and index <= aNamespaceNames->size() and (n = aNamespaceNames->at(index)) ) then
            res
        else
            res->append(n)
        endif
    ) in
    shortQualifiedNames->join('.')
/]
