[comment encoding = UTF-8 /]
[module generateReflectives('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateReflectives/]
[import soft::generator::common::generateCommon/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::generateCommon/]

[template public generateReflectivesDefinition(aClass : EClass)]
[if aClass.getEGetFeatures()->notEmpty() or
    aClass.getESetFeatures()->notEmpty() or
    aClass.getEUnSetFeatures()->notEmpty() or
    aClass.getEIsSetFeatures()->notEmpty() or
    aClass.eOperations->notEmpty() or
    aClass.getEInverseAddFeatures()->notEmpty() or
    aClass.getEInverseRemoveFeatures()->notEmpty()]

[if aClass.getEGetFeatures()->notEmpty()]
[aClass.generateEGetDefinition()/]

[/if]

[/if]
[/template]

[template private generateEGetDefinition(aClass : EClass)]
[let className : String = aClass.getImplementationName()]
[aClass.generateFunctionReceiver()/] EGet(featureID int, resolve, coreType bool) interface{} {
    switch featureID {
    [for (anStructFeature : EStructuralFeature | aClass.eStructuralFeatures->asOrderedSet()->sortedBy(name))]
        case [anStructFeature.getQualifiedFeatureIDName()/]:
			return [aClass.getReceiverName()/].[anStructFeature.getGetterName()/]()
    [/for]
    }
    return [aClass.getReceiverName()/].[aClass.getRawClassExtends()/].EGet(featureID, resolve, coreType)
}
[/let]
[/template]