[comment encoding = UTF-8 /]
[module generateImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateOperation/]
[import soft::generator::go::lib::generateStructuralFeature/]

[template public generateConstructor(aClass : EClass)]
// new[aClass.getImplementationName()/] is [aClass.getImplementationName()/] contructor 
func new[aClass.getImplementationName()/]() *[aClass.getImplementationName()/] {
    new[aClass.getImplementationName()/] := new([aClass.getImplementationName()/])
    [if aClass.name <> 'EObject']
    [if aClass.eSuperTypes->size() = 0]
    new[aClass.getImplementationName()/].Notifier = *NewNotifier()
    [else]
    [for (extend: EClass | aClass.eSuperTypes)]
    new[aClass.getImplementationName()/].[getImplementationName(extend)/] = *new[getImplementationName(extend)/]()
    [/for]
    [/if]
    [/if]
    return new[aClass.getImplementationName()/]
}

[/template]

[template private generateMethods(aClass : EClass)]
[aClass.eOperations.generateImplementation()/]
[let features : OrderedSet(EStructuralFeature) = aClass.eStructuralFeatures->select( isGet() or isSet() )]
[features.generateImplementation(aClass)/]
[/let]
[/template]

[template public generateImplementation(aClass : EClass) { implementationName : String = aClass.getImplementationName(); } ]
[file (aClass.ePackage.getOutputDirectory() + '/' + aClass.ePackage.getOutputFileName(implementationName), false, 'UTF-8')]
package [aClass.ePackage.name/]

// [implementationName/] is the implementation of the model object '[aClass.name/]'
type [implementationName/] struct {
[for (extend: EClass | aClass.eSuperTypes)]    [getImplementationName(extend)/][/for]
[if aClass.name <> 'EObject' and aClass.eSuperTypes->size() = 0]
    Notifier
    EObjectImpl
[/if]
[let features : OrderedSet(EStructuralFeature) = aClass.eStructuralFeatures->select( isGet() or isSet() )]
    [features.generateVariable()/]
[/let]
}

[aClass.generateConstructor()/]

[aClass.generateMethods()/]

[/file]
[/template]
