[comment encoding = UTF-8 /]
[module generateImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateOperation/]
[import soft::generator::go::lib::generateStructuralFeature/]

[template public generateConstructor(aClass : EClass)]
// [aClass.getConstructorName()/] is the constructor of a [aClass.getImplementationName()/]
func [aClass.getConstructorName()/]() *[aClass.getImplementationName()/] {
    [aClass.getReceiverName()/] := new([aClass.getImplementationName()/])
[for ( qualifiedExtend : String | aClass.getClassExtends() )]
    [aClass.getReceiverName()/].[getShortQualifiedName(qualifiedExtend,aClass.ePackage.name)/] = [getShortQualifiedName(getConstructorName(qualifiedExtend), aClass.ePackage.name)/]()
[/for] 
[if aClass.eStructuralFeatures->notEmpty()]
    [aClass.eStructuralFeatures.generateVariableInitialization()/]
[/if]
    return [aClass.getReceiverName()/]
}
[/template]

[template private generateMethods(aClass : EClass)]
[aClass.eOperations.generateImplementation()/]
[let features : OrderedSet(EStructuralFeature) = aClass.eStructuralFeatures->select( isGet() or isSet() )]
[features.generateImplementation(aClass)/]
[/let]
[/template]

[template public generateImplementation(aClass : EClass) { implementationName : String = aClass.getImplementationName(); aPackage : EPackage = aClass.ePackage } ]
[file (aClass.ePackage.getOutputDirectory() + '/' + aClass.ePackage.getOutputFileName(implementationName), false, 'UTF-8')]
package [aPackage.name/]

// [implementationName/] is the implementation of the model object '[aClass.name/]'
type [implementationName/] struct {
[for ( qualifiedExtend : String | aClass.getClassExtends() )]
    *[getShortQualifiedName(qualifiedExtend,aPackage.name)/]
[/for]
[let features : OrderedSet(EStructuralFeature) = aClass.eStructuralFeatures->select( isField() )]
    [features.generateVariable()/]
[/let]
}

[aClass.generateConstructor()/]

[aClass.generateMethods()/]

[/file]
[/template]
