[comment encoding = UTF-8 /]
[module generateImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::impl::generateCommon/]
[import soft::generator::go::lib::impl::generateStructuralFeature/]

[template private generateInheritedMethods(aClass : EClass, firstClass : EClass, baseClass : EClass)]
[let operations : OrderedSet(EOperation) = aClass.eOperations]
[operations.generateOperationParent(firstClass, baseClass)/]
[/let]
[let features : OrderedSet(EStructuralFeature) = aClass.eStructuralFeatures->select( isGet() or isSet() )]
[features.generateInheritedImplementation(firstClass, baseClass)/]
[/let]
[for (extend: EClass | aClass.eSuperTypes)][generateInheritedMethods(extend, firstClass, baseClass)/][/for]
[/template]

[template private generateMethods(aClass : EClass)]
[let operations : OrderedSet(EOperation) = aClass.eOperations]
[operations.generateOperationPanic(aClass)/]
[/let]
[let features : OrderedSet(EStructuralFeature) = aClass.eStructuralFeatures->select( isGet() or isSet() )]
[features.generateImplementation(aClass)/]
[/let]
[for (extend: EClass | aClass.eSuperTypes)][generateInheritedMethods(extend, extend, aClass)/][/for]
[/template]

[template public generateImplementation(aClass : EClass) { implementationName : String = aClass.name; } ]
[file (aClass.ePackage.getOutputDirectory() + '/' + aClass.getInterfaceImplementationFileName() , false, 'UTF-8')]
package [aClass.ePackage.name/]

type [getImplementationName(aClass)/] struct {
[for (extend: EClass | aClass.eSuperTypes)]    [getImplementationName(extend)/][/for]
[let features : OrderedSet(EStructuralFeature) = aClass.eStructuralFeatures->select( isGet() or isSet() )]
    [features.generateVariable()/]
[/let]
}
[generateMethods(aClass)/]

[/file]
[/template]
