[comment encoding = UTF-8 /]
[module generateImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::go::generateCommon/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::impl::generateCommon/]
[import soft::generator::go::lib::impl::generateStructuralFeature/]

[template public generateMethods(aClass : EClass, middleName : String, baseClass : EClass)]
[let operations : OrderedSet(EOperation) = aClass.eOperations]
[if operations->notEmpty()]
[operations.generateOperationPanic(baseClass)/]
[/if]
[/let]
[let attributes : OrderedSet(EAttribute) = aClass.eStructuralFeatures->selectByKind(EAttribute)->select( isGet() or isSet() )]
[if attributes->notEmpty()]
[attributes.generateImplementation(middleName, baseClass)/]
[/if]
[/let]
[let references : OrderedSet(EAttribute) = aClass.eStructuralFeatures->selectByKind(EReference)->select( isGet() or isSet() )]
[if references->notEmpty()]
[references.generateImplementation(middleName, baseClass)/]
[/if]
[/let]
[for (extend: EClass | aClass.eSuperTypes)][generateMethods(extend, middleName + '.' + getImplementationName(extend), baseClass)/][/for]
[/template]

[template public generateImplementation(aClass : EClass) { implementationName : String = aClass.name; } ]
[file (aClass.ePackage.getOutputDirectory() + '/' + aClass.getInterfaceImplementationFileName() , false, 'UTF-8')]
package [aClass.ePackage.name/]

type [getImplementationName(aClass)/] struct {
[for (extend: EClass | aClass.eSuperTypes)]    [getImplementationName(extend)/][/for]
[let attributes : OrderedSet(EAttribute) = aClass.eStructuralFeatures->selectByKind(EAttribute)->select( isGet() or isSet() )]
[if attributes->notEmpty()]
    [attributes.generateVariable()/]
[/if]
[/let]
[let references : OrderedSet(EAttribute) = aClass.eStructuralFeatures->selectByKind(EReference)->select( isGet() or isSet() )]
[if references->notEmpty()]
    [references.generateVariable()/]
[/if]
[/let]
}
[generateMethods(aClass, '', aClass)/]

[/file]
[/template]