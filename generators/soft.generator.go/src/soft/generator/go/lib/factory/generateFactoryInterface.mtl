[comment encoding = UTF-8 /]
[module generateFactoryInterface('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::generateType/]
[import soft::generator::go::generateCommon/]

[template public generateFactoryInterface(anEPackage : EPackage) { className : String = anEPackage.getFactoryName() ; }]
[file (anEPackage.getOutputDirectory() + '/' + anEPackage.getOutputFileName(className), false, 'UTF-8')]
package ecore

type [className/] interface {
[for (aEClass : EClass | anEPackage.eAllContents(EClass)->sortedBy(name))]
	Create[aEClass.name/]() [aEClass.getInterfaceName()/]
[let ref:OrderedSet(EReference) = aEClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
	Create[aEClass.name/]FromContainer(eContainer [aReference.eGenericType.generateType()/]) [aEClass.getInterfaceName()/]
[if(aEClass.getElementIDAccessorName().size() > 0)]
	Create[aEClass.name/]FromContainerAndClassID(eContainer [aReference.eGenericType.generateType()/], classID int) [aEClass.getInterfaceName()/]
[/if]
[/for]
[/let]
[/for]
[let dataTypes : Sequence(EDataType) = anEPackage.eAllContents(EDataType)->select( serializable )->sortedBy(name)]
[for (aDataType : EDataType | dataTypes)]
create[aDataType.name/]FromString(eDataType EDataType, literalValue string) interface{}
convert[aDataType.name/]FromString(eDataType EDataType, literalValue interface{}) string
[/for]
[/let]
}
[/file]
[/template]