[comment encoding = UTF-8 /]
[module generateTest('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::generateCommon/]
[import soft::generator::common::generateCommon/]
[import soft::generator::go::lib::test::generateType/]

[template public generateTest(aClass : EClass) { implementationName : String = aClass.getImplementationName(); aPackage : EPackage = aClass.ePackage } ]
[file (aClass.ePackage.getOutputDirectory() + '/' + aClass.getImplementationTestFileName( aClass.name ), false, 'UTF-8')]
[fileComment()/]

package [aPackage.name/]

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func [implementationName/]Test(t *testing.T) {
	_ = assert.Equal
	[aClass.eStructuralFeatures.generateTestImplementation(aClass)/]
}
[/file]
[/template]

[template private generateTestImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[if isField()]
[if isGet()]
	[aStructuralFeature.generateGetTestImplementation(aClass)/]
[/if]
[if isBasicGet()]
[/if]
[if isSet()]
[/if]
[if isBasicSet()]
[/if]
[if isUnSet()]
[/if]
[if isBasicUnSet()]
[/if]
[/if]
[/template]

[template private generateGetTestImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[let varName : String = aStructuralFeature.getVariableName() ]
[let varAssigned : String = if aStructuralFeature.isListType() then 'NewEmptyArrayEList()' else aStructuralFeature.eType.getTestValue() endif ]
{
	obj := new[aClass.getImplementationName().toUpperFirst()/]()
	obj.[varName/] = [varAssigned/]
	assert.Equal(t, [varAssigned/], obj.[varName/])
}
[/let]
[/let]
[/template]