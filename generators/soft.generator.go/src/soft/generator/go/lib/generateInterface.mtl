[comment encoding = UTF-8 /]
[module generateInterface('http://www.eclipse.org/emf/2002/Ecore')/]


[import soft::generator::common::generateCommon/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateOperation/]
[import soft::generator::go::lib::generateStructuralFeature/]

[template public generateInterface(aClass : EClass) { interfaceName : String = aClass.getInterfaceName(); } ]
[file (aClass.ePackage.getOutputDirectory() + '/' + aClass.getInterfaceFileName() , false, 'UTF-8')]
package [aClass.ePackage.name/]

type [interfaceName/] interface {
[for (extend: EClass | aClass.eSuperTypes)]    [extend.name/][/for]
[if aClass.name <> 'EObject' and aClass.eSuperTypes->size() = 0]
	ENotifier
	EObject
[/if]
[let operations : OrderedSet(EOperation) = aClass.eOperations]
[if operations->notEmpty()]
    [operations.generateDeclaration()/]
[/if]
[/let]
[let attributes : OrderedSet(EAttribute) = aClass.eStructuralFeatures->selectByKind(EAttribute)->select( isGet() or isSet() )]
[if attributes->notEmpty()]
    [attributes.generateDeclaration()/]
[/if]
[/let]
[let references : OrderedSet(EAttribute) = aClass.eStructuralFeatures->selectByKind(EReference)->select( isGet() or isSet() )]
[if references->notEmpty()]
    [references.generateDeclaration()/]
[/if]
[/let]
    // [protected (interfaceName)]
    // [/protected]
}

[/file]
[/template]

