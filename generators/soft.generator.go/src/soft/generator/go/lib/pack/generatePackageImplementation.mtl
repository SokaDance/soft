[comment encoding = UTF-8 /]
[module generatePackageImplementation('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]

[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::pack::generateCommon/]

[template private generateDataMember(anENamedElement : ENamedElement, anEPackage : EPackage)] 
[anENamedElement.getElementInstanceName()/] [getMetaType(anENamedElement)/] 

[/template]

[template private generateGetter(anENamedElement : ENamedElement, anEPackage : EPackage)]
// [anENamedElement.getReflectiveGetterName()/] returns the meta object corresponding to 
func (p *[anEPackage.getImplementationName()/]) [anENamedElement.getReflectiveGetterName()/]() [getMetaType(anENamedElement)/] {
    return p.[anENamedElement.getElementInstanceName()/]
}
[/template]

[template private generateCreation(aEClass : EClass)]
p.[aEClass.getElementInstanceName()/] = factory.CreateEClassFromContainerAndClassID(p, [aEClass.getClassifierIDName()/]);

[/template]

[template private generateInitialization(aEClass : EClass)]
p.[aEClass.getElementInstanceName()/].SetName("[aEClass.name/]");
p.[aEClass.getElementInstanceName()/].SetAbstract([aEClass.abstract.toString()/]);
p.[aEClass.getElementInstanceName()/].SetInterface([aEClass.interface.toString()/]);
[/template]

[template private generateCreation(aStructuralFeature : EStructuralFeature)]
[/template]

[template private generateCreation(anEAttribute : EAttribute)]
p.[anEAttribute.getElementInstanceName()/] = factory.CreateEAttributeFromContainerAndClassID(p.[anEAttribute.eContainingClass.getElementInstanceName()/], [anEAttribute.eContainingClass.getFeatureIDName(anEAttribute)/]);

[/template]

[template private generateCreation(anEReference : EReference)]
p.[anEReference.getElementInstanceName()/] = factory.CreateEReferenceFromContainerAndClassID(p.[anEReference.eContainingClass.getElementInstanceName()/], [anEReference.eContainingClass.getFeatureIDName(anEReference)/]);

[/template] 

[template public generateCreation(anEOperation : EOperation)]
p.[anEOperation.getElementInstanceName()/] = factory.CreateEOperationFromContainerAndClassID(p.[anEOperation.eContainingClass.getElementInstanceName()/], [anEOperation.eContainingClass.getOperationIDName(anEOperation)/]);

[/template]

[template public generateCreation(anEDatatype : EDataType)]
p.[anEDatatype.getElementInstanceName()/] = factory.Create[if (anEDatatype.oclIsKindOf(EEnum))]EEnum[else]EDataType[/if]FromContainerAndClassID(p, [anEDatatype.getClassifierIDName()/]);

[/template]

[template public generatePackageImplementation(anEPackage : EPackage){ className : String = anEPackage.getImplementationName(); } ]]
[file (anEPackage.getOutputDirectory() + '/'+ anEPackage.getOutputFileName(className) , false, 'UTF-8')]
package [anEPackage.name/]

// [className/] is the [anEPackage.getInterfaceName()/] implementation
type [className/] struct {
    *EPackageImpl
[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    [let dataMembers : Sequence(ENamedElement) = Sequence{ Sequence{ aClass } , aClass.eStructuralFeatures, aClass.eOperations}->flatten()]
    [dataMembers.generateDataMember(anEPackage)/]
    [/let]
[/for]
    [anEPackage.eAllContents(EDataType)->sortedBy(name).generateDataMember(anEPackage)/]
}

func new[className.toUpperFirst()/]() *[className/] {
    p := new([className/])
    p.EPackageImpl = NewEPackageImpl()
    p.createPackageContents()
    p.initializePackageContents()
    return p
}

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
[aClass.generateGetter(anEPackage)/]
[aClass.eAttributes->sortedBy(name).generateGetter(anEPackage)/]
[aClass.eReferences->sortedBy(name).generateGetter(anEPackage)/]
[aClass.eOperations->sortedBy(name).generateGetter(anEPackage)/]
[/for]
[anEPackage.eAllContents(EDataType)->sortedBy(name).generateGetter(anEPackage)/]

func (p *[className/])createPackageContents() {
[let factoryName : String = if anEPackage.name = 'ecore' then '' else 'ecore.' endif + 'GetEcoreFactory']
    factory := [factoryName/]()
[/let]
[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    p.create[aClass.name.toUpperFirst()/]Content(factory);
[/for]
    p.createPackageEDataTypes(factory)
}

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
func (p *[className/])create[aClass.name.toUpperFirst()/]Content(factory EcoreFactory) {
    [aClass.generateCreation()/]
    [aClass.eStructuralFeatures.generateCreation()/]
    [aClass.eOperations.generateCreation()/]
}
[/for]

func (p *[className/])createPackageEDataTypes(factory EcoreFactory) {
    [anEPackage.eAllContents(EDataType)->sortedBy(name).generateCreation()/]
}

func (p *[className/])initializePackageContents() {
    // Initialize package
    p.SetName(NAME);
    p.SetNsPrefix(NS_PREFIX);
    p.SetNsURI(NS_URI);
}


[/file]
[/template]
