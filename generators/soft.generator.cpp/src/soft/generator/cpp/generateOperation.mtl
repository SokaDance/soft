[comment encoding = UTF-8 /]
[module generateOperation('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::utils/]

[template public generateOperationDeclaration(anEOperation : EOperation, impl: Boolean)]
[if (((impl or (not hasImplOnly())) and (not (doNotGenerate() or ignore()))))]
virtual [anEOperation.generateReturnType()/] [anEOperation.name/]([anEOperation.generateParameterList()/])[if (hasKey('const'))] const[/if] [abstractSufix(impl)/];

[/if]
[/template]


[template public generateOperationImplementation(anEOperation : EOperation) ? (not (ignore() or doNotGenerate()))]
[anEOperation.generateReturnType()/] [anEOperation.eContainingClass.name.toUpperFirst()/]Impl::[anEOperation.name/]([anEOperation.generateParameterList()/])[if (hasKey('const'))] const[/if]
{
[if (hasKey('body'))]
    [valueKey('body')/]
[else]
    // [protected (anEOperation.name)]
    std::cout << BOOST_CURRENT_FUNCTION  << std::endl;
    throw "UnsupportedOperationException";
    // [/protected]
[/if]
}
[/template]

[template public generateStaticOperationID(aOperation : EOperation) ? ( not hasImplOnly())]
static const int [aOperation.getStaticElementID()/] = [aOperation.eContainingClass.getSafeClassifierID() * 100 + aOperation.eContainingClass.getFeatureCount() + aOperation.getOperationID()/];

[/template]

[query public simpleDatatypeGetter(anEClassifier : EClassifier, anOperation: EOperation) : String = if anOperation.eType.oclIsUndefined() or anOperation.eTypeParameters->notEmpty() then 'nullptr' else needMetaModelPackageGetter(anEClassifier, anOperation.eContainingClass).concat('get').concat(anEClassifier.getMemberNameUpperFirst()).concat('()') endif/]

[template public generateOperationCreation(anEOperation : EOperation) ? ( not hasImplOnly()) ]
[anEOperation.getVariableMemberName()/] = factory->createEOperation([anEOperation.eContainingClass.getVariableMemberName()/], [anEOperation.getStaticElementID()/]);

[/template]

[template public generateOperationInitialization(anEOperation : EOperation)? ( not hasImplOnly() )]
[anEOperation.getVariableMemberName()/]->setEType([anEOperation.eType.simpleDatatypeGetter(anEOperation)/]);
[anEOperation.getVariableMemberName()/]->setName("[anEOperation.name.toString()/]");
[anEOperation.getVariableMemberName()/]->setLowerBound([anEOperation.lowerBound/]);
[anEOperation.getVariableMemberName()/]->setUpperBound([anEOperation.upperBound/]);
[anEOperation.getVariableMemberName()/]->setUnique([anEOperation.unique.toString()/]);
[anEOperation.getVariableMemberName()/]->setOrdered([anEOperation.ordered.toString()/]);

[for (anEParameter : EParameter | anEOperation.eParameters) separator ('\r\n')]
{
	std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter([anEOperation.getVariableMemberName()/]);
	parameter->setName("[anEParameter.name/]");
	parameter->setEType([anEParameter.eType.simpleDatatypeGetter(anEParameter.eOperation)/]);
	parameter->setLowerBound(0);
	parameter->setUpperBound(1);
	parameter->setUnique(true);
	parameter->setOrdered(true);
}
[/for]

[/template]