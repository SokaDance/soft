[comment encoding = UTF-8 /]
[module generateOperation('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::utils/]

[template public generateOperationDeclaration(anEOperation : EOperation, impl: Boolean)]
[if ( ((not impl and (not hasImplementationOnly())) or ( impl and not hasInterfaceOnly())) and (not (doNotGenerate() or ignore())) )]
virtual [anEOperation.generateReturnType()/] [anEOperation.name/]([anEOperation.generateParameterList()/])[if (hasKey('const'))] const[/if] [abstractSufix(impl)/];

[/if]
[/template]


[template public generateOperationImplementation(anEOperation : EOperation) ? ( not hasInterfaceOnly() and not (ignore() or doNotGenerate()))]
[anEOperation.generateReturnType()/] [anEOperation.eContainingClass.name.toUpperFirst()/]Impl::[anEOperation.name/]([anEOperation.generateParameterList()/])[if (hasKey('const'))] const[/if]
{
[if (hasKey('body'))]
    [valueKey('body')/]
[else]
    // [protected (anEOperation.name)]
    std::cout << BOOST_CURRENT_FUNCTION  << std::endl;
    throw "UnsupportedOperationException";
    // [/protected]
[/if]
}
[/template]

[template public generateStaticOperationID(aOperation : EOperation , aClass : EClass ) ? ( not hasImplementationOnly())]
/**
 * The operation id for the '[aOperation.name/]' operation.
 */
static const int [aClass.getOperationIDName(aOperation)/] = [aClass.getOperationValue(aOperation)/];

[/template]

[template public generateStaticOperationCountID(anEClass : EClass )]
/**
 *  The number of operations of the class [anEClass.name/].
 */
static const int [anEClass.getOperationCountID()/] = [anEClass.getOperationCountValue()/];

[/template]

[query public simpleDatatypeGetter(anEClassifier : EClassifier, anOperation: EOperation) : String = if anOperation.eType.oclIsUndefined() or anOperation.eTypeParameters->notEmpty() then 'nullptr' else needMetaModelPackageGetter(anEClassifier, anOperation.eContainingClass).concat('get').concat(anEClassifier.getElementAccessorName()).concat('()') endif/]

[template public generateOperationCreation(anEOperation : EOperation) ? ( not hasImplementationOnly()) ]
[anEOperation.getElementInstanceName()/] = factory->createEOperation([anEOperation.eContainingClass.getElementInstanceName()/], [anEOperation.eContainingClass.getOperationIDName(anEOperation)/]);

[/template]

[template public generateOperationInitialization(anEOperation : EOperation)? ( not hasImplementationOnly() )]
[anEOperation.getElementInstanceName()/]->setEType([anEOperation.eType.simpleDatatypeGetter(anEOperation)/]);
[anEOperation.getElementInstanceName()/]->setName("[anEOperation.name.toString()/]");
[anEOperation.getElementInstanceName()/]->setLowerBound([anEOperation.lowerBound/]);
[anEOperation.getElementInstanceName()/]->setUpperBound([anEOperation.upperBound/]);
[anEOperation.getElementInstanceName()/]->setUnique([anEOperation.unique.toString()/]);
[anEOperation.getElementInstanceName()/]->setOrdered([anEOperation.ordered.toString()/]);

[for (anEParameter : EParameter | anEOperation.eParameters) separator ('\r\n')]
{
	std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter([anEOperation.getElementInstanceName()/]);
	parameter->setName("[anEParameter.name/]");
	parameter->setEType([anEParameter.eType.simpleDatatypeGetter(anEParameter.eOperation)/]);
	parameter->setLowerBound(0);
	parameter->setUpperBound(1);
	parameter->setUnique(true);
	parameter->setOrdered(true);
}
[/for]

[/template]