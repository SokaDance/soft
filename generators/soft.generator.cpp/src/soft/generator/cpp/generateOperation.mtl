[comment encoding = UTF-8 /]
[module generateOperation('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::generateCommon/]

[template public generateDeclaration(anEOperation : EOperation, impl: Boolean)]
virtual [anEOperation.generateReturnType()/] [anEOperation.name/]([anEOperation.generateParameterList()/])[if (hasKey('const'))] const[/if] [abstractSufix(impl)/];


[/template]


[template public generateDefinition(anEOperation : EOperation) ? ( anEOperation.isPublic(true))]
[let className : String = anEOperation.eContainingClass.getImplementationName()]
[let methodID : String = if anEOperation.eContainingClass.eOperations->select( eC | eC.name = anEOperation.name )->size() > 1 then anEOperation.getElementIdentifier() else anEOperation.name endif]
[anEOperation.generateReturnType()/] [className/]::[anEOperation.name/]([anEOperation.generateParameterList()/])[if (hasKey('const'))] const[/if]
{
    // [protected ( className+ '::' + methodID)]
[if (hasKey('body'))]
    [valueKey('body')/]
[else]
    std::cout << BOOST_CURRENT_FUNCTION  << std::endl;
    throw "NotImplementedException";
[/if]
    // [/protected]
}
[/let]
[/let]
[/template]

[template public generateMock(anEOperation : EOperation )  ? ( anEOperation.isPublic(false) ) ]
[let needExt : Boolean = anEOperation.eContainingClass.eOperations->select( eC | eC.name = anEOperation.name )->size() > 1]
MOCK_METHOD[if needExt]_EXT[/if]([anEOperation.name/] ,[anEOperation.eParameters->size()/][if needExt], [anEOperation.generateReturnType()/]([anEOperation.generateParameterList(false)/]), [anEOperation.getElementIdentifier()/][/if]) 
[/let]
[/template]

