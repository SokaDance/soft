[comment encoding = UTF-8 /]
[module generateStructuralFeature('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::generateType /]
[import soft::generator::cpp::generateClass /]


[query private getLazy( aStructuralFeature : EStructuralFeature ) : String =
if aStructuralFeature.hasKey('lazy') then 
    aStructuralFeature.valueKey('lazy')
else
    if ( aStructuralFeature.isListType() ) then
        if aStructuralFeature.eContainingClass.ePackage.hasKey('lazy') then 
            aStructuralFeature.eContainingClass.ePackage.valueKey('lazy') 
        else 
            'no'
        endif
    else
        'no'
    endif
endif/]

[query public isLazy( aStructuralFeature : EStructuralFeature ) : Boolean = aStructuralFeature.getLazy() <> 'no'/] 

[template public generateDeclaration(aStructuralFeature : EStructuralFeature, impl : Boolean )]
[if hasGetter('public',impl)]
[aStructuralFeature.generateGetDeclaration(impl)/]

[/if]
[if hasSetter('public',impl)]
[aStructuralFeature.generateSetDeclaration(impl)/]

[/if]
[if hasUnSetter('public',impl)]
[aStructuralFeature.generateUnSetDeclaration(impl)/]

[/if]
[/template]

[template public generateBasicDeclaration(aStructuralFeature : EStructuralFeature)]
[if isBasicGet()]
[aStructuralFeature.generateBasicGetDeclaration()/]

[/if]
[if isBasicSet()]
[aStructuralFeature.generateBasicSetDeclaration()/]

[/if]
[if isBasicUnSet()]
[aStructuralFeature.generateBasicUnSetDeclaration()/]

[/if]
[/template]


[template public generateDefinition(aStructuralFeature : EStructuralFeature)]
[if hasGetter('public',true)]
[aStructuralFeature.generateGetDefinition()/]

[/if]
[if hasSetter('public',true)]
[aStructuralFeature.generateSetDefinition()/]

[/if]
[if hasUnSetter('public',true)]
[aStructuralFeature.generateUnSetDefinition()/]

[/if]
[/template]


[template public generateBasicDefinition(aStructuralFeature : EStructuralFeature)]
[if isBasicGet()]
[aStructuralFeature.generateBasicGetDefinition()/]

[/if]
[if isBasicSet()]
[aStructuralFeature.generateBasicSetDefinition()/]

[/if]
[if isBasicUnSet()]
[aStructuralFeature.generateBasicUnSetDefinition()/]

[/if]
[/template]

[template public generateMock(aStructuralFeature : EStructuralFeature)]
[if hasGetter('public',false)]
[aStructuralFeature.generateGetMock()/]
[/if]
[if hasSetter('public',false)]
[aStructuralFeature.generateSetMock()/]
[/if]
[if hasUnSetter('public',false)]
[aStructuralFeature.generateUnSetMock()/]
[/if]
[/template]

[template public generateDataMember(aStructuralFeature : EStructuralFeature) ]
[if aStructuralFeature.isLazy()]
[let shortQualifiedLazyClass : String = getShortQualifiedName('ecore::impl::Lazy', aStructuralFeature.eContainingClass.ePackage.getQualifiedImplementationName())]
[shortQualifiedLazyClass/]<[aStructuralFeature.generateDataType()/]> [aStructuralFeature.name/]_;
[/let]
[else]
[aStructuralFeature.generateDataType()/] [aStructuralFeature.name/]_;
[/if]
[/template]

[template public generateBasicGetDeclaration(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getImplementationName()]
[let methodName : String = aStructuralFeature.getGetterName().toUpperFirst()]
[aStructuralFeature.generateReturnType()/] [className/]::basic[methodName/]() const; 
[/let]
[/let]
[/template]

[template public generateBasicGetDefinition(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getImplementationName()]
[let methodName : String = 'basic' + aStructuralFeature.getGetterName().toUpperFirst()]
[aStructuralFeature.generateReturnType()/] [className/]::[methodName/]() const 
{
    // [protected (className + '::' + methodName)]
[if isContainer()]
    if ( eContainerFeatureID() != [aStructuralFeature.getQualifiedFeatureIDName()/] )
        return [aStructuralFeature.generateEffectiveType()/]();
    else
        return std::dynamic_pointer_cast<[aStructuralFeature.generateElementType()/]>(eContainer());
[elseif not isVolatile()]
    return [aStructuralFeature.name/]_;
[elseif (hasKey('getterBody'))]
    [valueKey('getterBody')/]
[else]
    std::cout << BOOST_CURRENT_FUNCTION  << std::endl;
    throw "NotImplementedException";    
[/if]
    // [/protected]
}
[/let]
[/let]
[/template]

[template public generateGetDeclaration(aStructuralFeature : EStructuralFeature, impl : EBoolean)]
virtual [aStructuralFeature.generateReturnType()/] [aStructuralFeature.getGetterName()/]() const [abstractSufix(impl)/];
[/template]

[template public generateGetDefinition(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getImplementationName()]
[aStructuralFeature.generateReturnType()/] [className/]::[aStructuralFeature.getGetterName()/]() const 
{
    // [protected (className + '::' + aStructuralFeature.getGetterName()) ]
[if not isVolatile() ]
    [if isListType() ]
    if ( ![aStructuralFeature.name/]_ )
        const_cast<[className/]*>(this)->[aStructuralFeature.name/]_ = [getListConstructor()/];
    return [aStructuralFeature.name/]_;
    [elseif isContainer()]
    if ( eContainerFeatureID() != [aStructuralFeature.getQualifiedFeatureIDName()/] )
        return [aStructuralFeature.generateEffectiveType()/]();
    else
        return std::dynamic_pointer_cast<[aStructuralFeature.generateElementType()/]>(eContainer());
    [else]
    return [aStructuralFeature.name/]_;
    [/if]
[elseif hasKey('getterBody')]
    [valueKey('getterBody')/]
[else]
    std::cout << BOOST_CURRENT_FUNCTION  << std::endl;
    throw "NotImplementedException";
[/if]
    // [/protected]
}
[/let]
[/template]

[template public generateGetMock(aStructuralFeature : EStructuralFeature)]
MOCK_METHOD([aStructuralFeature.getGetterName()/],0);
[/template]

[template public generateBasicSetDeclaration(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getImplementationName()]
[let methodName : String = 'basic' +aStructuralFeature.getSetterName().toUpperFirst()]
[let newVarName : String = 'new' + aStructuralFeature.name.toUpperFirst()]
std::shared_ptr<ecore::ENotificationChain> [className/]::[methodName/]( [aStructuralFeature.generateParameterType()/] [newVarName/] , const std::shared_ptr<ecore::ENotificationChain>& msgs ); 
[/let]
[/let]
[/let]
[/template]


[template public generateBasicSetDefinition(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getImplementationName()]
[let methodName : String = 'basic' +aStructuralFeature.getSetterName().toUpperFirst()]
[let newVarName : String = 'new' + aStructuralFeature.name.toUpperFirst()]
std::shared_ptr<ecore::ENotificationChain> [className/]::[methodName/]( [aStructuralFeature.generateParameterType()/] [newVarName/] , const std::shared_ptr<ecore::ENotificationChain>& msgs) 
{
    // [protected (className + '::' + methodName)]
[if isContainer()]
    return eBasicSetContainer([newVarName/],[aStructuralFeature.getQualifiedFeatureIDName()/],msgs); 
[elseif not isVolatile()]
    [let oldVarName : String = 'old' + aStructuralFeature.name.toUpperFirst()]
    auto [oldVarName/] = [newVarName/];
    [aStructuralFeature.name/]_ = [newVarName/];
    auto notifications = msgs;
    if ( eNotificationRequired() )
    {
        auto notification = std::make_shared<Notification>(getThisPtr(), Notification::SET, [aStructuralFeature.getQualifiedFeatureIDName()/], [oldVarName/], [newVarName/] );
        if (notifications)
            notifications->add( notification );
        else
            notifications = notification;
    }
    return notifications;
    [/let]
[elseif (hasKey('setterBody'))]
    [valueKey('setterBody')/]
[else]
    std::cout << BOOST_CURRENT_FUNCTION  << std::endl;
    throw "NotImplementedException";    
[/if]
    // [/protected]
}
[/let]
[/let]
[/let]
[/template]

[template public generateSetDeclaration(aStructuralFeature : EStructuralFeature, impl : EBoolean)]
virtual void [aStructuralFeature.getSetterName()/]([aStructuralFeature.generateParameterType()/] ['new' + aStructuralFeature.name.toUpperFirst()/]) [abstractSufix(impl)/];
[/template]

[template public generateSetDefinition(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getImplementationName()]
[let methodName : String = aStructuralFeature.getSetterName()]
[let newVarName : String = 'new' + aStructuralFeature.name.toUpperFirst()]
void [className/]::[methodName/]([aStructuralFeature.generateParameterType()/] [newVarName/])
{
    // [protected (className + '::' + methodName)]
[if not isVolatile()]
    [if isContainer()]
    if ( [newVarName/] != eContainer() || ([newVarName/] && eContainerFeatureID() !=  [aStructuralFeature.getQualifiedFeatureIDName()/])) 
    {
        std::shared_ptr<ENotificationChain> notifications;
        if ( eContainer() )
            notifications = eBasicRemoveFromContainer(notifications);
        if ( [newVarName/] )
            notifications = [newVarName/]->eInverseAdd( getThisPtr() , [aStructuralFeature.getQualifiedFeatureIDName()/], notifications );
        notifications = basic[methodName.toUpperFirst()/]( [newVarName/], notifications );
        if ( notifications )
            notifications->dispatch();
    }
    else if ( eNotificationRequired() )
        eNotify( std::make_shared<Notification>(getThisPtr() , Notification::SET, [aStructuralFeature.getQualifiedFeatureIDName()/], [newVarName/], [newVarName/]));
    [elseif isBidirectional() or isContains()]
    if ( [newVarName/] != [aStructuralFeature.name/]_ )
    {
        std::shared_ptr<ENotificationChain> notifications;
        if ( [aStructuralFeature.name/]_ )
        [if not isBidirectional()]
            notifications = [aStructuralFeature.name/]_->eInverseRemove( getThisPtr(), EOPPOSITE_FEATURE_BASE - [aStructuralFeature.getQualifiedFeatureIDName()/] , notifications );
        if ( [newVarName/] )
            notifications = [newVarName/]->eInverseAdd( getThisPtr(), EOPPOSITE_FEATURE_BASE - [aStructuralFeature.getQualifiedFeatureIDName()/] , notifications );
        [else]
            [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
            notifications = [aStructuralFeature.name/]_->eInverseRemove( getThisPtr(), EOPPOSITE_FEATURE_BASE - [reverseFeature.getQualifiedFeatureIDName()/] , notifications );
        if ( [newVarName/] )
            notifications = [newVarName/]->eInverseAdd( getThisPtr(), EOPPOSITE_FEATURE_BASE - [reverseFeature.getQualifiedFeatureIDName()/] , notifications );
            [/let]
        [/if]
        notifications = basic[methodName.toUpperFirst()/]([newVarName/],notifications);
        if (notifications)
            notifications->dispatch();
    }
        [if isUnSettable()]
        [/if]
    [else]
        [let oldVarName : String = 'old' + aStructuralFeature.name.toUpperFirst()]
    auto [oldVarName/] = [aStructuralFeature.name/]_;
    [aStructuralFeature.name/]_ = [newVarName/];
    if ( eNotificationRequired() )
        eNotify( std::make_shared<Notification>(getThisPtr(), Notification::SET, [aStructuralFeature.getQualifiedFeatureIDName()/], [oldVarName/], [newVarName/]));
        [/let]
    [/if]
[elseif hasKey('setterBody')]
    [valueKey('setterBody')/] 
[else]
    std::cout << BOOST_CURRENT_FUNCTION  << std::endl;
    throw "NotImplementedException";    
[/if]
    // [/protected]
}
[/let]
[/let]
[/let]
[/template]


[template private getListConstructor( anEAttribute : EStructuralFeature ) post(trim())]
[/template]

[template private getListConstructor( anEAttribute : EAttribute ) post(trim())]
BasicEList<[anEAttribute.eGenericType.generateCppType()/],[anEAttribute.unique/]>()
[/template]

[template private getListConstructor( anEReference : EReference ) post(trim())]
[let typeArgument : String = anEReference.eGenericType.generateCppType()]
[let thisPtrGetterName : String = anEReference.eContainingClass.generateGetThisPtrPropertyGetterName()]
[let packageName : String = anEReference.getPackageName(anEReference.eContainingClass)]
[let featureID : String = anEReference.eContainingClass.getFeatureIDName( anEReference )]
[if (anEReference.containment)]
    [if anEReference.eOpposite.oclIsUndefined() ]
        std::make_shared<EObjectEList<[typeArgument/],true,true,false>>([thisPtrGetterName/](), [anEReference.getQualifiedFeatureIDName()/] )
    [else]
        [let reverseFeature :EReference = anEReference.eOpposite ]
        std::make_shared<EObjectEList<[typeArgument/],true,true,true>>( [thisPtrGetterName/](), [anEReference.getQualifiedFeatureIDName()/] , [reverseFeature.getQualifiedFeatureIDName()/])
        [/let]
    [/if]
[else]
    [if anEReference.eOpposite.oclIsUndefined() ]
        std::make_shared<EObjectEList<[typeArgument/],false,false,false>>( [thisPtrGetterName/](), [packageName/]::[featureID/])
    [else]
        [let reverseFeature :EReference = anEReference.eOpposite ]
        std::make_shared<EObjectEList<[typeArgument/],false,true,true>>( [thisPtrGetterName/](), [anEReference.getQualifiedFeatureIDName()/] , [reverseFeature.getQualifiedFeatureIDName()/])
        [/let]
    [/if]
[/if]
[/let]
[/let]
[/let]
[/let]
[/template]

[template public generateSetMock(aStructuralFeature : EStructuralFeature)]
MOCK_METHOD([aStructuralFeature.getSetterName()/],1);
[/template]

[template public generateBasicUnSetDeclaration(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getImplementationName()]
[let methodName : String = 'basic' + aStructuralFeature.getUnSetterName().toUpperFirst()]
[let newVarName : String = 'new' + aStructuralFeature.name.toUpperFirst()]
std::shared_ptr<ecore::ENotificationChain> [className/]::[methodName/]( const std::shared_ptr<ecore::ENotificationChain>& msgs ); 
[/let]
[/let]
[/let]
[/template]


[template public generateBasicUnSetDefinition(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getImplementationName()]
[let methodName : String = 'basic' + aStructuralFeature.getUnSetterName().toUpperFirst()]
[let newVarName : String = 'new' + aStructuralFeature.name.toUpperFirst()]
std::shared_ptr<ecore::ENotificationChain> [className/]::[methodName/]( const std::shared_ptr<ecore::ENotificationChain>& msgs) 
{
    // [protected (className + '::' + methodName)]
[if not isVolatile()]
    if ( eNotificationRequired())
    {
        auto notifications = msgs;
        auto notification = std::make_shared<Notification>(getThisPtr() , Notification::UNSET, [aStructuralFeature.getQualifiedFeatureIDName()/], boost::any(), boost::any());
        if ( notifications )
            notifications->add( notification )
        else
            notifications = notification;
        return notifications;
    }
[else]
    std::cout << BOOST_CURRENT_FUNCTION  << std::endl;
    throw "NotImplementedException";
[/if] 
    // [/protected]
}
[/let]
[/let]
[/let]
[/template]

[template public generateUnSetDeclaration(aStructuralFeature : EStructuralFeature, impl : EBoolean)]
virtual void [aStructuralFeature.getUnSetterName()/]() [abstractSufix(impl)/];
[/template]

[template public generateUnSetDefinition(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getImplementationName()]
[let methodName : String = aStructuralFeature.getUnSetterName()]
void [className/]::[methodName/]()
{
    // [protected (className + '::' + methodName)]
[if not isVolatile()]
    [if isListType()]
    if ([aStructuralFeature.name/]_)
        [aStructuralFeature.name/]_->clear();
    [elseif isBidirectional() or isContains()]
    if ([aStructuralFeature.name/]_)
    {
        std::shared_ptr<ENotificationChain> notifications;
        [if not isBidirectional()]
        notifications = [aStructuralFeature.name/]_->eInverseRemove( getThisPtr(), EOPPOSITE_FEATURE_BASE - [aStructuralFeature.getQualifiedFeatureIDName()/] , notifications );
        [else]
            [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
        notifications = [aStructuralFeature.name/]_->eInverseRemove( getThisPtr(), EOPPOSITE_FEATURE_BASE - [reverseFeature.getQualifiedFeatureIDName()/] , notifications );
            [/let]
        [/if]
        notifications = basic[aStructuralFeature.getUnSetterName().toUpperFirst()/](notifications);
        if ( notifications )
            notifications->dispatch();
    }
    else if ( eNotificationRequired() )
        eNotify( std::make_shared<Notification>(getThisPtr() , Notification::UNSET, [aStructuralFeature.getQualifiedFeatureIDName()/], boost::any(), boost::any()));
    [else]
        if ( eNotificationRequired() )
        eNotify( std::make_shared<Notification>(getThisPtr() , Notification::UNSET, [aStructuralFeature.getQualifiedFeatureIDName()/], boost::any(), boost::any()));
    [/if]
[elseif hasKey('unsetterBody')]
    [valueKey('unsetterBody')/] 
[else]
    std::cout << BOOST_CURRENT_FUNCTION  << std::endl;
    throw "NotImplementedException";    
[/if]
    // [/protected]
}
[/let]
[/let]
[/template]

[template public generateUnSetMock(aStructuralFeature : EStructuralFeature)]
MOCK_METHOD([aStructuralFeature.getUnSetterName()/],0);
[/template]






