[comment encoding = UTF-8 /]
[module generateStructuralFeature('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::utils /]
[import soft::generator::cpp::generateAttribute /]
[import soft::generator::cpp::generateType /]
[import soft::generator::cpp::generateReference /]

[**
 * eGet Function
*/]
[template public generateGetDel(aClass : EClass,impl : Boolean)]
virtual boost::any eGet(int featureID, bool resolve, bool coreType) const [abstractSufix(impl)/];
[/template]

[template public generateIsSetDel(aClass : EClass,impl : Boolean)]
virtual bool internalEIsSet(int featureID) const [abstractSufix(impl)/];
[/template]

[template public generateSetDel(aClass : EClass,impl : Boolean)]
virtual bool eSet(int featureID, const boost::any& newValue) [abstractSufix(impl)/];
[/template]

[template public generateGetImpl(aClass : EClass)]
boost::any [aClass.name.toUpperFirst().concat('Impl')/]::eGet(int featureID, bool resolve, bool coreType) const
{
[if  aClass.eStructuralFeatures->notEmpty()]
    switch(featureID)
    {
    [for (anStructFeature : EStructuralFeature | aClass.eStructuralFeatures->asOrderedSet()->sortedBy(name))]
        case [anStructFeature.getMetaModelPackageNameForEStructuralFeature(aClass)/]::[anStructFeature.eContainingClass.getFeatureIDName(anStructFeature)/]:
            return [anStructFeature.getGetterName()/]();
    [/for]
    }
[/if]
[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
    return ecore::EObjectImpl::eGet(featureID, resolve, coreType);
[elseif (aClass.eSuperTypes->size() = 1)]
    return [getClassWithNamespace(aClass, aClass.eSuperTypes->first())/]Impl::eGet(featureID, resolve, coreType);
[else]
    boost::any result;
    [let eClasses : OrderedSet(EClass) = aClass.eSuperTypes->asOrderedSet()->sortedBy(name)]
    [for (sClass : EClass | eClasses)]
    result = [getClassWithNamespace(aClass,sClass)/]Impl::eGet(featureID, resolve, coreType);
    [if (sClass <> eClasses->last())]
    if (!result->isEmpty())
        return result;
    [/if]
    [/for]
    return result;
    [/let]
[/if]
}
[/template]

[template public generateIsSetImpl(aClass : EClass)]
bool [aClass.name.toUpperFirst().concat('Impl')/]::internalEIsSet(int featureID) const
{
[if  aClass.eStructuralFeatures->notEmpty()]
    switch(featureID)
    {
    [for (anStructFeature : EStructuralFeature | aClass.eStructuralFeatures->asOrderedSet()->sortedBy(name))]
        case [anStructFeature.getMetaModelPackageNameForEStructuralFeature(aClass)/]::[anStructFeature.eContainingClass.getFeatureIDName(anStructFeature)/]:
            return [anStructFeature.generateComparison()/];
    [/for]
    }
[/if]
[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
    return ecore::EObjectImpl::internalEIsSet(featureID);
[elseif (aClass.eSuperTypes->size() = 1)]
    return [getClassWithNamespace(aClass, aClass.eSuperTypes->first())/]Impl::internalEIsSet(featureID);
[else]
    bool result = false;
    [let eClasses : OrderedSet(EClass) = aClass.eSuperTypes->asOrderedSet()->sortedBy(name)]        
    [for (sClass : EClass | eClasses)]
    result = [getClassWithNamespace(aClass,sClass)/]Impl::internalEIsSet(featureID);
    [if (sClass <> eClasses->last())]
    if (result)
        return result;
    [/if]
    [/for]
    return result;
    [/let]
[/if]
}
[/template]

[template public generateSetImpl(aClass : EClass)]
bool [aClass.name.toUpperFirst().concat('Impl')/]::eSet(int featureID, const boost::any& newValue)
{
[if  aClass.eStructuralFeatures->select(upperBound = 1 and changeable)->notEmpty()]
    switch(featureID)
    {
[for (anStructFeature : EStructuralFeature | aClass.eStructuralFeatures->select(upperBound = 1 and changeable)->asOrderedSet()->sortedBy(name))]
        case [anStructFeature.getMetaModelPackageNameForEStructuralFeature(aClass)/]::[anStructFeature.eContainingClass.getFeatureIDName(anStructFeature)/]:
        {
            [anStructFeature.eGenericType.generateCppType()/] _[anStructFeature.name/] = boost::any_cast<[anStructFeature.eGenericType.generateCppType()/]>(newValue);
            [anStructFeature.getSetterName()/](_[anStructFeature.name/]);
            return true;
        }
[/for]
    }
[/if]
[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
    return ecore::EObjectImpl::eSet(featureID, newValue);
[elseif (aClass.eSuperTypes->size() = 1)]
    return [getClassWithNamespace(aClass, aClass.eSuperTypes->first())/]Impl::eSet(featureID, newValue);
[else]
    bool result = false;
    [let eClasses : OrderedSet(EClass) = aClass.eSuperTypes->asOrderedSet()->sortedBy(name)]
    [for (sClass : EClass | eClasses)]
    result = [getClassWithNamespace(aClass,sClass)/]Impl::eSet(featureID, newValue);
    [if (sClass <> eClasses->last())]
    if (result)
        return result;
    [/if]
    [/for]
    return result;
    [/let]
[/if]
}
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (oclIsKindOf(EAttribute) and not eType.requiresAny()) post (trim())]
[if (anStructFeature.upperBound <> 1)]
![anStructFeature.getGetterName()/]()->empty()
[elseif (eType.oclIsKindOf(EEnum))]
[anStructFeature.name/]_ ![anStructFeature.oclAsType(EAttribute).generateDefaultValue()/];
[else]
[anStructFeature.getGetterName()/]() != [anStructFeature.oclAsType(EAttribute).getDefaultValue()/]
[/if]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (not oclIsKindOf(EAttribute) and not eType.requiresAny())]
[anStructFeature.getGetterName()/]() != [anStructFeature.eType.getDefaultValue()/]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (eType.requiresAny())]
![anStructFeature.getGetterName()/]().empty()
[/template]

[template public generateStaticFeatureID(anStructFeature : EStructuralFeature,anEClass : EClass )]
/**
 * The feature id for the [anEClass.name/] '[anStructFeature.name.toUpperFirst()/]' [anStructFeature.getFeatureKind()/].
 */
static const int [anEClass.getFeatureIDName(anStructFeature)/] = [anEClass.getFeatureValue(anStructFeature)/];

[/template]

[template public generateStaticFeatureCountID(anEClass : EClass )]
/**
 * The number of structural features of the class [anEClass.name/].
 */
static const int [anEClass.getFeatureCountID()/] = [anEClass.getFeatureCountValue()/];

[/template]
