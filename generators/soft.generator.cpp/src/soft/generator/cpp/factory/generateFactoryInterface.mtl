[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateFactoryInterface('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateClass /]
[import soft::generator::cpp::generateSingleton /]
[import soft::generator::cpp::utils /]
 
[template public generateFactoryInterface(anEPackage : EPackage) {packageName : String = anEPackage.name.toUpperFirst().concat('Factory');}]
[file ('src-gen/'.concat(anEPackage.name).concat('/').concat(packageName).concat('.hpp'), false, 'UTF-8')]
[startGuard(anEPackage,'Factory')/]

#include <map>
#include <memory>

#include "ecore/EFactory.hpp"

[comment  Generate Includes for the Factory/]
namespace [anEPackage.name/] 
{[for (elements : EClassifier| OrderedSet{anEPackage.eClassifiers}->flatten()->selectByKind(EClass)->asOrderedSet()->sortedBy(name)) separator ('\n')]
	class [elements.name/];[/for]

	class [anEPackage.name.toUpperFirst().concat('Package')/];
}

[comment namespace /]
namespace [anEPackage.name/] 
{
	class [packageName/] : virtual public [needNamespace(anEPackage, 'EFactory')/] 
	{
		private:    
			[packageName/]([packageName/] const&) = delete;
			[packageName/]& operator=([packageName/] const&) = delete;
		protected:
			[packageName/](){}
		
			//Singleton Instance and Getter
			[generateSingletonDecl(packageName)/]
		
			[anEPackage.eAllContents(EClass)->sortedBy(name).generateClassCreate(false)/]

			//Package
			virtual std::shared_ptr<[anEPackage.name.toUpperFirst().concat('Package')/]> get[anEPackage.name.toUpperFirst().concat('Package')/]() const = 0;
	};
}
[endGuard(anEPackage,'Factory')/]
[/file]
[/template]