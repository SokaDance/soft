[comment encoding = UTF-8 /]
[module generateBuildFile('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::cpp::generateCommon/]
[import soft::generator::cpp::tests::generateCommon/]

[template public generateTestsBuildFile(aPackage : EPackage) { packageName : String = aPackage.name ; testName : String = packageName.concat('.tests'); }]
[file (getOutputDirectory().concat('/CMakeLists.txt'), false, 'UTF-8')]
#############################################################################
#                                                                           #
#             CMakeList created by soft.generator.cpp Generator             # 
#                                                                           #
#############################################################################

# C++ project for model [packageName/].ecore, generated by soft.generator.cpp

CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

project([testName/] CXX)

include( CMakeFiles.txt OPTIONAL)

if(NOT CMAKE_BUILD_TYPE) 
    set(CMAKE_BUILD_TYPE Debug)
endif()
set(CMAKE_DEBUG_POSTFIX d)

set(CMAKE_CXX_STANDARD 17)

set(Boost_USE_STATIC_LIBS ON)
find_package(Boost 1.68.0 REQUIRED COMPONENTS unit_test_framework)
find_package(Turtle 2.3.0)

set(GENERATED_SOURCE_FILES
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    src-gen/[packageName/]/[aClass.getMockName()/].hpp
[/for] 
)

set(CMAKE_FILES
    CMakeLists.txt
)
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/CMakeFiles.txt")
   list(APPEND CMAKE_FILES "CMakeFiles.txt")
endif()

add_executable(${PROJECT_NAME} ${CMAKE_FILES} ${SOURCE_FILES} ${SOURCE_[packageName.toUpper()/]_FILES} ${GENERATED_SOURCE_FILES})
target_include_directories(${PROJECT_NAME} PUBLIC src)
target_include_directories(${PROJECT_NAME} PUBLIC src-gen)
target_include_directories(${PROJECT_NAME} PUBLIC ${Boost_INCLUDE_DIRS})
target_include_directories(${PROJECT_NAME} PUBLIC ${Turtle_INCLUDE_DIRS})
target_compile_options(${PROJECT_NAME} PRIVATE /wd4250 /bigobj)
target_link_libraries(${PROJECT_NAME} [packageName/])
target_link_libraries(${PROJECT_NAME} ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})

source_group(cmake FILES ${CMAKE_FILES})
source_group(src FILES ${SOURCE_FILES})
source_group(src\\[packageName/] FILES ${SOURCE_[packageName.toUpper()/]_FILES})
source_group(src-gen\\[packageName/] FILES ${GENERATED_SOURCE_FILES})

[/file]
[/template]


