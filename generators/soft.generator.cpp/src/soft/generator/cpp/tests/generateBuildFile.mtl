[comment encoding = UTF-8 /]
[module generateBuildFile('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::cpp::generateCommon/]
[import soft::generator::cpp::generateBuildFile/]
[import soft::generator::cpp::tests::generateCommon/]

[template public generateTestsBuildFile(aPackage : EPackage) { packageName : String = aPackage.name ; testName : String = packageName.concat('.tests'); }]
[file (getOutputDirectory().concat('/CMakeLists.txt'), false, 'UTF-8')]
#############################################################################
#                                                                           #
#             CMakeList created by soft.generator.cpp Generator             # 
#                                                                           #
#############################################################################

# C++ project for model [packageName/].ecore, generated by soft.generator.cpp

CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

project([testName/] CXX)

include( CMakeFiles.txt OPTIONAL)

if(NOT CMAKE_BUILD_TYPE) 
    set(CMAKE_BUILD_TYPE Debug)
endif()
set(CMAKE_DEBUG_POSTFIX d)

set(CMAKE_CXX_STANDARD 17)

set(Boost_USE_STATIC_LIBS ON)
find_package(Boost 1.68.0 REQUIRED COMPONENTS unit_test_framework timer date_time)
find_package(Turtle 2.3.0)

[let namespaceVar : String = getVarName( aPackage.getTestsNamespaceName() )]
set(GENERATED_HEADER_[namespaceVar/]_FILES
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    src-gen/[namespaceToFolder(aClass.getQualifiedMockName())/].hpp
[/for] 
)
[/let]

set(CMAKE_FILES
    CMakeLists.txt
)
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/CMakeFiles.txt")
   list(APPEND CMAKE_FILES "CMakeFiles.txt")
endif()

[let namespaces : OrderedSet(String) = getAllNamespaces( aPackage.getTestsNamespaceName())->asOrderedSet()->sortedBy( s|s)]
add_executable(${PROJECT_NAME} ${CMAKE_FILES} 
[for (variable : String | namespaces->getAllVariables())]
                               [variable/]
[/for]
)
target_include_directories(${PROJECT_NAME} PUBLIC src)
target_include_directories(${PROJECT_NAME} PUBLIC src-gen)
target_include_directories(${PROJECT_NAME} PUBLIC ${Boost_INCLUDE_DIRS})
target_include_directories(${PROJECT_NAME} PUBLIC ${Turtle_INCLUDE_DIRS})
target_compile_options(${PROJECT_NAME} PRIVATE /wd4250 /bigobj)
target_link_libraries(${PROJECT_NAME} [packageName/])
target_link_libraries(${PROJECT_NAME} ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY} ${Boost_TIMER_LIBRARY})

[generateSourceGroup(namespaces)/]
[/let]

set( TEST_SUITES_REGEXP "BOOST_AUTO_TEST_SUITE\\( *(['['/]A-Za-z_0-9[']'/]+) *\\)(.*)BOOST_AUTO_TEST_SUITE_END\\( *\\)")
set( TEST_CASES_REGEXP "BOOST_(AUTO|FIXTURE)_TEST_CASE\\( *(['['/]A-Za-z_0-9[']'/]+) *(, *['['/]A-Za-z_0-9[']'/]+ *)*\\)")
foreach( SOURCE_FILE ${SOURCE_FILES})
    # retrieve all test suites ( declaration + content block)
    if ( NOT "${SOURCE_FILE}" STREQUAL "" ) 
        get_filename_component(SOURCE_FULL_PATH "${SOURCE_FILE}" ABSOLUTE )
          if ( EXISTS "${SOURCE_FULL_PATH}" )
            file(READ "${SOURCE_FILE}" SOURCE_FILE_CONTENTS)
            if ( NOT "${SOURCE_FILE_CONTENTS}" STREQUAL "" )
                string(REGEX MATCHALL ${TEST_SUITES_REGEXP} TEST_SUITES ${SOURCE_FILE_CONTENTS})
                foreach( TEST_SUITE ${TEST_SUITES} )
                    # extract test suite name
                    string(REGEX REPLACE ${TEST_SUITES_REGEXP} "\\1" TEST_SUITE_NAME ${TEST_SUITE})
                    # extract test suite block
                    string(REGEX REPLACE ${TEST_SUITES_REGEXP} "\\2" TEST_SUITE_CONTENT ${TEST_SUITE})
                    # retrieve all test cases in the test suite
                    string(REGEX MATCHALL ${TEST_CASES_REGEXP} FOUND_TESTS ${TEST_SUITE_CONTENT})
                    foreach(HIT ${FOUND_TESTS})
                        #extract test case name
                        string(REGEX REPLACE ${TEST_CASES_REGEXP} "\\2" TEST_NAME ${HIT})
                        add_test(NAME "${PROJECT_NAME}.${TEST_SUITE_NAME}.${TEST_NAME}" 
                                 WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} 
                                 COMMAND ${PROJECT_NAME} --run_test=${TEST_SUITE_NAME}/${TEST_NAME} --catch_system_error=yes )
                    endforeach()
                endforeach()
            endif()
        endif()
    endif()
endforeach()

[/file]
[/template]


