[comment encoding = UTF-8 /]
[module generateAttribute('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::generateCommon/]

[query public getDefaultValue(anEAttribute : EAttribute) : String = if (defaultValueLiteral->notEmpty()) then defaultValueLiteral else eType.getDefaultValue() endif/]

[template public generateDefaultValue(anEAttribute : EAttribute) post (trim())]
[if (anEAttribute.eType.oclIsTypeOf(EEnum))]
    [if (anEAttribute.defaultValueLiteral->notEmpty())]
        = [anEAttribute.eType.name/]::[anEAttribute.defaultValueLiteral.toUpperCase()/]
    [else]
        = [anEAttribute.eType.name/]::[anEAttribute.eType.oclAsType(EEnum).eLiterals->first().name.toUpperCase()/] 
    [/if]
[else]
    = [anEAttribute.getDefaultValue()/]
[/if]
[/template]

[template public generateAttributeCreation(anEAttribute : EAttribute)]
[anEAttribute.getElementInstanceName()/] = factory->createEAttribute([anEAttribute.eContainingClass.getElementInstanceName()/], [anEAttribute.eContainingClass.getFeatureIDName(anEAttribute)/]);

[/template]

[template public generateAttributeInitialization(anEAttribute : EAttribute)]
[anEAttribute.getElementInstanceName()/] = [anEAttribute.getPackageGetter()/];
[anEAttribute.getElementInstanceName()/]->setName("[anEAttribute.name/]");
[anEAttribute.getElementInstanceName()/]->setEType([anEAttribute.eType.oclAsType(EDataType).packageGetter(anEAttribute)/]);
[anEAttribute.getElementInstanceName()/]->setLowerBound([anEAttribute.lowerBound/]);
[anEAttribute.getElementInstanceName()/]->setUpperBound([anEAttribute.upperBound/]);
[anEAttribute.getElementInstanceName()/]->setTransient([anEAttribute.transient.toString()/]);
[anEAttribute.getElementInstanceName()/]->setVolatile([anEAttribute.volatile.toString()/]);
[anEAttribute.getElementInstanceName()/]->setChangeable([anEAttribute.changeable.toString()/]);
[anEAttribute.getElementInstanceName()/]->setUnsettable([anEAttribute.unsettable.toString()/]);
[anEAttribute.getElementInstanceName()/]->setUnique([anEAttribute.unique.toString()/]);
[anEAttribute.getElementInstanceName()/]->setDerived([anEAttribute.derived.toString()/]);
[anEAttribute.getElementInstanceName()/]->setOrdered([anEAttribute.ordered.toString()/]);
[anEAttribute.getElementInstanceName()/]->setID([anEAttribute.iD.toString()/]);
{
	std::string defaultValue = "[anEAttribute.defaultValueLiteral/]";
	if (!defaultValue.empty())
	   [anEAttribute.getElementInstanceName()/]->setDefaultValueLiteral(defaultValue);
}

[/template]

