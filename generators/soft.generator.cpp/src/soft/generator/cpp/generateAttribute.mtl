[comment encoding = UTF-8 /]
[module generateAttribute('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::generateCommon/]

[template public generateAttributeDeclaration(anEAttribute : EAttribute, impl : Boolean)]
[anEAttribute.generateAttributeGetterDeclaration(impl)/]
[anEAttribute.generateAttributeSetterDeclaration(impl)/]

[/template]

[template public generateAttributeMock(anEAttribute : EAttribute)]
[anEAttribute.generateAttributeGetterMock()/]
[anEAttribute.generateAttributeSetterMock()/]
[/template]


[template private generateReturnType(anEAttribute : EAttribute)]
[if (anEAttribute.eType.oclIsKindOf(EDataType))]
[if ( needReference(anEAttribute.eType) )]const [anEAttribute.generateAttributeType()/]&[else][anEAttribute.generateAttributeType()/][/if][else]
std::shared_ptr<[anEAttribute.generateAttributeType()/]>[/if]
[/template]

[template public generateAttributeGetterDeclaration(anEAttribute : EAttribute, impl : Boolean) ? (hasGetter('public',impl))]
virtual [anEAttribute.generateReturnType()/] [anEAttribute.getGetterName()/]() const [abstractSufix(impl)/];

[/template]

[template public generateAttributeGetterMock(anEAttribute : EAttribute) ? (hasGetter('public',false))]
MOCK_METHOD([anEAttribute.getGetterName()/],0);
[/template]

[template public generateAttributeSetterDeclaration(anEAttribute : EAttribute, impl : Boolean) ? ((hasSetter('public',impl)) )]
virtual void [anEAttribute.getSetterName()/]([anEAttribute.generateParameterType()/] [anEAttribute.getSafeVariableName()/]) [abstractSufix(impl)/]; 

[/template]

[template public generateAttributeSetterMock(anEAttribute : EAttribute) ? (hasSetter('public',false))]
MOCK_METHOD([anEAttribute.getSetterName()/],1);
[/template]

[template public generateAttributeUnSetterDeclaration(anEAttribute : EAttribute, impl : Boolean) ? (hasUnSetter('public',impl))]
virtual void [anEAttribute.getUnSetterName()/]() [abstractSufix(impl)/]; 

[/template]

[template public generateAttributeUnSetterMock(anEAttribute : EAttribute) ? (hasUnSetter('public',false))]
MOCK_METHOD([anEAttribute.getUnSetterName()/],0);
[/template]

[template public generateAttributeProtected(anEAttribute : EAttribute)]
[if (not(anEAttribute.upperBound = 1))]
[anEAttribute.generateAttributeType()/] [anEAttribute.name/]_; [else]
[anEAttribute.generateAttributeType()/] [anEAttribute.name/]_ [generateDefaultValue()/];
[/if]
[/template]

[query public getDefaultValue(anEAttribute : EAttribute) : String = if (defaultValueLiteral->notEmpty()) then defaultValueLiteral else eType.getDefaultValue() endif/]

[template public generateDefaultValue(anEAttribute : EAttribute) post (trim())]
[if (anEAttribute.eType.oclIsTypeOf(EEnum))]
    [if (anEAttribute.defaultValueLiteral->notEmpty())]
        = [anEAttribute.eType.name/]::[anEAttribute.defaultValueLiteral.toUpperCase()/]
    [else]
        = [anEAttribute.eType.name/]::[anEAttribute.eType.oclAsType(EEnum).eLiterals->first().name.toUpperCase()/] 
    [/if]
[else]
    = [anEAttribute.getDefaultValue()/]
[/if]
[/template]

[***
 * Section for the Attribute cpp implementation
*/]
[template public generateAttributeGetterImplementationCpp(anEAttribute : EAttribute)? (hasGetter('public',true) and anEAttribute.upperBound <> 1)]
[let className : String = anEAttribute.eContainingClass.getImplementationName()]
[anEAttribute.generateReturnType()/] [className/]::[anEAttribute.getGetterName()/]() const 
{
    // [protected (className + '::' + anEAttribute.getGetterName()) ]
[if (hasKey('getterBody'))]
    [valueKey('getterBody')/]
[else]
    if ( ![anEAttribute.name/]_ )
         const_cast<[className/]*>(this)->[anEAttribute.name/]_.reset(new BasicEList<[anEAttribute.eGenericType.generateCppType()/]>());
    return [anEAttribute.name/]_;
[/if]
    // [/protected]
}
[/let]
[/template]

[template public generateAttributeGetterImplementationCpp(anEAttribute : EAttribute)? (hasGetter('public',true))]
[let className : String = anEAttribute.eContainingClass.getImplementationName()]
[anEAttribute.generateReturnType()/] [className/]::[anEAttribute.getGetterName()/]() const 
{
    // [protected (className + '::' + anEAttribute.getGetterName())]
[if (hasKey('getterBody'))]
    [valueKey('getterBody')/]
[else]
    return [anEAttribute.name/]_;
[/if]
    // [/protected]
}
[/let]
[/template]


[template public generateAttributeSetterImplementationCpp(anEAttribute : EAttribute, impl : Boolean) ? ( hasSetter('public',impl)) ]
[let className : String = anEAttribute.eContainingClass.getImplementationName()]
void [className/]::[anEAttribute.getSetterName()/]([anEAttribute.generateParameterType()/] [anEAttribute.getSafeVariableName()/])
{
    // [protected (className + '::' + anEAttribute.getSetterName())]
[if (hasKey('setterBody'))]
    [valueKey('setterBody')/] 
[else]
    [anEAttribute.name/]_ = [anEAttribute.getSafeVariableName()/];
[/if]
    // [/protected]
}
[/let]
[/template]

[template public generateAttributeUnSetterImplementationCpp(anEAttribute : EAttribute)? (hasUnSetter('public',true))]
[let className : String = anEAttribute.eContainingClass.getImplementationName()]
void [className/]::[anEAttribute.getUnSetterName()/]()
{
    [anEAttribute.name/]_ [generateDefaultValue()/];
}
[/let] 
[/template]


[template public generateAttributeCreation(anEAttribute : EAttribute)]
[anEAttribute.getElementInstanceName()/] = factory->createEAttribute([anEAttribute.eContainingClass.getElementInstanceName()/], [anEAttribute.eContainingClass.getFeatureIDName(anEAttribute)/]);

[/template]

[template public generateAttributeInitialization(anEAttribute : EAttribute)]
[anEAttribute.getElementInstanceName()/] = [anEAttribute.getPackageGetter()/];
[anEAttribute.getElementInstanceName()/]->setName("[anEAttribute.name/]");
[anEAttribute.getElementInstanceName()/]->setEType([anEAttribute.eType.oclAsType(EDataType).packageGetter(anEAttribute)/]);
[anEAttribute.getElementInstanceName()/]->setLowerBound([anEAttribute.lowerBound/]);
[anEAttribute.getElementInstanceName()/]->setUpperBound([anEAttribute.upperBound/]);
[anEAttribute.getElementInstanceName()/]->setTransient([anEAttribute.transient.toString()/]);
[anEAttribute.getElementInstanceName()/]->setVolatile([anEAttribute.volatile.toString()/]);
[anEAttribute.getElementInstanceName()/]->setChangeable([anEAttribute.changeable.toString()/]);
[anEAttribute.getElementInstanceName()/]->setUnsettable([anEAttribute.unsettable.toString()/]);
[anEAttribute.getElementInstanceName()/]->setUnique([anEAttribute.unique.toString()/]);
[anEAttribute.getElementInstanceName()/]->setDerived([anEAttribute.derived.toString()/]);
[anEAttribute.getElementInstanceName()/]->setOrdered([anEAttribute.ordered.toString()/]);
[anEAttribute.getElementInstanceName()/]->setID([anEAttribute.iD.toString()/]);
{
	std::string defaultValue = "[anEAttribute.defaultValueLiteral/]";
	if (!defaultValue.empty())
	   [anEAttribute.getElementInstanceName()/]->setDefaultValueLiteral(defaultValue);
}

[/template]

