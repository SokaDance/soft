[comment encoding = UTF-8 /]
[module generateAttribute('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::utils/]

[query public hasSetter(anEAttribute : EAttribute) : Boolean = anEAttribute.changeable and (anEAttribute.upperBound = 1)/]
[query public hasGetter(anEAttribute : EAttribute) : EBoolean = not hasKey('getterBody') /]

[template public generateAttributeDeclaration(anEAttribute : EAttribute, impl : Boolean)]
[anEAttribute.generateAttributeGetterDeclaration(impl)/]
[anEAttribute.generateAttributeSetterDeclaration(impl)/]
[/template]

[template public generateAttributeGetterDeclaration(anEAttribute : EAttribute, impl : Boolean) ? (hasGetter())]
virtual [if (anEAttribute.eType.oclIsKindOf(EDataType))]
[if ( needReference(anEAttribute.eType) )]const [anEAttribute.generateAttributeType()/]&[else]
[anEAttribute.generateAttributeType()/][/if]
[else]
std::shared_ptr<[anEAttribute.generateAttributeType()/]>[/if]
 [anEAttribute.getGetterName()/]() const [abstractSufix(impl)/];

[/template]

[template public generateAttributeSetterDeclaration(anEAttribute : EAttribute, impl : Boolean) ? ((hasSetter() or(impl and hasImplSetterOnly())) )]
virtual void [anEAttribute.getSetterName()/] ([anEAttribute.generateParameterType()/] [anEAttribute.name/])[abstractSufix(impl)/]; 


[/template]

[template public generateAttributeProtected(anEAttribute : EAttribute)]
[if (not(anEAttribute.upperBound = 1))]
[anEAttribute.generateAttributeType()/] [anEAttribute.name/]_; [else]
[anEAttribute.generateAttributeType()/] [anEAttribute.name/]_ [generateDefaultValue()/];
[/if]
[/template]

[query public getDefaultValue(anEAttribute : EAttribute) : String = if (defaultValueLiteral->notEmpty()) then defaultValueLiteral else eType.getDefaultValue() endif/]

[template public generateDefaultValue(anEAttribute : EAttribute) post (trim())]
[if (anEAttribute.eType.oclIsTypeOf(EEnum))]
    [if (anEAttribute.defaultValueLiteral->notEmpty())]
        = [anEAttribute.eType.name/]::[anEAttribute.defaultValueLiteral.toUpperCase()/]
    [else]
        = [anEAttribute.eType.name/]::[anEAttribute.eType.oclAsType(EEnum).eLiterals->first().name.toUpperCase()/] 
    [/if]
[else]
    = [anEAttribute.getDefaultValue()/]
[/if]
[/template]

[template public generateAttributeInit(anEAttribute : EAttribute) ? (not(anEAttribute.upperBound = 1))]
[anEAttribute.name/]_.reset(new BasicEList<[anEAttribute.eGenericType.generateCppType()/]>());
[/template]

[***
 * Section for the Attribute cpp implementation
*/]
[template public generateAttributeGetterImplementationCpp(anEAttribute : EAttribute)? (hasGetter())]
[anEAttribute.generateAttributeType()/] [anEAttribute.eContainingClass.name.toUpperFirst()/]Impl::[anEAttribute.getGetterName()/]() const 
{
    return [anEAttribute.name/]_;
}
[/template]

[template public generateAttributeSetterImplementationCpp(anEAttribute : EAttribute, impl : Boolean) ? (( hasSetter() or(impl and hasImplSetterOnly())) )]
void [anEAttribute.eContainingClass.name.toUpperFirst()/]Impl::[anEAttribute.getSetterName()/]([anEAttribute.generateAttributeType()/] _[anEAttribute.name/])
{
    [anEAttribute.name/]_ = _[anEAttribute.name/];
} 
[/template]

[template public generateStaticAttributeID(anEAttribute : EAttribute)]
static const int [anEAttribute.getStaticAttributeIDName()/] = [anEAttribute.eContainingClass.getMyClassifierID() * 100 + anEAttribute.getFeatureID()/];

[/template]

[template public generateAttributeCreation(anEAttribute : EAttribute)]
[anEAttribute.getClassMemberName()/] = factory->createEAttribute([anEAttribute.eContainingClass.getClassMemberName()/], [anEAttribute.getStaticAttributeIDName()/]);

[/template]

[template public generateAttributeInitialization(anEAttribute : EAttribute)]
[anEAttribute.getClassMemberName()/] = [anEAttribute.getPackageGetter()/];
[anEAttribute.getClassMemberName()/]->setName("[anEAttribute.name/]");
[anEAttribute.getClassMemberName()/]->setEType([anEAttribute.eType.oclAsType(EDataType).packageGetter(anEAttribute)/]);
[anEAttribute.getClassMemberName()/]->setLowerBound([anEAttribute.lowerBound/]);
[anEAttribute.getClassMemberName()/]->setUpperBound([anEAttribute.upperBound/]);
[anEAttribute.getClassMemberName()/]->setTransient([anEAttribute.transient.toString()/]);
[anEAttribute.getClassMemberName()/]->setVolatile([anEAttribute.volatile.toString()/]);
[anEAttribute.getClassMemberName()/]->setChangeable([anEAttribute.changeable.toString()/]);
[anEAttribute.getClassMemberName()/]->setUnsettable([anEAttribute.unsettable.toString()/]);
[anEAttribute.getClassMemberName()/]->setUnique([anEAttribute.unique.toString()/]);
[anEAttribute.getClassMemberName()/]->setDerived([anEAttribute.derived.toString()/]);
[anEAttribute.getClassMemberName()/]->setOrdered([anEAttribute.ordered.toString()/]);
[anEAttribute.getClassMemberName()/]->setID([anEAttribute.iD.toString()/]);
{
	std::string defaultValue = "[anEAttribute.defaultValueLiteral/]";
	if (!defaultValue.empty())
	{
	   [anEAttribute.getClassMemberName()/]->setDefaultValueLiteral(defaultValue);
	}
}

[/template]

