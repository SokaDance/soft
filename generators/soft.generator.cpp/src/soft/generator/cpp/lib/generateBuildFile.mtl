[comment encoding = UTF-8 /]
[module generateBuildFile('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::cpp::generateCommon/]

[template public generateLibraryBuildFile(aPackage : EPackage) { packageName : String = aPackage.name; }]
[comment    generate CMakeLists.txt for model libary/]
[file ('CMakeLists.txt', false, 'UTF-8')]
#############################################################################
#                                                                           #
#             CMakeList created by soft.generator.cpp Generator             # 
#                                                                           #
#############################################################################

# C++ project of model [packageName/].ecore, generated by soft.generator.cpp

CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

project([packageName/] CXX)

include( CMakeFiles.txt OPTIONAL)

if(NOT CMAKE_BUILD_TYPE) 
    set(CMAKE_BUILD_TYPE Debug)
endif()
set(CMAKE_DEBUG_POSTFIX d)

set(CMAKE_CXX_STANDARD 14)

# Boost
set(Boost_USE_STATIC_LIBS ON)
find_package(Boost 1.68.0 REQUIRED[if hasTests()] COMPONENTS unit_test_framework[/if])
[if hasTests()]

# Turtle
find_package(Turtle 2.3.0)
[/if]

# Generated sources
set(GENERATED_SOURCE_FILES
    src-gen/[packageName/]/[packageName.toUpperFirst()/]Factory.cpp	
    src-gen/[packageName/]/[packageName.toUpperFirst()/]Package.cpp
)
set(GENERATED_SOURCE_IMPLEMENTATION_FILES
    src-gen/[packageName/]/impl/[packageName.toUpperFirst()/]FactoryImpl.cpp
	src-gen/[packageName/]/impl/[packageName.toUpperFirst()/]PackageImpl.cpp
	src-gen/[packageName/]/impl/[packageName.toUpperFirst()/]PackageImpl_Creation.cpp
	src-gen/[packageName/]/impl/[packageName.toUpperFirst()/]PackageImpl_Initialization.cpp
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    src-gen/[packageName/]/impl/[aClass.name.toUpperFirst()/]Impl.cpp
[/for] 
)
set(GENERATED_HEADER_INTERFACE_FILES
    src-gen/[packageName/]/[packageName.toUpperFirst()/]Factory.hpp
	src-gen/[packageName/]/[packageName.toUpperFirst()/]Package.hpp 
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    src-gen/[packageName/]/[aClass.name.toUpperFirst()/].hpp
[/for]
)
set(GENERATED_HEADER_IMPLEMENTATION_FILES
    src-gen/[packageName/]/impl/[packageName.toUpperFirst()/]FactoryImpl.hpp
	src-gen/[packageName/]/impl/[packageName.toUpperFirst()/]PackageImpl.hpp
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    src-gen/[packageName/]/impl/[aClass.name.toUpperFirst()/]Impl.hpp
[/for] 
)

add_library(${PROJECT_NAME} STATIC  ${HEADER_FILES} ${SOURCE_FILES} ${GENERATED_HEADER_INTERFACE_FILES} ${GENERATED_HEADER_IMPLEMENTATION_FILES} ${GENERATED_SOURCE_FILES} ${GENERATED_SOURCE_IMPLEMENTATION_FILES})
target_include_directories(${PROJECT_NAME} PUBLIC src)
target_include_directories(${PROJECT_NAME} PUBLIC src-gen)
target_include_directories(${PROJECT_NAME} PUBLIC ${Boost_INCLUDE_DIRS})
target_compile_options(${PROJECT_NAME} PRIVATE /wd4250) 
target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})
set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "")

# Visual studio specific project layout
source_group(src FILES ${SOURCE_FILES} ${HEADER_FILES})
source_group(src-gen FILES ${GENERATED_HEADER_INTERFACE_FILES} ${GENERATED_SOURCE_FILES})
source_group(src-gen\\impl FILES ${GENERATED_HEADER_IMPLEMENTATION_FILES} ${GENERATED_SOURCE_IMPLEMENTATION_FILES})

[if hasTests()]
set(PROJECT_TESTS_NAME "${PROJECT_NAME}.tests")
add_executable( ${PROJECT_TESTS_NAME} ${TESTS_FILES})
target_include_directories(${PROJECT_TESTS_NAME} PUBLIC src)
target_include_directories(${PROJECT_TESTS_NAME} PUBLIC src-gen)
target_include_directories( ${PROJECT_TESTS_NAME} PUBLIC ${Boost_INCLUDE_DIRS})
target_include_directories( ${PROJECT_TESTS_NAME} PUBLIC ${Turtle_INCLUDE_DIRS})
target_link_libraries(${PROJECT_TESTS_NAME} ${PROJECT_NAME})
target_link_libraries(${PROJECT_TESTS_NAME} ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})

source_group(src FILES ${TESTS_FILES})
[/if]

#-----------------------------------------------------
# DELIVERING binaries and header to delivery
#-----------------------------------------------------

[/file]
[/template]

