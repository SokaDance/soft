[comment encoding = UTF-8 /]
[module generateBuildFile('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::cpp::generateCommon/]
[import soft::generator::cpp::lib::generateCommon/]

[template public generateLibraryBuildFile(aPackage : EPackage) { packageName : String = aPackage.name; }]
[file (getOutputDirectory().concat('/CMakeLists.txt'), false, 'UTF-8')]
#############################################################################
#                                                                           #
#             CMakeList created by soft.generator.cpp Generator             # 
#                                                                           #
#############################################################################

# C++ project for model [packageName/].ecore, generated by soft.generator.cpp

CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

project([packageName/] CXX)

include( CMakeFiles.txt OPTIONAL)

if(NOT CMAKE_BUILD_TYPE) 
    set(CMAKE_BUILD_TYPE Debug)
endif()
set(CMAKE_DEBUG_POSTFIX d)

set(CMAKE_CXX_STANDARD 17)

# Boost
set(Boost_USE_STATIC_LIBS ON)
find_package(Boost 1.68.0 REQUIRED)

# Generated sources
set(GENERATED_HEADER_INTERFACE_FILES
    src-gen/[namespaceToFolder(aPackage.getFactoryQualifiedInterfaceName())/].hpp
    src-gen/[namespaceToFolder(aPackage.getQualifiedInterfaceName())/].hpp
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    src-gen/[namespaceToFolder(aClass.getQualifiedInterfaceName())/].hpp
[/for]
)
set(GENERATED_SOURCE_INTERFACE_FILES
    src-gen/[namespaceToFolder(aPackage.getFactoryQualifiedInterfaceName())/].cpp
    src-gen/[namespaceToFolder(aPackage.getQualifiedInterfaceName())/].cpp
)
set(GENERATED_HEADER_IMPLEMENTATION_FILES
    src-gen/[namespaceToFolder(aPackage.getFactoryQualifiedImplementationName())/].hpp
    src-gen/[namespaceToFolder(aPackage.getQualifiedImplementationName())/].hpp
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    src-gen/[namespaceToFolder(aClass.getQualifiedImplementationName())/].hpp
[/for] 
)
set(GENERATED_SOURCE_IMPLEMENTATION_FILES
    src-gen/[namespaceToFolder(aPackage.getFactoryQualifiedImplementationName())/].cpp
[let packageImpl : String = namespaceToFolder(aPackage.getQualifiedImplementationName())]
	src-gen/[packageImpl/].cpp
	src-gen/[packageImpl/]_Creation.cpp
	src-gen/[packageImpl/]_Initialization.cpp
[/let]
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    src-gen/[namespaceToFolder(aClass.getQualifiedImplementationName())/].cpp
[/for] 
)


set(CMAKE_FILES
    CMakeLists.txt
)
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/CMakeFiles.txt")
   list(APPEND CMAKE_FILES "CMakeFiles.txt")
endif()

add_library(${PROJECT_NAME} STATIC  ${CMAKE_FILES} 
                                    ${HEADER_FILES} 
                                    ${SOURCE_FILES} 
                                    ${HEADER_IMPLEMENTATION_FILES} 
                                    ${SOURCE_IMPLEMENTATION_FILES} 
                                    ${GENERATED_HEADER_INTERFACE_FILES} 
                                    ${GENERATED_HEADER_IMPLEMENTATION_FILES} 
                                    ${GENERATED_SOURCE_INTERFACE_FILES} 
                                    ${GENERATED_SOURCE_IMPLEMENTATION_FILES})
target_include_directories(${PROJECT_NAME} PUBLIC src)
target_include_directories(${PROJECT_NAME} PUBLIC src-gen)
target_include_directories(${PROJECT_NAME} PUBLIC ${Boost_INCLUDE_DIRS})
target_compile_options(${PROJECT_NAME} PRIVATE /wd4250) 
target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})
set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "")

# Visual studio specific project layout
source_group(cmake FILES ${CMAKE_FILES})
source_group(src\\[packageName/] FILES ${SOURCE_FILES} ${HEADER_FILES})
source_group(src\\[packageName/]\\impl FILES ${SOURCE_IMPLEMENTATION_FILES} ${HEADER_IMPLEMENTATION_FILES})
source_group(src-gen\\[packageName/] FILES ${GENERATED_HEADER_INTERFACE_FILES} ${GENERATED_SOURCE_INTERFACE_FILES})
source_group(src-gen\\[packageName/]\\impl FILES ${GENERATED_HEADER_IMPLEMENTATION_FILES} ${GENERATED_SOURCE_IMPLEMENTATION_FILES})

#-----------------------------------------------------
# DELIVERING binaries and header to delivery
#-----------------------------------------------------
install(TARGETS ${PROJECT_NAME} DESTINATION dist/lib )
install(FILES ${GENERATED_HEADER_INTERFACE_FILES} ${HEADER_FILES} DESTINATION dist/include )

[/file]
[/template]

