[comment encoding = UTF-8 /]
[module generateInterface('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::cpp::generateClass/]
[import soft::generator::cpp::generateOperation/]
[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::generateCommon/]
[import soft::generator::cpp::lib::generateCommon/]
[import soft::generator::cpp::lib::generateStructuralFeature/]

[template public generateInterface(aClass : EClass) { className : String = aClass.getInterfaceName(); classNamespace : String = aClass.ePackage.getInterfaceNamespaceName(); } ]
[file (aClass.ePackage.getOutputDirectory() + '/src-gen/' + aClass.ePackage.getInterfaceFolder() + '/' + className +'.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(aClass)/]

[for ( baseInclude : String | aClass.getInterfaceExtends()->asOrderedSet()->sortedBy( str | str ) ) separator ('\r\n')]
#include "[namespaceToFolder(baseInclude)/].hpp"
[/for]
[for (enumInclude : EEnum| aClass.getClassIncludes()->selectByKind(EEnum)->asOrderedSet()->sortedBy(name) ) separator ('\r\n')]
#include "[enumInclude.ePackage.name/]/[enumInclude.name.toUpperFirst()/].hpp"
[/for]

[if (aClass.eOperations.eParameters.eType->select(name = 'EMap')->size() > 0 or aClass.eAttributes.eType->select(name = 'EMap')->size() > 0)]
#include <map>
[/if]
#include <list>
#include <memory>
#include <string>
[if (aClass.eAttributes.eType->select(isAny())->size() = 0 and aClass.eOperations.eParameters.eType->select(isAny())->size() > 0)]
#include <boost/any.hpp>
[/if]

//forward declarations
[generateTypesForwardDeclaration()/]
[for (aCls : EClass| aClass.getClassIncludes()->selectByKind(EClass)->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
namespace [aCls.ePackage.getInterfaceNamespaceName()/] 
{
    class [aCls.getInterfaceName()/];
}
[/for]

// [protected ('forward declarations for '.concat(aClass.name))]
// [/protected]

namespace [classNamespace/] 
{
    class [className/] [for ( extend : String | aClass.getInterfaceExtends()->collect( s | getShortQualifiedName(s, classNamespace))->sortedBy( s | s )) before (' : ') separator (', ')]virtual public [extend/][/for]
    {
    public:
        [className/](const [className/] &) = delete;
        [className/]& operator=([className/] const&) = delete;

    protected:
        [className/]() = default;
 
    public:
        //destructor
        virtual ~[className/]() = default;

        [aClass.eOperations.generateDeclaration(false)/]
        [aClass.eStructuralFeatures.generateDeclaration(false)/]
        // [protected (aClass.name)]
        // [/protected]
    };
}
[endGuard(aClass)/]
[/file]
[/template]

