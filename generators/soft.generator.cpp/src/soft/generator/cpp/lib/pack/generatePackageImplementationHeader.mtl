[comment encoding = UTF-8 /]
[module generatePackageImplementationHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateAttribute /]
[import soft::generator::cpp::generateClass /]
[import soft::generator::cpp::generateType /]
[import soft::generator::cpp::generateOperation /]
[import soft::generator::cpp::generateReference /]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::lib::generateCommon /]
[import soft::generator::cpp::lib::pack::generatePackageHelper /]

[template public generatePackageImplHeader(anEPackage : EPackage) { className : String = anEPackage.getImplementationName() ; namespaceName : String = anEPackage.getImplementationNamespaceName(); }]
[file (anEPackage.getOutputDirectory() + '/src-gen/' + anEPackage.getImplementationFolder() + '/' + className + '.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(anEPackage,'PackageImpl')/]

#include "[namespaceToFolder(anEPackage.getQualifiedInterfaceName())/].hpp"
#include "ecore/impl/EPackageImpl.hpp"

namespace [anEPackage.getInterfaceNamespaceName()/] 
{
[for (elements : EClassifier| OrderedSet{anEPackage.eClassifiers}->flatten()->selectByKind(EClass)->sortedBy(name))]
    class [elements.name/];
[/for]
}

namespace ecore
{
    class EcoreFactory;
}


namespace [namespaceName/]
{
    class [className/] : public virtual [getShortQualifiedName('ecore::impl::EPackageImpl' ,namespaceName)/], public virtual [anEPackage.getInterfaceName()/]
    {
        private:
            [className/]([className/] const&) = delete;
            [className/]& operator=([className/] const&) = delete;

        protected:
            [className/]();

        public:
            virtual ~[className/]();

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
            // Begin Class [aClass.name.toUpperFirst()/]
            // Class and Feature Getter
            [aClass.generateModelElementGetter(anEPackage, true)/]
            [aClass.eAttributes->sortedBy(name).generateModelElementGetter(anEPackage, true)/]
            [aClass.eReferences->sortedBy(name).generateModelElementGetter(anEPackage, true)/]
            [aClass.eOperations->sortedBy(name).generateModelElementGetter(anEPackage, true)/]
            // End Class [aClass.name.toUpperFirst()/]
[/for]

            [anEPackage.eAllContents(EDataType).generateModelElementGetter(anEPackage, true)/]

        private:
            [anEPackage.eAllContents(EClass)->sortedBy(name).generatePrivatePackageMember(anEPackage)/]
            [anEPackage.eAllContents(EDataType)->sortedBy(name).generatePrivatePackageMember(anEPackage)/]
            [anEPackage.eAllContents(EClass).eAttributes->sortedBy(name).generatePrivatePackageMember(anEPackage)/]
            [anEPackage.eAllContents(EClass).eReferences->sortedBy(name).generatePrivatePackageMember(anEPackage)/]
            [anEPackage.eAllContents(EClass).eOperations->sortedBy(name).generatePrivatePackageMember(anEPackage)/]

            friend class [anEPackage.getInterfaceName()/];

            static [className/]* create();
            bool isInitialized = false;
            bool isCreated = false;

            void init(const std::shared_ptr<[className/]>& package);
            void createPackageContents(const std::shared_ptr<[className/]>& package);
            void initializePackageContents();

        private:
[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
            void create[aClass.name.toUpperFirst()/]Content(const std::shared_ptr<[getShortQualifiedName('ecore::EPackage' ,namespaceName)/]>& package, const std::shared_ptr<[getShortQualifiedName('ecore::EcoreFactory' ,namespaceName)/]>& factory);
[/for]
            void createPackageEDataTypes(const std::shared_ptr<[getShortQualifiedName('ecore::EPackage' ,namespaceName)/]>& package, const std::shared_ptr<[getShortQualifiedName('ecore::EcoreFactory' ,namespaceName)/]>& factory);

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
            void initialize[aClass.name.toUpperFirst()/]Content();
[/for]
            void initializePackageEDataTypes();
    };
}
[endGuard(anEPackage,'PackageImpl')/]
[/file]
[/template]
