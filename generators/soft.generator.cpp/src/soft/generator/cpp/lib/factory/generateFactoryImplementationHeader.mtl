[comment encoding = UTF-8 /]
[module generateFactoryImplementationHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateClass /]
[import soft::generator::cpp::generateCommon /]

[template public generateFactoryImplHeader(anEPackage : EPackage) { factoryName : String = anEPackage.name.toUpperFirst().concat('FactoryImpl'); } ]
[file ('src-gen/'.concat(anEPackage.name).concat('/impl/').concat(factoryName).concat('.hpp'), false, 'UTF-8')]
[startGuard(anEPackage,'FactoryImpl')/]

#include "ecore/impl/EFactoryImpl.hpp"

[comment  Generate Includes for the Factory/]
#include "[anEPackage.name/]/[anEPackage.name.toUpperFirst().concat('Factory')/].hpp"

namespace [anEPackage.name/] 
{[for (elements : EClassifier| OrderedSet{anEPackage.eClassifiers}->flatten()->selectByKind(EClass)->sortedBy(name)) separator ('\r\n')]
	class [elements.name/];[/for]

}

[comment namespace /]
namespace [anEPackage.name/] 
{
	class [factoryName/] : virtual public [needNamespace(anEPackage, 'EFactoryImpl')/] , virtual public [anEPackage.name.toUpperFirst().concat('Factory')/] 
	{
		private:    
			[factoryName/]([factoryName/] const&) = delete;
			[factoryName/]& operator=([factoryName/] const&) = delete;

		protected:
			friend class [anEPackage.name.toUpperFirst().concat('Factory')/];
			// Constructor
			[factoryName/]();

		public:
			virtual ~[factoryName/]();

            virtual std::shared_ptr<[needNamespace(anEPackage, 'EObject')/]> create(const std::shared_ptr<[needNamespace(anEPackage, 'EClass')/]>&  eClass) const;
            
			//Creator functions
			[anEPackage.eAllContents(EClass)->sortedBy(name).generateClassCreate(true)/]

			//Package
			virtual std::shared_ptr<[anEPackage.name.toUpperFirst()/]Package> get[anEPackage.name.toUpperFirst()/]Package() const;

		private:
			static [factoryName/]* create();
	};
}
[endGuard(anEPackage,'FactoryImpl')/]
[/file]
[/template]