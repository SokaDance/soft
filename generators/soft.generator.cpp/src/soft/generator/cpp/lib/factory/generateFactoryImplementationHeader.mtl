[comment encoding = UTF-8 /]
[module generateFactoryImplementationHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateClass /]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::lib::generateCommon/]
[import soft::generator::cpp::lib::generateDataType/]

[template public generateFactoryImplementationHeader(anEPackage : EPackage) { className : String = anEPackage.getFactoryImplementationName() ; namespaceName : String = anEPackage.getImplementationNamespaceName(); } ]
[file (anEPackage.getOutputDirectory() + '/src-gen/' + anEPackage.getImplementationFolder() + '/' + className + '.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(anEPackage,'FactoryImpl')/]

#include "[namespaceToFolder(anEPackage.getFactoryQualifiedInterfaceName())/].hpp"
#include "ecore/impl/EFactoryImpl.hpp"

namespace [anEPackage.getInterfaceNamespaceName()/] 
{
[for (elements : EClassifier| OrderedSet{anEPackage.eClassifiers}->flatten()->selectByKind(EClass)->sortedBy(name)) separator ('\r\n')]
    class [elements.name/];[/for]

}

[comment namespace /]
namespace [namespaceName/] 
{
    class [className/] : public virtual [getShortQualifiedName('ecore::impl::EFactoryImpl' ,namespaceName)/] , public virtual [anEPackage.getFactoryInterfaceName()/] 
    {
        private:    
            [className/]([className/] const&) = delete;
            [className/]& operator=([className/] const&) = delete;

        protected:
            friend class [anEPackage.getFactoryInterfaceName()/];
            // Constructor
            [className/]();

        public:
            virtual ~[className/]();

            // Operations
            virtual std::shared_ptr<[getShortQualifiedName('ecore::EObject',namespaceName)/]> create(const std::shared_ptr<[getShortQualifiedName('ecore::EClass',namespaceName)/]>&  eClass) const;
            virtual boost::any createFromString(const std::shared_ptr<[getShortQualifiedName('ecore::EDataType',namespaceName)/]>& eDataType,const std::string& literalValue) const;
            virtual std::string convertToString(const std::shared_ptr<[getShortQualifiedName('ecore::EDataType',namespaceName)/]>& eDataType,const boost::any& instanceValue) const;

            //Creator functions
            [anEPackage.eAllContents(EClass)->sortedBy(name).generateClassCreate(true)/]

            //Package
            virtual std::shared_ptr<[anEPackage.getInterfaceName()/]> get[anEPackage.getInterfaceName()/]() const;

        protected:
            [anEPackage.eAllContents(EDataType)->sortedBy(name).generateCreateFromStringDeclaration()/]
            [anEPackage.eAllContents(EDataType)->sortedBy(name).generateConvertToStringDeclaration()/]

        private:
            static [className/]* create();
    };
}
[endGuard(anEPackage,'FactoryImpl')/]
[/file]
[/template]