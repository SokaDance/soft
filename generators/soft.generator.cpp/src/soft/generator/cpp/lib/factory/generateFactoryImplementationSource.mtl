[comment encoding = UTF-8 /]
[module generateFactoryImplementationSource('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateClass /]
[import soft::generator::cpp::generateType /]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::lib::generateCommon /]

[template public generateFactoryImplementationSource(anEPackage : EPackage) { className : String = anEPackage.getFactoryImplementationName() ; namespaceName : String = anEPackage.getImplementationNamespaceName(); }]
[file (anEPackage.getOutputDirectory() + '/src-gen/' + anEPackage.getImplementationFolder() + '/' + className + '.cpp', false, 'UTF-8')]
#include "[namespaceToFolder(anEPackage.getFactoryQualifiedImplementationName())/].hpp"
[let classIncludes : OrderedSet(String) = anEPackage.eAllContents(EClass)->collect( c | c.getQualifiedImplementationName())->asOrderedSet()->sortedBy( s | s)]
[let allIncludes : OrderedSet(String) = classIncludes->addAll( OrderedSet {
                                             anEPackage.getQualifiedInterfaceName(),
                                             anEPackage.getFactoryQualifiedInterfaceName(),
                                             'ecore::EList',
                                             'ecore::EClass'
                                            })]
[for ( include : String | allIncludes )]
#include "[namespaceToFolder(include)/].hpp"
[/for]
[/let]
[/let]


#include <iostream>
#include <boost/current_function.hpp>


[comment namespace /]
[let namespaces : OrderedSet(String) = OrderedSet{ 'ecore' , anEPackage.getInterfaceNamespaceName() , anEPackage.getImplementationNamespaceName()}]
[for (namespace : String | namespaces )]
using namespace [namespace/];
[/for]
[/let]

//*********************************
// Constructor / Destructor
//*********************************

[className/]::[className/]()
{
}

[className/]::~[className/]()
{
}

[className/]* [className/]::create()
{
    return new [className/]();
}

//*********************************
// creators
//*********************************

std::shared_ptr<[getShortQualifiedName('ecore::EObject',namespaceName)/]> [className/]::create(const std::shared_ptr<[getShortQualifiedName('ecore::EClass',namespaceName)/]>&  eClass) const
{
    int classID = eClass->getClassifierID();
    switch(classID)
    {
    [for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
        case [anEPackage.name.toUpperFirst()/]Package::[aClass.getClassifierIDName()/]:
            return this->create[aClass.name/]();
    [/for]
    default:
            std::cerr << BOOST_CURRENT_FUNCTION << " ID " << classID <<" not found" << std::endl;
    }
    return nullptr;
}

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
std::shared_ptr<[aClass.generateTypeClass()/]> [className/]::create[aClass.name/]() const
{
    std::shared_ptr<[aClass.name.toUpperFirst()/]Impl> element(new [aClass.name.toUpperFirst()/]Impl());
    element->[generateGetThisPtrPropertySetterName()/](element);
    return element;
}

[let ref : OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
std::shared_ptr<[aClass.generateTypeClass()/]> [className/]::create[aClass.name/]([aReference.generateParameterType()/] eContainer) const
{
    [generateCreateFunctionContent(aClass, ref, aReference, anEPackage, false)/]
}
[if(aClass.getElementIDAccessorName().size() > 0)]
std::shared_ptr<[aClass.generateTypeClass()/]> [className/]::create[aClass.name/]([aReference.generateParameterType()/] eContainer, const unsigned int classID) const
{
    [generateCreateFunctionContent(aClass, ref, aReference, anEPackage, true)/]
}[/if]

[/for]
[/let]
[/for]

std::shared_ptr<[anEPackage.getInterfaceName()/]> [className/]::get[anEPackage.getInterfaceName()/]() const
{
    return [anEPackage.getInterfaceName()/]::eInstance();
}
[/file]
[/template]

[template public generateCreateFunctionContent(anEClass : EClass, ref : OrderedSet(EReference), aReference : EReference, anEPackage : EPackage, addID : Boolean)]
auto element = std::make_shared<[anEClass.getImplementationName()/]>();
element->[generateGetThisPtrPropertySetterName()/](element);
[if(addID)]
element->set[anEClass.getElementIDAccessorName()/]ID(classID);
[/if]
[if(not aReference.eOpposite.name.oclIsUndefined())]
if( eContainer)
[if(aReference.eOpposite.upperBound <> 1)]
    eContainer->get[aReference.eOpposite.name.toUpperFirst()/]()->add(element);
[else]
    eContainer->set[aReference.eOpposite.name.toUpperFirst()/](element);
[/if]
[/if]
return element;
[/template]
