[comment encoding = UTF-8 /]
[module generateImplementationSource('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::generateAttribute/]
[import soft::generator::cpp::generateClass/]
[import soft::generator::cpp::generateOperation/]
[import soft::generator::cpp::generateReference/]
[import soft::generator::cpp::generateStructuralFeature/]
[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::lib::generateCommon /]
[import soft::generator::cpp::lib::generateInterface /]


[template public generateImplementationSource(aClass : EClass) { className : String = aClass.getImplementationName(); namespaceName : String = aClass.ePackage.getImplementationNamespaceName();}]
[file (aClass.ePackage.getOutputDirectory() + '/src-gen/' + aClass.ePackage.getImplementationFolder() + '/' + className + '.cpp', false, 'UTF-8')]
#include "[namespaceToFolder(aClass.getQualifiedImplementationName())/].hpp"
[let classIncludes : OrderedSet(String) = aClass.getClassIncludes()->selectByKind(EClass)->collect( c | c.getQualifiedInterfaceName())->asOrderedSet()->sortedBy( s | s)]
[let allIncludes : OrderedSet(String) = classIncludes->addAll( OrderedSet {
                                             aClass.ePackage.getQualifiedInterfaceName(),
                                             aClass.ePackage.getFactoryQualifiedInterfaceName(),
                                             aClass.eClass().ePackage.getQualifiedInterfaceName(),
                                             aClass.eClass().ePackage.getFactoryQualifiedInterfaceName(),
                                             'ecore::EAnnotation',
                                             'ecore::EClass',
                                             'ecore::EAttribute',
                                             'ecore::EStructuralFeature',
                                             'ecore::impl::EObjectEList'
                                            })]
[for ( include : String | allIncludes )]
#include "[namespaceToFolder(include)/].hpp"
[/for]
[/let]
[/let]
[generateAbstractDataTypesIncludes()/]

#include <cassert>
#include <iostream>
#include <sstream>
[if (aClass.eAttributes.eType->select(isAny())->size() = 0 and aClass.eOperations.eParameters.eType->select(isAny())->size() > 0)]
#include <boost/any.hpp>
[/if]


[comment namespace /]
[let namespaces : OrderedSet(String) = OrderedSet{ 'ecore' , aClass.ePackage.getInterfaceNamespaceName() , aClass.ePackage.getImplementationNamespaceName()}]
[for (namespace : String | namespaces )]
using namespace [namespace/];
[/for]
[/let]

//*********************************
// Constructor / Destructor
//*********************************
[className/]::[className/]()
{
}

[className/]::~[className/]()
{
#ifdef SHOW_DELETION
    std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete [aClass.name.toUpperFirst()/] "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

std::shared_ptr<EClass> [className/]::eStaticClass() const
{
    return [aClass.ePackage.getInterfaceName()/]::eInstance()->get[aClass.getElementAccessorName()/]();
}

[if aClass.eAttributes->notEmpty()]
//*********************************
// Attribute Setter Getter
//*********************************
[for (aAttribute : EAttribute | aClass.eAttributes->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
[aAttribute.generateAttributeSetterImplementationCpp(true)/]

[aAttribute.generateAttributeGetterImplementationCpp()/]
[/for]
[/if]
[if aClass.eOperations->notEmpty()]
//*********************************
// Operations
//*********************************
[for (aOperation : EOperation | aClass.eOperations->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
[aOperation.generateOperationImplementation()/]
[/for]
[/if]
[if aClass.eReferences->notEmpty()]
//*********************************
// References
//*********************************
[for (aReference : EReference | aClass.eReferences->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
[aReference.generateReferenceCpp()/]
[/for]
[/if]

[aClass.generateGetThisPtrCPP()/]

[aClass.generateGetImplementation()/]

[aClass.generateSetImplementation()/]

[aClass.generateUnSetImplementation()/]

[aClass.generateIsSetImplementation()/]

[aClass.generateInvokeImplementation()/]

[aClass.generateInverseAddImplementation()/]

[aClass.generateInverseRemoveImplementation()/]

[/file]
[/template]
