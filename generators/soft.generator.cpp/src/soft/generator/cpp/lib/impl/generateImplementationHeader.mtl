[comment encoding = UTF-8 /]
[module generateImplementationHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateAttribute /]
[import soft::generator::cpp::generateClass /]
[import soft::generator::cpp::generateOperation /]
[import soft::generator::cpp::generateReference /]
[import soft::generator::cpp::generateStructuralFeature /]
[import soft::generator::cpp::generateType /]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::lib::generateCommon /]

[template public generateImplementationHeader(aClass : EClass){ className : String = aClass.getImplementationName(); namespaceName : String = aClass.ePackage.getImplementationNamespaceName(); guardName : String = '_'.concat(className); }]
[file (aClass.ePackage.getOutputDirectory() + '/src-gen/' + aClass.ePackage.getImplementationFolder() + '/' + className +'.hpp', false, 'UTF-8')]
[startGuard(guardName)/]

[for (implInclude : String | aClass.getClassImplements()->asOrderedSet()->sortedBy(s | s)) separator ('\r\n')]#include "[namespaceToFolder(implInclude)/].hpp"[/for]
#include "[namespaceToFolder(aClass.getClassExtends())/].hpp"

[comment namespace /]
namespace [namespaceName/] 
{
    class [className/] : virtual public [getShortQualifiedName(aClass.getClassExtends(),namespaceName)/],[for ( implClass : String | aClass.getClassImplements()->asOrderedSet()->sortedBy(s | s)) separator (', ')] virtual public [getShortQualifiedName(implClass, namespaceName)/][/for] 
    {
        private:    
            [className/]& operator=([className/] const&) = delete;

        protected:
            friend class [ aClass.ePackage.getFactoryImplementationName() /];
            [className/]();
            [aClass.generateGetThisPtr()/]

        public:
            //destructor
            virtual ~[className/]();
            
            [if(aClass.eOperations->notEmpty())]

            //*********************************
            // Operations
            //*********************************
            [aClass.eOperations->sortedBy(name).generateOperationDeclaration(true)/]
            [/if]
            [if(aClass.eAttributes->notEmpty())]

            //*********************************
            // Attributes Getter Setter
            //*********************************
            [aClass.eAttributes->sortedBy(name).generateAttributeDeclaration(true)/]
            [/if]
            [if(aClass.eReferences->notEmpty())]

            //*********************************
            // References
            //*********************************
            [aClass.eReferences->sortedBy(name).generateReferenceDeclaration(true)/]
            [/if]
            
        protected:
            virtual std::shared_ptr<[getShortQualifiedName('ecore::EClass',namespaceName)/]> eStaticClass() const;
            [aClass.generateGetDeclaration(true)/]
            [aClass.generateSetDeclaration(true)/]
            [aClass.generateUnSetDeclaration(true)/]
            [aClass.generateIsSetDeclaration(true)/]
            [aClass.generateInvokeDeclaration(true)/]
            [aClass.generateInverseAddDeclaration(true)/]
            [aClass.generateInverseRemoveDeclaration(true)/]

        [if aClass.eAttributes->notEmpty() or aClass.eReferences->notEmpty()]
        protected:
            [if(aClass.eAttributes->notEmpty())]
            //*********************************
            // Attribute Members
            //*********************************
            [aClass.eAttributes->sortedBy(name).generateAttributeProtected()/]
            [/if]
            [if(aClass.eReferences->notEmpty())]
            //*********************************
            // Reference Members
            //*********************************
            [aClass.eReferences->sortedBy(name).generateReferenceProtected()/]
            [/if]
        [/if]
        private:
            std::weak_ptr<[className/]> [generateGetThisPtrPropertyName()/]_;
    };
}
[endGuard(guardName)/]
[/file]
[/template]
