[comment encoding = UTF-8 /]
[module generateImplementationHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateAttribute /]
[import soft::generator::cpp::generateClass /]
[import soft::generator::cpp::generateOperation /]
[import soft::generator::cpp::generateReference /]
[import soft::generator::cpp::generateType /]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::lib::generateCommon /]
[import soft::generator::cpp::lib::generateStructuralFeature /]
[import soft::generator::cpp::lib::impl::generateReflectives /]

[template public generateImplementationHeader(aClass : EClass){ className : String = aClass.getImplementationName(); namespaceName : String = aClass.ePackage.getImplementationNamespaceName(); guardName : String = '_'.concat(className); }]
[file (aClass.ePackage.getOutputDirectory() + '/src-gen/' + aClass.ePackage.getImplementationFolder() + '/' + className +'.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(guardName)/]

[for (implInclude : String | aClass.getClassImplements()->asOrderedSet()->sortedBy(s | s))]
#include "[namespaceToFolder(implInclude)/].hpp"
[/for]
#include "[namespaceToFolder(aClass.getClassExtends())/].hpp"

// [protected (className + ' [definition-includes]')]
// [/protected]

[comment namespace /]
namespace [namespaceName/] 
{
    class [className/] : public virtual [getShortQualifiedName(aClass.getClassExtends(),namespaceName)/],[for ( implClass : String | aClass.getClassImplements()->asOrderedSet()->sortedBy(s | s)) separator (', ')] public virtual [getShortQualifiedName(implClass, namespaceName)/][/for] 
    {
        private:    
            [className/]& operator=([className/] const&) = delete;

        protected:
            friend class [ aClass.ePackage.getFactoryImplementationName() /];
            [className/]();
            [aClass.generateGetThisPtr()/]

        public:
            //destructor
            virtual ~[className/]();
            
            [aClass.eOperations->sortedBy(name).generateDeclaration(true)/]
            [aClass.eAttributes->sortedBy(name).generateAttributeDeclaration(true)/]
            [aClass.eReferences->sortedBy(name).generateReferenceDeclaration(true)/]
        
        protected:
            virtual std::shared_ptr<[getShortQualifiedName('ecore::EClass',namespaceName)/]> eStaticClass() const;
            [aClass.generateReflectivesDeclaration()/]
       
        [if aClass.eAttributes->notEmpty() or aClass.eReferences->notEmpty()]
        protected:
            [aClass.eAttributes->sortedBy(name).generateAttributeProtected()/]
            [aClass.eReferences->sortedBy(name).generateReferenceProtected()/]
        [/if]

        private:
            std::weak_ptr<[className/]> [generateGetThisPtrPropertyName()/]_;

            // [protected (className + ' [definition-methods]')]
            // [/protected]

    };
}
[endGuard(guardName)/]
[/file]
[/template]
