[comment encoding = UTF-8 /]
[module generateImplementationHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateAttribute /]
[import soft::generator::cpp::generateClass /]
[import soft::generator::cpp::generateOperation /]
[import soft::generator::cpp::generateReference /]
[import soft::generator::cpp::generateStructuralFeature /]
[import soft::generator::cpp::generateType /]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::lib::generateCommon /]

[template public generateImplementationHeader(aClass : EClass){ className : String = aClass.name.toUpperFirst().concat('Impl'); guardName : String = '_'.concat(className); }]
[file (aClass.ePackage.getOutputDirectory().concat('/src-gen/').concat(aClass.ePackage.name).concat('/impl/').concat(className).concat('.hpp'), false, 'UTF-8')]
[startGuard(guardName)/]

//*********************************
// generated Includes

//Model includes
#include "[aClass.ePackage.name/]/[aClass.name.toUpperFirst().concat('.hpp')/]"

[for (aEClass : EClass | aClass.eSuperTypes->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
#include "[aEClass.ePackage.name/]/impl/[aEClass.name.toUpperFirst()/]Impl.hpp"[/for]

[if aClass.eSuperTypes->isEmpty()]
[if aClass.name='EObject']
#include "ecore/BasicEObject.hpp"
[else]
#include "ecore/impl/EObjectImpl.hpp"
[/if]
[/if]

//*********************************
[comment namespace /]
namespace [aClass.ePackage.name/] 
{
    class [className/] :[for (sClass : EClass | aClass.eSuperTypes->asOrderedSet()->sortedBy(name)) separator (', ') after (', ')] virtual public [getClassWithNamespace(aClass, sClass)/]Impl[/for][if (aClass.eSuperTypes->isEmpty())][if aClass.name='EObject']virtual public ecore::BasicEObject,[else]virtual public ecore::EObjectImpl,[/if] [/if]virtual public [aClass.name.toUpperFirst()/] 
    {
        private:    
            [className/]& operator=([className/] const&) = delete;

        protected:
            friend class [aClass.ePackage.name.concat('FactoryImpl').toUpperFirst()/];
            [className/]();
            [aClass.generateGetThisPtr()/]

        public:
            //destructor
            virtual ~[className/]();
            
            [if(aClass.eOperations->notEmpty())]

            //*********************************
            // Operations
            //*********************************
            [aClass.eOperations->sortedBy(name).generateOperationDeclaration(true)/]
            [/if]
            [if(aClass.eAttributes->notEmpty())]

            //*********************************
            // Attributes Getter Setter
            //*********************************
            [aClass.eAttributes->sortedBy(name).generateAttributeDeclaration(true)/]
            [/if]
            [if(aClass.eReferences->notEmpty())]

            //*********************************
            // References
            //*********************************
            [aClass.eReferences->sortedBy(name).generateReferenceDeclaration(true)/]
            [/if]
            
        protected:
            virtual std::shared_ptr<[needNamespace(aClass.ePackage, 'EClass')/]> eStaticClass() const;
            [aClass.generateGetDeclaration(true)/]
            [aClass.generateSetDeclaration(true)/]
            [aClass.generateUnSetDeclaration(true)/]
            [aClass.generateIsSetDeclaration(true)/]
            [aClass.generateInvokeDeclaration(true)/]
            [aClass.generateInverseAddDeclaration(true)/]
            [aClass.generateInverseRemoveDeclaration(true)/]

        [if aClass.eAttributes->notEmpty() or aClass.eReferences->notEmpty()]
        protected:
            [if(aClass.eAttributes->notEmpty())]
            //*********************************
            // Attribute Members
            //*********************************
            [aClass.eAttributes->sortedBy(name).generateAttributeProtected()/]
            [/if]
            [if(aClass.eReferences->notEmpty())]
            //*********************************
            // Reference Members
            //*********************************
            [aClass.eReferences->sortedBy(name).generateReferenceProtected()/]
            [/if]
        [/if]
        private:
            std::weak_ptr<[className/]> [generateGetThisPtrPropertyName()/]_;
    };
}
[endGuard(guardName)/]
[/file]
[/template]
