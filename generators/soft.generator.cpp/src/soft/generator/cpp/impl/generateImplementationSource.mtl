[comment encoding = UTF-8 /]
[module generateImplementationSource('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateAttribute/]
[import soft::generator::cpp::generateClass/]
[import soft::generator::cpp::generateOperation/]
[import soft::generator::cpp::generateReference/]
[import soft::generator::cpp::generateStructuralFeature/]
[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::generateInterface /]
[import soft::generator::cpp::utils /]

[template public generateImplementationSource(aClass : EClass) { className : String = aClass.name.toUpperFirst().concat('Impl'); }]
[file ('src-gen/'.concat(aClass.ePackage.name).concat('/impl/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[aClass.ePackage.name/]/impl/[className.concat('.hpp')/]"

#include <cassert>
#include <iostream>
#include <sstream>

[generateAbstractDataTypesIncludes()/]
[if (aClass.eAttributes.eType->select(isAny())->size() = 0 and aClass.eOperations.eParameters.eType->select(isAny())->size() > 0)]
#include <boost/any.hpp>
[/if]
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "[aClass.ePackage.name/]/impl/[aClass.ePackage.name.toUpperFirst().concat('PackageImpl')/].hpp"
[if (aClass.hasKey('includes'))]
[aClass.valueKey('includes')/]
[/if]


[for (element : EClassifier| aClass.includes()->selectByKind(EClass)->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
#include "[element.ePackage.name/]/[element.name.toUpperFirst()/].hpp"
[/for]

#include "[aClass.eClass().ePackage.name/]/[aClass.eClass().ePackage.name.toUpperFirst()/]Package.hpp"
#include "[aClass.eClass().ePackage.name/]/[aClass.eClass().ePackage.name.toUpperFirst()/]Factory.hpp"
#include "[aClass.ePackage.name/]/[aClass.ePackage.name.toUpperFirst()/]Package.hpp"
#include "[aClass.ePackage.name/]/[aClass.ePackage.name.toUpperFirst()/]Factory.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/BasicEList.hpp"

[comment namespace /]
using namespace [aClass.ePackage.name/];

//*********************************
// Constructor / Destructor
//*********************************
[className/]::[className/]()
{
    //*********************************
    // Attribute Members
    //*********************************
    [for (aAttribute : EAttribute | aClass.eAttributes->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
    [aAttribute.generateAttributeInit()/][/for]

    //*********************************
    // Reference Members
    //*********************************
    [for (aReference : EReference | aClass.eReferences->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
    [aReference.generateReferenceInit()/]
    [/for]

}

[className/]::~[className/]()
{
#ifdef SHOW_DELETION
    std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete [aClass.name.toUpperFirst()/] "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

std::shared_ptr<[needNamespace(aClass.ePackage, 'EClass')/]> [className/]::eStaticClass() const
{
    return [aClass.ePackage.name.concat('PackageImpl').toUpperFirst()/]::eInstance()->get[aClass.getElementAccessorName()/]();
}

//*********************************
// Attribute Setter Getter
//*********************************
[for (aAttribute : EAttribute | aClass.eAttributes->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
[aAttribute.generateAttributeSetterImplementationCpp(true)/]

[aAttribute.generateAttributeGetterImplementationCpp()/]
[/for]

//*********************************
// Operations
//*********************************
[for (aOperation : EOperation | aClass.eOperations->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
[aOperation.generateOperationImplementation()/]
[/for]

//*********************************
// References
//*********************************
[for (aReference : EReference | aClass.eReferences->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
[aReference.generateReferenceCpp()/]
[/for]

[aClass.generateGetThisPtrCPP()/]

//*********************************
// Structural Feature Getter/Setter
//*********************************
[aClass.generateGetImplementation()/]

[aClass.generateIsSetImplementation()/]

[aClass.generateSetImplementation()/]

[aClass.generateUnSetImplementation()/]

[aClass.generateInvokeImplementation()/]

[/file]
[/template]
