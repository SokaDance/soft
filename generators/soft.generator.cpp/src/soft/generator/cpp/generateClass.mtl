[comment encoding = UTF-8 /]
[module generateClass('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::generateCommon/]

[template public generateClassCreate(aEClass : EClass,impl : Boolean) ? (aEClass.abstract=false)]
virtual std::shared_ptr<[aEClass.generateTypeClass()/]> create[aEClass.name/]() const [abstractSufix(impl)/];
[let ref:OrderedSet(EReference) = aEClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
virtual std::shared_ptr<[aEClass.generateTypeClass()/]> create[aEClass.name/]([aReference.generateParameterType()/] eContainer) const [abstractSufix(impl)/];
[if(aEClass.getElementIDAccessorName().size() > 0)]virtual std::shared_ptr<[aEClass.generateTypeClass()/]> create[aEClass.name/]([aReference.generateParameterType()/] eContainer, const unsigned int classID) const [abstractSufix(impl)/];[/if]
[/for]

[/let]
[/template]


[template public generateEContainerOperation(aClass : EClass, impl : EBoolean)]
virtual std::shared_ptr<ecore::EObject> eContainer() const [abstractSufix(impl)/];
[/template]

[template public generateEContainerOperationCPP(aClass: EClass)]
std::shared_ptr<ecore::EObject> [aClass.name.toUpperFirst()/]Impl::eContainer() const
{
[let ref:OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name)) separator('\n')]
[if(ref->select(eType.name = aReference.eType.name)->size()>1 )]
    [if(ref->select(eType.name = aReference.eType.name)->asOrderedSet()->sortedBy(name)->first() = aReference)]
        [for(multipleRef : EReference | ref->select(eType.name = aReference.eType.name)->sortedBy(name))]
    if(auto wp = [multipleRef.name/]_.lock())
        return wp;
        [/for]
    [/if]
    [else]
    if(auto wp = [aReference.name/]_.lock())
        return wp;
    [/if]
[/for]
[/let]
    return nullptr;
}
[/template]


[template public generateGetThisPtr(aClass : EClass)]
std::shared_ptr<[aClass.name/]Impl> [generateGetThisPtrPropertyGetterName()/]() const;
void [generateGetThisPtrPropertySetterName()/](const std::shared_ptr<[aClass.name/]Impl>& [generateGetThisPtrPropertyName()/]);
[/template]

[template public generateGetThisPtrCPP(aClass: EClass)]
std::shared_ptr<[aClass.name/]Impl> [aClass.name/]Impl::[generateGetThisPtrPropertyGetterName()/]() const
{
    return [generateGetThisPtrPropertyName()/]_.lock();
}

void [aClass.name/]Impl::[generateGetThisPtrPropertySetterName()/](const std::shared_ptr<[aClass.name/]Impl>& [generateGetThisPtrPropertyName()/])
{
    [generateGetThisPtrPropertyName()/]_ = [generateGetThisPtrPropertyName()/];
    [if aClass.name ='EObject']
    BasicEObject::setThisPtr([aClass.generateGetThisPtrPropertyName()/]);
    [else]
    [for (superClass : EClass | aClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
    [superClass.name/]Impl::[superClass.generateGetThisPtrPropertySetterName()/]([aClass.generateGetThisPtrPropertyName()/]);
    [/for]
    [/if]
}
[/template]

[query public generateGetThisPtrPropertyName(anEClass : EClass) : String = 'thisPtr'/]
[query public generateGetThisPtrPropertySetterName(anEClass : EClass) : String = 'set'.concat(generateGetThisPtrPropertyName().toUpperFirst())/]
[query public generateGetThisPtrPropertyGetterName(anEClass : EClass) : String = 'get'.concat(generateGetThisPtrPropertyName().toUpperFirst())/]

[template public generateStaticClassID(aEClass : EClass)]
/**
 * The meta object id for the class [aEClass.name/].
 */
static const unsigned int [aEClass.getClassifierIDName()/] = [aEClass.getClassifierIDValue()/];

[/template]

[template public generateClassCreation(aEClass : EClass)]
[aEClass.getElementInstanceName()/] = factory->createEClass(package, [aEClass.getClassifierIDName()/]);

[/template]

[template public generateClassInit(aEClass : EClass)]
[aEClass.getElementInstanceName()/]->setName("[aEClass.name/]");
[aEClass.getElementInstanceName()/]->setAbstract([aEClass.abstract.toString()/]);
[aEClass.getElementInstanceName()/]->setInterface([aEClass.interface.toString()/]);

[/template]

[template public initSuperTypes(aEClass : EClass)]
[for (superClass : EClass | aEClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
[aEClass.getElementInstanceName()/]->getESuperTypes()->add([aEClass.packageGetter(superClass)/]);
[/for]
[/template]
