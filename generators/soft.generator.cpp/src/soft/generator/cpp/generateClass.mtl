[comment encoding = UTF-8 /]
[module generateClass('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::utils/]

[template public generateClassCreate(aEClass : EClass,impl : Boolean) ? (aEClass.abstract=false)]
virtual std::shared_ptr<[aEClass.generateTypeClass()/]> create[aEClass.name/]() const [abstractSufix(impl)/];
[let ref:OrderedSet(EReference) = aEClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
virtual std::shared_ptr<[aEClass.generateTypeClass()/]> create[aEClass.name/]([aReference.generateReferenceType(true)/] eContainer) [abstractSufix(impl)/];
[if(aEClass.getClassifierIDName().size() > 0)]virtual std::shared_ptr<[aEClass.generateTypeClass()/]> create[aEClass.name/]([aReference.generateReferenceType(true)/] eContainer, const unsigned int classID) const [abstractSufix(impl)/];[/if]
[/for]

[/let]
[/template]


[template public generateEContainerOperation(aClass : EClass, impl : EBoolean)]
virtual std::shared_ptr<ecore::EObject> eContainer() const [abstractSufix(impl)/];
[/template]

[template public generateEContainerOperationCPP(aClass: EClass)]
std::shared_ptr<ecore::EObject> [aClass.name.toUpperFirst()/]Impl::eContainer() const
{
[let ref:OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name)) separator('\n')]
[if(ref->select(eType.name = aReference.eType.name)->size()>1 )]
    [if(ref->select(eType.name = aReference.eType.name)->asOrderedSet()->sortedBy(name)->first() = aReference)]
        [for(multipleRef : EReference | ref->select(eType.name = aReference.eType.name)->sortedBy(name))]
    if(auto wp = [multipleRef.name/]_.lock())
    {
        return wp;
    }
        [/for]
    [/if]
    [else]
    if(auto wp = [aReference.name/]_.lock())
    {
        return wp;
    }
    [/if]
[/for]
[/let]
    return nullptr;
}
[/template]


[template public generateGetThisPtr(aClass : EClass)]
virtual std::shared_ptr<[aClass.name/]> [generateGetThisPtrPropertyGetterName()/]() const;
virtual void [generateGetThisPtrPropertySetterName()/](std::weak_ptr<[aClass.name.toUpperFirst()/]> [generateGetThisPtrPropertyName()/]);
[/template]

[template public generateGetThisPtrCPP(aClass: EClass)]
std::shared_ptr<[aClass.name.toUpperFirst()/]> [aClass.name.toUpperFirst()/]Impl::[generateGetThisPtrPropertyGetterName()/]() const
{
    return [generateGetThisPtrPropertyName()/]_.lock();
}
void [aClass.name.toUpperFirst()/]Impl::[generateGetThisPtrPropertySetterName()/](std::weak_ptr<[aClass.name.toUpperFirst()/]> [generateGetThisPtrPropertyName()/])
{
    [generateGetThisPtrPropertyName()/]_ = [generateGetThisPtrPropertyName()/];
    [for (superClass : EClass | aClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
    [superClass.generateGetThisPtrPropertySetterName()/]([aClass.generateGetThisPtrPropertyName()/]);
    [/for]  
}
[/template]

[query public generateGetThisPtrPropertyName(anEClass : EClass) : String = 'this'.concat(anEClass.name.toUpperFirst()).concat('Ptr')/]
[query public generateGetThisPtrPropertySetterName(anEClass : EClass) : String = 'set'.concat(generateGetThisPtrPropertyName().toUpperFirst())/]
[query public generateGetThisPtrPropertyGetterName(anEClass : EClass) : String = 'get'.concat(generateGetThisPtrPropertyName().toUpperFirst())/]

[template public generateStaticClassID(aEClass : EClass)]
static const unsigned int [aEClass.getStaticAttributeIDName()/] = [aEClass.getMyClassifierID()/];
static const unsigned int [aEClass.getStaticAttributeIDName()/]_FEATURE_COUNT = [aEClass.getFeatureCount()/];
static const unsigned int [aEClass.getStaticAttributeIDName()/]_OPERATION_COUNT = [aEClass.getOperationCount()/];
[/template]

[template public generateClassCreation(aEClass : EClass)]
[aEClass.getClassMemberName()/] = factory->createEClass(package, [aEClass.getStaticAttributeIDName()/]);

[/template]

[template public generateClassInit(aEClass : EClass)]
[aEClass.getClassMemberName()/]->setName("[aEClass.name/]");
[aEClass.getClassMemberName()/]->setAbstract([aEClass.abstract.toString()/]);
[aEClass.getClassMemberName()/]->setInterface([aEClass.interface.toString()/]);

[/template]

[template public initSuperTypes(aEClass : EClass)]
[for (superClass : EClass | aEClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
[aEClass.getClassMemberName()/]->getESuperTypes()->add([aEClass.packageGetter(superClass)/]);
[/for]
[/template]