[comment encoding = UTF-8 /]
[module generatePackageInterface('http://www.eclipse.org/emf/2002/Ecore')]
 
[import soft::generator::cpp::generateAttribute /]
[import soft::generator::cpp::generateClass /]
[import soft::generator::cpp::generateDataType /]
[import soft::generator::cpp::generateOperation /]
[import soft::generator::cpp::generateReference /]
[import soft::generator::cpp::generateSingleton /]
[import soft::generator::cpp::generateStructuralFeature /]
[import soft::generator::cpp::utils /]
[import soft::generator::cpp::pack::generatePackageHelper /]

[template public generatePackageInterface(anEPackage : EPackage) { packageName : String = anEPackage.name.toUpperFirst().concat('Package'); }]
[file ('src-gen/'.concat(anEPackage.name).concat('/').concat(packageName).concat('.hpp'), false, 'UTF-8')]
[startGuard(anEPackage,'Package')/]

#include "ecore/EPackage.hpp"

namespace [anEPackage.eClass().ePackage.name/] 
{
[for (elements : EClassifier| anEPackage.getMetaMetaModelClasses())]
    class [elements.name/];
[/for]
}

[comment namespace /]
namespace [anEPackage.name/] 
{
    /*!
    The Metamodel Package for the [anEPackage.name/] metamodel. This package is used to enable the reflection of model elements. It contains all model elements
    which were described in an ecore file.
    */
    class [packageName/] : virtual public [needNamespace(anEPackage, 'EPackage')/] 
    {
        private:    
            [packageName/]([packageName/] const&) = delete;
            [packageName/]& operator=([packageName/] const&) = delete;

        protected:
            [packageName/](){}

        public:
            /** 
             * The package name.
             */
            static const std::string eNAME;
            
            /** 
             * The package namespace URI.
             */
            static const std::string eNS_URI;

            /**
             * The package namespace name.
             */
            static const std::string eNS_PREFIX;

[for (aClass : EClass | anEPackage.getOrderedClasses())]
            [aClass.generateStaticClassID()/]
            [aClass.eAllStructuralFeatures.generateStaticFeatureID(aClass)/]
            [aClass.generateStaticFeatureCountID()/]
[/for]
            [anEPackage.eAllContents(EDataType)->sortedBy(name).generateStaticDatatypeID()/]
            [anEPackage.eAllContents(EDataType)->sortedBy(name).generateModelElementGetter(anEPackage, false)/]

            [generateSingletonDecl(packageName)/]
[if anEPackage.name.equalsIgnoreCase('ecore')]
            //prevent from hiding functions
            using EPackage::getEAnnotation;
            using EPackage::getEClassifier;
[/if]
    };
}
[endGuard(anEPackage,'Package')/]
[/file]
[/template]