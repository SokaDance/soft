[comment encoding = UTF-8 /]
[module generateType('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::cpp::utils/]

[query public requiresAny(anEClassifier : EClassifier) : Boolean = if (oclIsUndefined()) then true else (name = 'EEnumerator' or name = 'EDiagnosticChain' or name = 'EJavaObject') endif/]

[template public generateAttributeType(eAttribute : EAttribute)]
[if (not(eAttribute.upperBound = 1))]
std::shared_ptr<EList<[eAttribute.eGenericType.generateCppType()/]> >[elseif ((not eAttribute.eType.oclIsUndefined()) and (not eAttribute.eType.oclIsKindOf(EDataType)))]
std::shared_ptr<[eAttribute.eGenericType.generateCppType()/]> [else]
[eAttribute.eGenericType.generateCppType()/] [/if]
[/template]

[template public generateReferenceType(eReference : EReference) post(trim())]
[generateReferenceType(true)/]
[/template]

[template public generateReferenceType(eReference : EReference, pointer : Boolean) post(trim())]
[if (eReference.upperBound = 1)]
	[if(pointer)][eReference.pointerType()/]<[/if][eReference.eGenericType.generateCppType()/] [if(pointer)]>[/if]
[else]
	[if(pointer)]std::shared_ptr<[/if]EList<[eReference.eGenericType.generateCppType()/]>[if(pointer)]>[/if]
[/if]
[/template]

[query private isShared(aReference : EReference) : Boolean = if (aReference.hasKey('AggregationKind')) then aReference.valueKey('AggregationKind')='shared' else false endif/]
[query public isBackReference(aReference:EReference) : Boolean = aReference.container or isShared()/]
[query public hasAbstractType(aReference : EReference) : Boolean = if (aReference.eType.oclIsKindOf(EClass)) then eType.oclAsType(EClass).abstract else false endif /]

[template public pointerType(aReference : EReference) post(trim())]
[if(isBackReference())]
std::weak_ptr
[else]
std::shared_ptr
[/if]
[/template]

[template public generateCppType(anEDataType : EGenericType)]
[if (anEDataType.oclIsUndefined())]
void[else]
[if (anEDataType.eTypeArguments->notEmpty())]
[anEDataType.generateGenericType()/][else]
[anEDataType.eClassifier.transformType()/][/if]
[/if]
[/template]

[template public generateGenericType(anEDataType : EGenericType)]
[if (anEDataType.eClassifier.name = 'EJavaClass')] [anEDataType.eClassifier.transformType()/][else]
[anEDataType.eClassifier.transformType()/] <  [for (g : EGenericType | anEDataType.eTypeArguments) separator (',')] [g.eClassifier.generateType()/][/for] > [/if]
[/template]

[template public generateType(anEDataType : EClassifier)]
[if (anEDataType.oclIsUndefined())]
std::shared_ptr<std::any>[else]
[anEDataType.transformType()/][/if]
[/template]

[template public generateParameterList(aOperation:EOperation) post(trim())]
[for (sParameter : EParameter | aOperation.eParameters->select(p:EParameter | not p.doNotGenerate())) separator (',')]
[sParameter.generateParameterType()/] [sParameter.name/][/for]
[/template]

[template public generateParameterType(eParameter : EParameter)]
[if (not(eParameter.upperBound = 1))]
std::shared_ptr<EList<[eParameter.eGenericType.generateCppType()/]> > [elseif (not eParameter.eType.oclIsKindOf(EDataType))]
std::shared_ptr<[eParameter.eGenericType.generateCppType()/]> [else]
[eParameter.eGenericType.generateCppType()/] [/if]
[/template]

[**
 * Transformation Javatypes to C++
*/]
[template public transformType(anEClassifier : EClassifier) ? (oclIsUndefined())]
std::shared_ptr<std::any>
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EBoolean') or (name = 'EBooleanObject') or (name = 'Boolean'))]
bool
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'UnlimitedNatural' ))]
int
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EResource')]
int
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EInt') or (name = 'EIntegerObject') or (name = 'EBigInteger') or (name = 'Integer'))]
int
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EDouble') or (name = 'EDoubleObject')or (name = 'EBigDecimal') or (name = 'Real'))]
double
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'ELong') or (name = 'ELongObject') )]
long
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EByte') or (name = 'EByteObject') )]
char
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EByteArray'))]
char
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EChar') or (name = 'ECharacterObject') )]
char
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EFloat') or (name = 'EFloatObject') )]
float
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EEList')]
EList
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EDate')]
int
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EMap')]
std::map
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EJavaObject')]
std::shared_ptr<std::any>
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'ETreeIterator')]
EList
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EJavaClass')]
void * 
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EEnumerator') or (name = 'EDiagnosticChain'))]
std::shared_ptr<std::any>
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EString') or (name = 'String'))]
std::string
[/template]

[template public transformType(anEClassifier : EClassifier) ? (not oclIsKindOf(EDataType))]
[anEClassifier.ePackage.name/]::[anEClassifier.name/]
[/template]

[template public transformType(anEClassifier : EClassifier) ? (oclIsKindOf(EEnum))]
[anEClassifier.name/]
[/template]

[query public getDefaultValue(anEClassifier : EClassifier) : String = 
		if ((name = 'EBoolean' ) or 
			(name = 'EBooleanObject' ) or 
			(name = 'Boolean' )) 
		then getDefaultBooleanValue()
		else getDefaultValueCheckString()
		endif
/]
[query private getDefaultValueCheckString(anEClassifier : EClassifier) : String = 
		if ((name = 'EString') or 
			(name = 'String')) 
		then getDefaultStringValue() 
		else getDefaultValueCheckInteger()
		endif
/]
[query private getDefaultValueCheckInteger(anEClassifier : EClassifier) : String = 
		if ((name = 'UnlimitedNatural') or 
			(name = 'EResource') or 
			(name = 'EInt') or 
			(name = 'EIntegerObject') or 
			(name = 'EBigInteger') or 
			(name = 'Integer') or 
			(name = 'EDouble') or 
			(name = 'EDoubleObject') or 
			(name = 'EBigDecimal') or 
			(name = 'Real') or 
			(name = 'ELong') or 
			(name = 'ELongObject') or 
			(name = 'EFloat') or 
			(name = 'EFloatObject') or 
			(name = 'EDate')) 
		then getDefaultNumberValue() 
		else getDefaultValueCheckChar() 
		endif
/]
[query private getDefaultValueCheckChar(anEClassifier : EClassifier) : String = 
		if ((name = 'EByte') or 
			(name = 'EByteObject') or 
			(name = 'EByteArray') or 
			(name = 'EChar') or 
			(name = 'ECharacterObject')) 
		then getDefaultCharValue() 
		else getDefaultPointerValue()
		endif
/]

[query private getDefaultBooleanValue(anEClassifier : EClassifier) : String = 'false'/]
[query private getDefaultCharValue(anEClassifier : EClassifier) : String = '\'\''/]
[query private getDefaultNumberValue(anEClassifier : EClassifier) : String = '0'/]
[query private getDefaultPointerValue(anEClassifier : EClassifier) : String = 'nullptr'/]
[query private getDefaultStringValue(anEClassifier : EClassifier) : String = '""'/]

