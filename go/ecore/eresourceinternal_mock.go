// Code generated by mockery v1.0.0. DO NOT EDIT.

package ecore

import (
	io "io"
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// MockEResourceInternal is an autogenerated mock type for the EResourceInternal type
type MockEResourceInternal struct {
	mock.Mock
}

// Attached provides a mock function with given fields: object
func (_m *MockEResourceInternal) Attached(object EObject) {
	_m.Called(object)
}

// Detached provides a mock function with given fields: object
func (_m *MockEResourceInternal) Detached(object EObject) {
	_m.Called(object)
}

// DoLoad provides a mock function with given fields: rd
func (_m *MockEResourceInternal) DoLoad(rd io.Reader) {
	_m.Called(rd)
}

// DoSave provides a mock function with given fields: rd
func (_m *MockEResourceInternal) DoSave(rd io.Writer) {
	_m.Called(rd)
}

// DoUnload provides a mock function with given fields:
func (_m *MockEResourceInternal) DoUnload() {
	_m.Called()
}

// EAdapters provides a mock function with given fields:
func (_m *MockEResourceInternal) EAdapters() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// EDeliver provides a mock function with given fields:
func (_m *MockEResourceInternal) EDeliver() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ENotificationRequired provides a mock function with given fields:
func (_m *MockEResourceInternal) ENotificationRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ENotify provides a mock function with given fields: _a0
func (_m *MockEResourceInternal) ENotify(_a0 ENotification) {
	_m.Called(_a0)
}

// ESetDeliver provides a mock function with given fields: _a0
func (_m *MockEResourceInternal) ESetDeliver(_a0 bool) {
	_m.Called(_a0)
}

// GetAllContents provides a mock function with given fields:
func (_m *MockEResourceInternal) GetAllContents() EIterator {
	ret := _m.Called()

	var r0 EIterator
	if rf, ok := ret.Get(0).(func() EIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EIterator)
		}
	}

	return r0
}

// GetContents provides a mock function with given fields:
func (_m *MockEResourceInternal) GetContents() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEObject provides a mock function with given fields: _a0
func (_m *MockEResourceInternal) GetEObject(_a0 string) EObject {
	ret := _m.Called(_a0)

	var r0 EObject
	if rf, ok := ret.Get(0).(func(string) EObject); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EObject)
		}
	}

	return r0
}

// GetErrors provides a mock function with given fields:
func (_m *MockEResourceInternal) GetErrors() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetResourceSet provides a mock function with given fields:
func (_m *MockEResourceInternal) GetResourceSet() EResourceSet {
	ret := _m.Called()

	var r0 EResourceSet
	if rf, ok := ret.Get(0).(func() EResourceSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EResourceSet)
		}
	}

	return r0
}

// GetURI provides a mock function with given fields:
func (_m *MockEResourceInternal) GetURI() *url.URL {
	ret := _m.Called()

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// GetURIFragment provides a mock function with given fields: _a0
func (_m *MockEResourceInternal) GetURIFragment(_a0 EObject) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(EObject) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetWarnings provides a mock function with given fields:
func (_m *MockEResourceInternal) GetWarnings() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// IsLoaded provides a mock function with given fields:
func (_m *MockEResourceInternal) IsLoaded() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Load provides a mock function with given fields:
func (_m *MockEResourceInternal) Load() {
	_m.Called()
}

// LoadWithReader provides a mock function with given fields: r
func (_m *MockEResourceInternal) LoadWithReader(r io.Reader) {
	_m.Called(r)
}

// Save provides a mock function with given fields:
func (_m *MockEResourceInternal) Save() {
	_m.Called()
}

// SaveWithWriter provides a mock function with given fields: w
func (_m *MockEResourceInternal) SaveWithWriter(w io.Writer) {
	_m.Called(w)
}

// SetURI provides a mock function with given fields: _a0
func (_m *MockEResourceInternal) SetURI(_a0 *url.URL) {
	_m.Called(_a0)
}

// Unload provides a mock function with given fields:
func (_m *MockEResourceInternal) Unload() {
	_m.Called()
}

// basicSetLoaded provides a mock function with given fields: _a0, _a1
func (_m *MockEResourceInternal) basicSetLoaded(_a0 bool, _a1 ENotificationChain) ENotificationChain {
	ret := _m.Called(_a0, _a1)

	var r0 ENotificationChain
	if rf, ok := ret.Get(0).(func(bool, ENotificationChain) ENotificationChain); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotificationChain)
		}
	}

	return r0
}

// basicSetResourceSet provides a mock function with given fields: _a0, _a1
func (_m *MockEResourceInternal) basicSetResourceSet(_a0 EResourceSet, _a1 ENotificationChain) ENotificationChain {
	ret := _m.Called(_a0, _a1)

	var r0 ENotificationChain
	if rf, ok := ret.Get(0).(func(EResourceSet, ENotificationChain) ENotificationChain); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotificationChain)
		}
	}

	return r0
}
