// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2019 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func discardEAnnotation() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage

	_ = time.Now()
}

func TestEAnnotationSourceGet(t *testing.T) {
	obj := newEAnnotationImpl()
	obj.SetSource("Test String")
	assert.Equal(t, "Test String", obj.GetSource())
}

func TestEAnnotationSourceSet(t *testing.T) {
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj := newEAnnotationImpl()
	obj.EAdapters().Add(mockAdapter)
	obj.SetSource("Test String")
	mockAdapter.AssertExpectations(t)
}

func TestEAnnotationSourceEGet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		assert.Equal(t, obj.GetContents(), obj.EGetFromID(EANNOTATION__CONTENTS, false, false))
	}
	{
		assert.Equal(t, obj.GetDetails(), obj.EGetFromID(EANNOTATION__DETAILS, false, false))
	}
	{
		assert.Equal(t, obj.GetEModelElement(), obj.EGetFromID(EANNOTATION__EMODEL_ELEMENT, false, false))
	}
	{
		assert.Equal(t, obj.GetReferences(), obj.EGetFromID(EANNOTATION__REFERENCES, false, false))
	}
	{
		assert.Equal(t, obj.GetSource(), obj.EGetFromID(EANNOTATION__SOURCE, false, false))
	}
}

func TestEAnnotationSourceEIsSet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		assert.Equal(t, obj.contents != nil && obj.contents.Size() != 0, obj.EIsSetFromID(EANNOTATION__CONTENTS))
	}
	{
		assert.Equal(t, obj.details != nil && obj.details.Size() != 0, obj.EIsSetFromID(EANNOTATION__DETAILS))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.references != nil && obj.references.Size() != 0, obj.EIsSetFromID(EANNOTATION__REFERENCES))
	}
	{
		_ = obj
	}
}

func TestEAnnotationSourceEUnset(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		obj.EUnsetFromID(EANNOTATION__CONTENTS)
		obj.GetContents().Clear()
		assert.Equal(t, 0, obj.GetContents().Size())
	}
	{
		obj.EUnsetFromID(EANNOTATION__DETAILS)
		obj.GetDetails().Clear()
		assert.Equal(t, 0, obj.GetDetails().Size())
	}
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(EANNOTATION__REFERENCES)
		obj.GetReferences().Clear()
		assert.Equal(t, 0, obj.GetReferences().Size())
	}
	{
		_ = obj
	}
}

func TestEAnnotationSourceESet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__CONTENTS, elem)
		assert.Equal(t, 1, obj.GetContents().Size())
		assert.Equal(t, elem, obj.GetContents().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__DETAILS, elem)
		assert.Equal(t, 1, obj.GetDetails().Size())
		assert.Equal(t, elem, obj.GetDetails().Get(0))
	}
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__REFERENCES, elem)
		assert.Equal(t, 1, obj.GetReferences().Size())
		assert.Equal(t, elem, obj.GetReferences().Get(0))
	}
	{
		_ = obj
	}
}

func TestEAnnotationSourceEInverseAdd(t *testing.T) {
	{
	}
}

func TestEAnnotationSourceEInverseRemove(t *testing.T) {
	{
		obj := newEAnnotationImpl()
		mock := &MockEObject{}
		obj.GetContents().Add(mock)
		obj.EBasicInverseRemove(mock, EANNOTATION__CONTENTS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetContents().Size())
	}
	{
		obj := newEAnnotationImpl()
		mock := &MockEObject{}
		obj.GetDetails().Add(mock)
		obj.EBasicInverseRemove(mock, EANNOTATION__DETAILS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetDetails().Size())
	}
	{
	}
}

func TestEAnnotationDetailsGetList(t *testing.T) {
	obj := newEAnnotationImpl()
	assert.NotNil(t, obj.GetDetails())
}

func TestEAnnotationDetailsEGet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		assert.Equal(t, obj.GetContents(), obj.EGetFromID(EANNOTATION__CONTENTS, false, false))
	}
	{
		assert.Equal(t, obj.GetDetails(), obj.EGetFromID(EANNOTATION__DETAILS, false, false))
	}
	{
		assert.Equal(t, obj.GetEModelElement(), obj.EGetFromID(EANNOTATION__EMODEL_ELEMENT, false, false))
	}
	{
		assert.Equal(t, obj.GetReferences(), obj.EGetFromID(EANNOTATION__REFERENCES, false, false))
	}
	{
		assert.Equal(t, obj.GetSource(), obj.EGetFromID(EANNOTATION__SOURCE, false, false))
	}
}

func TestEAnnotationDetailsEIsSet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		assert.Equal(t, obj.contents != nil && obj.contents.Size() != 0, obj.EIsSetFromID(EANNOTATION__CONTENTS))
	}
	{
		assert.Equal(t, obj.details != nil && obj.details.Size() != 0, obj.EIsSetFromID(EANNOTATION__DETAILS))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.references != nil && obj.references.Size() != 0, obj.EIsSetFromID(EANNOTATION__REFERENCES))
	}
	{
		_ = obj
	}
}

func TestEAnnotationDetailsEUnset(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		obj.EUnsetFromID(EANNOTATION__CONTENTS)
		obj.GetContents().Clear()
		assert.Equal(t, 0, obj.GetContents().Size())
	}
	{
		obj.EUnsetFromID(EANNOTATION__DETAILS)
		obj.GetDetails().Clear()
		assert.Equal(t, 0, obj.GetDetails().Size())
	}
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(EANNOTATION__REFERENCES)
		obj.GetReferences().Clear()
		assert.Equal(t, 0, obj.GetReferences().Size())
	}
	{
		_ = obj
	}
}

func TestEAnnotationDetailsESet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__CONTENTS, elem)
		assert.Equal(t, 1, obj.GetContents().Size())
		assert.Equal(t, elem, obj.GetContents().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__DETAILS, elem)
		assert.Equal(t, 1, obj.GetDetails().Size())
		assert.Equal(t, elem, obj.GetDetails().Get(0))
	}
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__REFERENCES, elem)
		assert.Equal(t, 1, obj.GetReferences().Size())
		assert.Equal(t, elem, obj.GetReferences().Get(0))
	}
	{
		_ = obj
	}
}

func TestEAnnotationDetailsEInverseAdd(t *testing.T) {
	{
	}
}

func TestEAnnotationDetailsEInverseRemove(t *testing.T) {
	{
		obj := newEAnnotationImpl()
		mock := &MockEObject{}
		obj.GetContents().Add(mock)
		obj.EBasicInverseRemove(mock, EANNOTATION__CONTENTS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetContents().Size())
	}
	{
		obj := newEAnnotationImpl()
		mock := &MockEObject{}
		obj.GetDetails().Add(mock)
		obj.EBasicInverseRemove(mock, EANNOTATION__DETAILS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetDetails().Size())
	}
	{
	}
}

func TestEAnnotationContentsGetList(t *testing.T) {
	obj := newEAnnotationImpl()
	assert.NotNil(t, obj.GetContents())
}

func TestEAnnotationContentsEGet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		assert.Equal(t, obj.GetContents(), obj.EGetFromID(EANNOTATION__CONTENTS, false, false))
	}
	{
		assert.Equal(t, obj.GetDetails(), obj.EGetFromID(EANNOTATION__DETAILS, false, false))
	}
	{
		assert.Equal(t, obj.GetEModelElement(), obj.EGetFromID(EANNOTATION__EMODEL_ELEMENT, false, false))
	}
	{
		assert.Equal(t, obj.GetReferences(), obj.EGetFromID(EANNOTATION__REFERENCES, false, false))
	}
	{
		assert.Equal(t, obj.GetSource(), obj.EGetFromID(EANNOTATION__SOURCE, false, false))
	}
}

func TestEAnnotationContentsEIsSet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		assert.Equal(t, obj.contents != nil && obj.contents.Size() != 0, obj.EIsSetFromID(EANNOTATION__CONTENTS))
	}
	{
		assert.Equal(t, obj.details != nil && obj.details.Size() != 0, obj.EIsSetFromID(EANNOTATION__DETAILS))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.references != nil && obj.references.Size() != 0, obj.EIsSetFromID(EANNOTATION__REFERENCES))
	}
	{
		_ = obj
	}
}

func TestEAnnotationContentsEUnset(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		obj.EUnsetFromID(EANNOTATION__CONTENTS)
		obj.GetContents().Clear()
		assert.Equal(t, 0, obj.GetContents().Size())
	}
	{
		obj.EUnsetFromID(EANNOTATION__DETAILS)
		obj.GetDetails().Clear()
		assert.Equal(t, 0, obj.GetDetails().Size())
	}
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(EANNOTATION__REFERENCES)
		obj.GetReferences().Clear()
		assert.Equal(t, 0, obj.GetReferences().Size())
	}
	{
		_ = obj
	}
}

func TestEAnnotationContentsESet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__CONTENTS, elem)
		assert.Equal(t, 1, obj.GetContents().Size())
		assert.Equal(t, elem, obj.GetContents().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__DETAILS, elem)
		assert.Equal(t, 1, obj.GetDetails().Size())
		assert.Equal(t, elem, obj.GetDetails().Get(0))
	}
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__REFERENCES, elem)
		assert.Equal(t, 1, obj.GetReferences().Size())
		assert.Equal(t, elem, obj.GetReferences().Get(0))
	}
	{
		_ = obj
	}
}

func TestEAnnotationContentsEInverseAdd(t *testing.T) {
	{
	}
}

func TestEAnnotationContentsEInverseRemove(t *testing.T) {
	{
		obj := newEAnnotationImpl()
		mock := &MockEObject{}
		obj.GetContents().Add(mock)
		obj.EBasicInverseRemove(mock, EANNOTATION__CONTENTS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetContents().Size())
	}
	{
		obj := newEAnnotationImpl()
		mock := &MockEObject{}
		obj.GetDetails().Add(mock)
		obj.EBasicInverseRemove(mock, EANNOTATION__DETAILS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetDetails().Size())
	}
	{
	}
}

func TestEAnnotationReferencesGetList(t *testing.T) {
	obj := newEAnnotationImpl()
	assert.NotNil(t, obj.GetReferences())
}

func TestEAnnotationReferencesEGet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		assert.Equal(t, obj.GetContents(), obj.EGetFromID(EANNOTATION__CONTENTS, false, false))
	}
	{
		assert.Equal(t, obj.GetDetails(), obj.EGetFromID(EANNOTATION__DETAILS, false, false))
	}
	{
		assert.Equal(t, obj.GetEModelElement(), obj.EGetFromID(EANNOTATION__EMODEL_ELEMENT, false, false))
	}
	{
		assert.Equal(t, obj.GetReferences(), obj.EGetFromID(EANNOTATION__REFERENCES, false, false))
	}
	{
		assert.Equal(t, obj.GetSource(), obj.EGetFromID(EANNOTATION__SOURCE, false, false))
	}
}

func TestEAnnotationReferencesEIsSet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		assert.Equal(t, obj.contents != nil && obj.contents.Size() != 0, obj.EIsSetFromID(EANNOTATION__CONTENTS))
	}
	{
		assert.Equal(t, obj.details != nil && obj.details.Size() != 0, obj.EIsSetFromID(EANNOTATION__DETAILS))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.references != nil && obj.references.Size() != 0, obj.EIsSetFromID(EANNOTATION__REFERENCES))
	}
	{
		_ = obj
	}
}

func TestEAnnotationReferencesEUnset(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		obj.EUnsetFromID(EANNOTATION__CONTENTS)
		obj.GetContents().Clear()
		assert.Equal(t, 0, obj.GetContents().Size())
	}
	{
		obj.EUnsetFromID(EANNOTATION__DETAILS)
		obj.GetDetails().Clear()
		assert.Equal(t, 0, obj.GetDetails().Size())
	}
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(EANNOTATION__REFERENCES)
		obj.GetReferences().Clear()
		assert.Equal(t, 0, obj.GetReferences().Size())
	}
	{
		_ = obj
	}
}

func TestEAnnotationReferencesESet(t *testing.T) {
	obj := newEAnnotationImpl()
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__CONTENTS, elem)
		assert.Equal(t, 1, obj.GetContents().Size())
		assert.Equal(t, elem, obj.GetContents().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__DETAILS, elem)
		assert.Equal(t, 1, obj.GetDetails().Size())
		assert.Equal(t, elem, obj.GetDetails().Get(0))
	}
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EANNOTATION__REFERENCES, elem)
		assert.Equal(t, 1, obj.GetReferences().Size())
		assert.Equal(t, elem, obj.GetReferences().Get(0))
	}
	{
		_ = obj
	}
}

func TestEAnnotationReferencesEInverseAdd(t *testing.T) {
	{
	}
}

func TestEAnnotationReferencesEInverseRemove(t *testing.T) {
	{
		obj := newEAnnotationImpl()
		mock := &MockEObject{}
		obj.GetContents().Add(mock)
		obj.EBasicInverseRemove(mock, EANNOTATION__CONTENTS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetContents().Size())
	}
	{
		obj := newEAnnotationImpl()
		mock := &MockEObject{}
		obj.GetDetails().Add(mock)
		obj.EBasicInverseRemove(mock, EANNOTATION__DETAILS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetDetails().Size())
	}
	{
	}
}
