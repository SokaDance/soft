// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2019 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func discardEClass() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage

	_ = time.Now()
}

func TestEClassAbstractGet(t *testing.T) {
	obj := newEClassImpl()
	obj.SetAbstract(true)
	assert.Equal(t, true, obj.IsAbstract())
}

func TestEClassAbstractSet(t *testing.T) {
	obj := newEClassImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetAbstract(true)
	mockAdapter.AssertExpectations(t)
}

func TestEClassAbstractEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassAbstractEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassAbstractEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassAbstractEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassAbstractESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassAbstractEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassAbstractEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassInterfaceGet(t *testing.T) {
	obj := newEClassImpl()
	obj.SetInterface(true)
	assert.Equal(t, true, obj.IsInterface())
}

func TestEClassInterfaceSet(t *testing.T) {
	obj := newEClassImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetInterface(true)
	mockAdapter.AssertExpectations(t)
}

func TestEClassInterfaceEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassInterfaceEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassInterfaceEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassInterfaceEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassInterfaceESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassInterfaceEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassInterfaceEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEStructuralFeaturesGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetEStructuralFeatures())
}

func TestEClassEStructuralFeaturesEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEStructuralFeaturesEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEStructuralFeaturesEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEStructuralFeaturesEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEStructuralFeaturesESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEStructuralFeaturesEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEStructuralFeaturesEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAttributesGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetEAttributes())
}

func TestEClassEAttributesEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEAttributesEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEAttributesEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEAttributesEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEAttributesESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEAttributesEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAttributesEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEReferencesGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetEReferences())
}

func TestEClassEReferencesEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEReferencesEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEReferencesEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEReferencesEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEReferencesESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEReferencesEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEReferencesEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassESuperTypesGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetESuperTypes())
}

func TestEClassESuperTypesEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassESuperTypesEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassESuperTypesEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassESuperTypesEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassESuperTypesESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassESuperTypesEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassESuperTypesEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEOperationsGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetEOperations())
}

func TestEClassEOperationsEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEOperationsEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEOperationsEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEOperationsEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEOperationsESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEOperationsEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEOperationsEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEContainmentsGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetEContainments())
}

func TestEClassEContainmentsEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEContainmentsEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEContainmentsEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEContainmentsEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEContainmentsESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEContainmentsEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEContainmentsEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassECrossReferencesGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetECrossReferences())
}

func TestEClassECrossReferencesEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassECrossReferencesEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassECrossReferencesEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassECrossReferencesEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassECrossReferencesESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassECrossReferencesEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassECrossReferencesEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllAttributesGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetEAllAttributes())
}

func TestEClassEAllAttributesEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEAllAttributesEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEAllAttributesEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEAllAttributesEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEAllAttributesESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEAllAttributesEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllAttributesEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllReferencesGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetEAllReferences())
}

func TestEClassEAllReferencesEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEAllReferencesEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEAllReferencesEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEAllReferencesEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEAllReferencesESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEAllReferencesEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllReferencesEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllContainmentsGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetEAllContainments())
}

func TestEClassEAllContainmentsEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEAllContainmentsEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEAllContainmentsEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEAllContainmentsEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEAllContainmentsESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEAllContainmentsEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllContainmentsEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllOperationsGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetEAllOperations())
}

func TestEClassEAllOperationsEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEAllOperationsEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEAllOperationsEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEAllOperationsEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEAllOperationsESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEAllOperationsEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllOperationsEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllStructuralFeaturesGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetEAllStructuralFeatures())
}

func TestEClassEAllStructuralFeaturesEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEAllStructuralFeaturesEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEAllStructuralFeaturesEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEAllStructuralFeaturesEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEAllStructuralFeaturesESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEAllStructuralFeaturesEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllStructuralFeaturesEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllSuperTypesGetList(t *testing.T) {
	obj := newEClassImpl()
	assert.NotNil(t, obj.GetEAllSuperTypes())
}

func TestEClassEAllSuperTypesEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEAllSuperTypesEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEAllSuperTypesEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEAllSuperTypesEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEAllSuperTypesESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEAllSuperTypesEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEAllSuperTypesEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEIDAttributeEGet(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Equal(t, obj.IsAbstract(), obj.EGetFromID(ECLASS__ABSTRACT, false, false))
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEOperations(), obj.EGetFromID(ECLASS__EOPERATIONS, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetEStructuralFeatures(), obj.EGetFromID(ECLASS__ESTRUCTURAL_FEATURES, false, false))
	}
	{
		assert.Equal(t, obj.GetESuperTypes(), obj.EGetFromID(ECLASS__ESUPER_TYPES, false, false))
	}
	{
		assert.Equal(t, obj.IsInterface(), obj.EGetFromID(ECLASS__INTERFACE, false, false))
	}
}

func TestEClassEIDAttributeEInvoke(t *testing.T) {
	obj := newEClassImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_EOPERATION_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_EINT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_COUNT, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OPERATION_ID_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__GET_OVERRIDE_EOPERATION, nil) })
	}
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ECLASS__IS_SUPER_TYPE_OF_ECLASS, nil) })
	}
}

func TestEClassEIDAttributeEIsSet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eAllAttributes != nil && obj.eAllAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_ATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eAllContainments != nil && obj.eAllContainments.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_CONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eAllOperations != nil && obj.eAllOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_OPERATIONS))
	}
	{
		assert.Equal(t, obj.eAllReferences != nil && obj.eAllReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_REFERENCES))
	}
	{
		assert.Equal(t, obj.eAllStructuralFeatures != nil && obj.eAllStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_STRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eAllSuperTypes != nil && obj.eAllSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__EALL_SUPER_TYPES))
	}
	{
		assert.Equal(t, obj.eAttributes != nil && obj.eAttributes.Size() != 0, obj.EIsSetFromID(ECLASS__EATTRIBUTES))
	}
	{
		assert.Equal(t, obj.eContainments != nil && obj.eContainments.Size() != 0, obj.EIsSetFromID(ECLASS__ECONTAINMENTS))
	}
	{
		assert.Equal(t, obj.eCrossReferences != nil && obj.eCrossReferences.Size() != 0, obj.EIsSetFromID(ECLASS__ECROSS_REFERENCES))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eOperations != nil && obj.eOperations.Size() != 0, obj.EIsSetFromID(ECLASS__EOPERATIONS))
	}
	{
		assert.Equal(t, obj.eReferences != nil && obj.eReferences.Size() != 0, obj.EIsSetFromID(ECLASS__EREFERENCES))
	}
	{
		assert.Equal(t, obj.eStructuralFeatures != nil && obj.eStructuralFeatures.Size() != 0, obj.EIsSetFromID(ECLASS__ESTRUCTURAL_FEATURES))
	}
	{
		assert.Equal(t, obj.eSuperTypes != nil && obj.eSuperTypes.Size() != 0, obj.EIsSetFromID(ECLASS__ESUPER_TYPES))
	}
	{
		_ = obj
	}
}

func TestEClassEIDAttributeEUnset(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(ECLASS__EOPERATIONS)
		obj.GetEOperations().Clear()
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESTRUCTURAL_FEATURES)
		obj.GetEStructuralFeatures().Clear()
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
	{
		obj.EUnsetFromID(ECLASS__ESUPER_TYPES)
		obj.GetESuperTypes().Clear()
		assert.Equal(t, 0, obj.GetESuperTypes().Size())
	}
	{
		_ = obj
	}
}

func TestEClassEIDAttributeESet(t *testing.T) {
	obj := newEClassImpl()
	{
		_ = obj
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__EOPERATIONS, elem)
		assert.Equal(t, 1, obj.GetEOperations().Size())
		assert.Equal(t, elem, obj.GetEOperations().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESTRUCTURAL_FEATURES, elem)
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
		assert.Equal(t, elem, obj.GetEStructuralFeatures().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ECLASS__ESUPER_TYPES, elem)
		assert.Equal(t, 1, obj.GetESuperTypes().Size())
		assert.Equal(t, elem, obj.GetESuperTypes().Get(0))
	}
	{
		_ = obj
	}
}

func TestEClassEIDAttributeEInverseAdd(t *testing.T) {
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		obj.EBasicInverseAdd(&MockEObject{}, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassEIDAttributeEInverseRemove(t *testing.T) {
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEOperations().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__EOPERATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEOperations().Size())
	}
	{
		obj := newEClassImpl()
		mock := &MockEObject{}
		obj.GetEStructuralFeatures().Add(mock)
		obj.EBasicInverseRemove(mock, ECLASS__ESTRUCTURAL_FEATURES, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEStructuralFeatures().Size())
	}
}

func TestEClassIsSuperTypeOfOperation(t *testing.T) {
	obj := newEClassImpl()
	assert.Panics(t, func() { obj.IsSuperTypeOf(newEClassImpl()) })
}
func TestEClassGetFeatureCountOperation(t *testing.T) {
	obj := newEClassImpl()
	assert.Panics(t, func() { obj.GetFeatureCount() })
}
func TestEClassGetEStructuralFeatureOperation(t *testing.T) {
	obj := newEClassImpl()
	assert.Panics(t, func() { obj.GetEStructuralFeature(45) })
}
func TestEClassGetEStructuralFeatureFromStringOperation(t *testing.T) {
	obj := newEClassImpl()
	assert.Panics(t, func() { obj.GetEStructuralFeatureFromString("Test String") })
}
func TestEClassGetFeatureIDOperation(t *testing.T) {
	obj := newEClassImpl()
	assert.Panics(t, func() { obj.GetFeatureID(newEStructuralFeatureImpl()) })
}
func TestEClassGetOperationCountOperation(t *testing.T) {
	obj := newEClassImpl()
	assert.Panics(t, func() { obj.GetOperationCount() })
}
func TestEClassGetEOperationOperation(t *testing.T) {
	obj := newEClassImpl()
	assert.Panics(t, func() { obj.GetEOperation(45) })
}
func TestEClassGetOperationIDOperation(t *testing.T) {
	obj := newEClassImpl()
	assert.Panics(t, func() { obj.GetOperationID(newEOperationImpl()) })
}
func TestEClassGetOverrideOperation(t *testing.T) {
	obj := newEClassImpl()
	assert.Panics(t, func() { obj.GetOverride(newEOperationImpl()) })
}
func TestEClassGetFeatureTypeOperation(t *testing.T) {
	obj := newEClassImpl()
	assert.Panics(t, func() { obj.GetFeatureType(newEStructuralFeatureImpl()) })
}
