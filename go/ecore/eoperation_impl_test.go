// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2019 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func discardEOperation() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage

	_ = time.Now()
}

func TestEOperationEParametersGetList(t *testing.T) {
	obj := newEOperationImpl()
	assert.NotNil(t, obj.GetEParameters())
}

func TestEOperationEParametersEGet(t *testing.T) {
	obj := newEOperationImpl()
	{
		assert.Equal(t, obj.GetEContainingClass(), obj.EGetFromID(EOPERATION__ECONTAINING_CLASS, false, false))
	}
	{
		assert.Equal(t, obj.GetEExceptions(), obj.EGetFromID(EOPERATION__EEXCEPTIONS, false, false))
	}
	{
		assert.Equal(t, obj.GetEParameters(), obj.EGetFromID(EOPERATION__EPARAMETERS, false, false))
	}
	{
		assert.Equal(t, obj.GetOperationID(), obj.EGetFromID(EOPERATION__OPERATION_ID, false, false))
	}
}

func TestEOperationEParametersEInvoke(t *testing.T) {
	obj := newEOperationImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(EOPERATION__IS_OVERRIDE_OF_EOPERATION, nil) })
	}
}

func TestEOperationEParametersEIsSet(t *testing.T) {
	obj := newEOperationImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eExceptions != nil && obj.eExceptions.Size() != 0, obj.EIsSetFromID(EOPERATION__EEXCEPTIONS))
	}
	{
		assert.Equal(t, obj.eParameters != nil && obj.eParameters.Size() != 0, obj.EIsSetFromID(EOPERATION__EPARAMETERS))
	}
	{
		_ = obj
	}
}

func TestEOperationEParametersEUnset(t *testing.T) {
	obj := newEOperationImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(EOPERATION__EPARAMETERS)
		obj.GetEParameters().Clear()
		assert.Equal(t, 0, obj.GetEParameters().Size())
	}
	{
		_ = obj
	}
}

func TestEOperationEParametersESet(t *testing.T) {
	obj := newEOperationImpl()
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EOPERATION__EEXCEPTIONS, elem)
		assert.Equal(t, 1, obj.GetEExceptions().Size())
		assert.Equal(t, elem, obj.GetEExceptions().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EOPERATION__EPARAMETERS, elem)
		assert.Equal(t, 1, obj.GetEParameters().Size())
		assert.Equal(t, elem, obj.GetEParameters().Get(0))
	}
	{
		_ = obj
	}
}

func TestEOperationEParametersEInverseAdd(t *testing.T) {
	{
	}
	{
		obj := newEOperationImpl()
		obj.EBasicInverseAdd(&MockEObject{}, EOPERATION__EPARAMETERS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEParameters().Size())
	}
}

func TestEOperationEParametersEInverseRemove(t *testing.T) {
	{
	}
	{
		obj := newEOperationImpl()
		mock := &MockEObject{}
		obj.GetEParameters().Add(mock)
		obj.EBasicInverseRemove(mock, EOPERATION__EPARAMETERS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEParameters().Size())
	}
}

func TestEOperationEExceptionsGetList(t *testing.T) {
	obj := newEOperationImpl()
	assert.NotNil(t, obj.GetEExceptions())
}

func TestEOperationEExceptionsEGet(t *testing.T) {
	obj := newEOperationImpl()
	{
		assert.Equal(t, obj.GetEContainingClass(), obj.EGetFromID(EOPERATION__ECONTAINING_CLASS, false, false))
	}
	{
		assert.Equal(t, obj.GetEExceptions(), obj.EGetFromID(EOPERATION__EEXCEPTIONS, false, false))
	}
	{
		assert.Equal(t, obj.GetEParameters(), obj.EGetFromID(EOPERATION__EPARAMETERS, false, false))
	}
	{
		assert.Equal(t, obj.GetOperationID(), obj.EGetFromID(EOPERATION__OPERATION_ID, false, false))
	}
}

func TestEOperationEExceptionsEInvoke(t *testing.T) {
	obj := newEOperationImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(EOPERATION__IS_OVERRIDE_OF_EOPERATION, nil) })
	}
}

func TestEOperationEExceptionsEIsSet(t *testing.T) {
	obj := newEOperationImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eExceptions != nil && obj.eExceptions.Size() != 0, obj.EIsSetFromID(EOPERATION__EEXCEPTIONS))
	}
	{
		assert.Equal(t, obj.eParameters != nil && obj.eParameters.Size() != 0, obj.EIsSetFromID(EOPERATION__EPARAMETERS))
	}
	{
		_ = obj
	}
}

func TestEOperationEExceptionsEUnset(t *testing.T) {
	obj := newEOperationImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(EOPERATION__EPARAMETERS)
		obj.GetEParameters().Clear()
		assert.Equal(t, 0, obj.GetEParameters().Size())
	}
	{
		_ = obj
	}
}

func TestEOperationEExceptionsESet(t *testing.T) {
	obj := newEOperationImpl()
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EOPERATION__EEXCEPTIONS, elem)
		assert.Equal(t, 1, obj.GetEExceptions().Size())
		assert.Equal(t, elem, obj.GetEExceptions().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EOPERATION__EPARAMETERS, elem)
		assert.Equal(t, 1, obj.GetEParameters().Size())
		assert.Equal(t, elem, obj.GetEParameters().Get(0))
	}
	{
		_ = obj
	}
}

func TestEOperationEExceptionsEInverseAdd(t *testing.T) {
	{
	}
	{
		obj := newEOperationImpl()
		obj.EBasicInverseAdd(&MockEObject{}, EOPERATION__EPARAMETERS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEParameters().Size())
	}
}

func TestEOperationEExceptionsEInverseRemove(t *testing.T) {
	{
	}
	{
		obj := newEOperationImpl()
		mock := &MockEObject{}
		obj.GetEParameters().Add(mock)
		obj.EBasicInverseRemove(mock, EOPERATION__EPARAMETERS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEParameters().Size())
	}
}

func TestEOperationOperationIDGet(t *testing.T) {
	obj := newEOperationImpl()
	obj.SetOperationID(45)
	assert.Equal(t, 45, obj.GetOperationID())
}

func TestEOperationOperationIDSet(t *testing.T) {
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj := newEOperationImpl()
	obj.EAdapters().Add(mockAdapter)
	obj.SetOperationID(45)
	mockAdapter.AssertExpectations(t)
}

func TestEOperationOperationIDEGet(t *testing.T) {
	obj := newEOperationImpl()
	{
		assert.Equal(t, obj.GetEContainingClass(), obj.EGetFromID(EOPERATION__ECONTAINING_CLASS, false, false))
	}
	{
		assert.Equal(t, obj.GetEExceptions(), obj.EGetFromID(EOPERATION__EEXCEPTIONS, false, false))
	}
	{
		assert.Equal(t, obj.GetEParameters(), obj.EGetFromID(EOPERATION__EPARAMETERS, false, false))
	}
	{
		assert.Equal(t, obj.GetOperationID(), obj.EGetFromID(EOPERATION__OPERATION_ID, false, false))
	}
}

func TestEOperationOperationIDEInvoke(t *testing.T) {
	obj := newEOperationImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(EOPERATION__IS_OVERRIDE_OF_EOPERATION, nil) })
	}
}

func TestEOperationOperationIDEIsSet(t *testing.T) {
	obj := newEOperationImpl()
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.eExceptions != nil && obj.eExceptions.Size() != 0, obj.EIsSetFromID(EOPERATION__EEXCEPTIONS))
	}
	{
		assert.Equal(t, obj.eParameters != nil && obj.eParameters.Size() != 0, obj.EIsSetFromID(EOPERATION__EPARAMETERS))
	}
	{
		_ = obj
	}
}

func TestEOperationOperationIDEUnset(t *testing.T) {
	obj := newEOperationImpl()
	{
		_ = obj
	}
	{
		obj.EUnsetFromID(EOPERATION__EPARAMETERS)
		obj.GetEParameters().Clear()
		assert.Equal(t, 0, obj.GetEParameters().Size())
	}
	{
		_ = obj
	}
}

func TestEOperationOperationIDESet(t *testing.T) {
	obj := newEOperationImpl()
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EOPERATION__EEXCEPTIONS, elem)
		assert.Equal(t, 1, obj.GetEExceptions().Size())
		assert.Equal(t, elem, obj.GetEExceptions().Get(0))
	}
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EOPERATION__EPARAMETERS, elem)
		assert.Equal(t, 1, obj.GetEParameters().Size())
		assert.Equal(t, elem, obj.GetEParameters().Get(0))
	}
	{
		_ = obj
	}
}

func TestEOperationOperationIDEInverseAdd(t *testing.T) {
	{
	}
	{
		obj := newEOperationImpl()
		obj.EBasicInverseAdd(&MockEObject{}, EOPERATION__EPARAMETERS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEParameters().Size())
	}
}

func TestEOperationOperationIDEInverseRemove(t *testing.T) {
	{
	}
	{
		obj := newEOperationImpl()
		mock := &MockEObject{}
		obj.GetEParameters().Add(mock)
		obj.EBasicInverseRemove(mock, EOPERATION__EPARAMETERS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEParameters().Size())
	}
}

func TestEOperationIsOverrideOfOperation(t *testing.T) {
	obj := newEOperationImpl()
	assert.Panics(t, func() { obj.IsOverrideOf(newEOperationImpl()) })
}
