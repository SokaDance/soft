// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2019 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func discardEModelElement() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage

	_ = time.Now()
}

func TestEModelElementEAnnotationsGetList(t *testing.T) {
	obj := newEModelElementImpl()
	assert.NotNil(t, obj.GetEAnnotations())
}

func TestEModelElementEAnnotationsEGet(t *testing.T) {
	obj := newEModelElementImpl()
	{
		assert.Equal(t, obj.GetEAnnotations(), obj.EGetFromID(EMODEL_ELEMENT__EANNOTATIONS, false, false))
	}
}

func TestEModelElementEAnnotationsEInvoke(t *testing.T) {
	obj := newEModelElementImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(EMODEL_ELEMENT__GET_EANNOTATION_ESTRING, nil) })
	}
}

func TestEModelElementEAnnotationsEIsSet(t *testing.T) {
	obj := newEModelElementImpl()
	{
		assert.Equal(t, obj.eAnnotations != nil && obj.eAnnotations.Size() != 0, obj.EIsSetFromID(EMODEL_ELEMENT__EANNOTATIONS))
	}
}

func TestEModelElementEAnnotationsEUnset(t *testing.T) {
	obj := newEModelElementImpl()
	{
		obj.EUnsetFromID(EMODEL_ELEMENT__EANNOTATIONS)
		obj.GetEAnnotations().Clear()
		assert.Equal(t, 0, obj.GetEAnnotations().Size())
	}
}

func TestEModelElementEAnnotationsESet(t *testing.T) {
	obj := newEModelElementImpl()
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(EMODEL_ELEMENT__EANNOTATIONS, elem)
		assert.Equal(t, 1, obj.GetEAnnotations().Size())
		assert.Equal(t, elem, obj.GetEAnnotations().Get(0))
	}
}

func TestEModelElementEAnnotationsEInverseAdd(t *testing.T) {
	{
		obj := newEModelElementImpl()
		obj.EBasicInverseAdd(&MockEObject{}, EMODEL_ELEMENT__EANNOTATIONS, &MockENotificationChain{})
		assert.Equal(t, 1, obj.GetEAnnotations().Size())
	}
}

func TestEModelElementEAnnotationsEInverseRemove(t *testing.T) {
	{
		obj := newEModelElementImpl()
		mock := &MockEObject{}
		obj.GetEAnnotations().Add(mock)
		obj.EBasicInverseRemove(mock, EMODEL_ELEMENT__EANNOTATIONS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEAnnotations().Size())
	}
}

func TestEModelElementGetEAnnotationOperation(t *testing.T) {
	obj := newEModelElementImpl()
	assert.Panics(t, func() { obj.GetEAnnotation("Test String") })
}
