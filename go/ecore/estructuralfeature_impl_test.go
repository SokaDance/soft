// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2019 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func discardEStructuralFeature() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage

	_ = time.Now()
}

func TestEStructuralFeatureChangeableGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	obj.SetChangeable(true)
	assert.Equal(t, true, obj.IsChangeable())
}

func TestEStructuralFeatureChangeableSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetChangeable(true)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureChangeableEGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Equal(t, obj.IsChangeable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__CHANGEABLE, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetDefaultValueLiteral(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, false, false))
	}
	{
		assert.Equal(t, obj.IsDerived(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DERIVED, false, false))
	}
	{
		assert.Equal(t, obj.GetEContainingClass(), obj.EGetFromID(ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, false, false))
	}
	{
		assert.Equal(t, obj.GetFeatureID(), obj.EGetFromID(ESTRUCTURAL_FEATURE__FEATURE_ID, false, false))
	}
	{
		assert.Equal(t, obj.IsTransient(), obj.EGetFromID(ESTRUCTURAL_FEATURE__TRANSIENT, false, false))
	}
	{
		assert.Equal(t, obj.IsUnsettable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__UNSETTABLE, false, false))
	}
	{
		assert.Equal(t, obj.IsVolatile(), obj.EGetFromID(ESTRUCTURAL_FEATURE__VOLATILE, false, false))
	}
}

func TestEStructuralFeatureChangeableEInvoke(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ESTRUCTURAL_FEATURE__GET_CONTAINER_CLASS, nil) })
	}
}

func TestEStructuralFeatureChangeableEIsSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureChangeableEUnset(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureChangeableESet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureChangeableEInverseAdd(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureChangeableEInverseRemove(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureVolatileGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	obj.SetVolatile(true)
	assert.Equal(t, true, obj.IsVolatile())
}

func TestEStructuralFeatureVolatileSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetVolatile(true)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureVolatileEGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Equal(t, obj.IsChangeable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__CHANGEABLE, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetDefaultValueLiteral(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, false, false))
	}
	{
		assert.Equal(t, obj.IsDerived(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DERIVED, false, false))
	}
	{
		assert.Equal(t, obj.GetEContainingClass(), obj.EGetFromID(ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, false, false))
	}
	{
		assert.Equal(t, obj.GetFeatureID(), obj.EGetFromID(ESTRUCTURAL_FEATURE__FEATURE_ID, false, false))
	}
	{
		assert.Equal(t, obj.IsTransient(), obj.EGetFromID(ESTRUCTURAL_FEATURE__TRANSIENT, false, false))
	}
	{
		assert.Equal(t, obj.IsUnsettable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__UNSETTABLE, false, false))
	}
	{
		assert.Equal(t, obj.IsVolatile(), obj.EGetFromID(ESTRUCTURAL_FEATURE__VOLATILE, false, false))
	}
}

func TestEStructuralFeatureVolatileEInvoke(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ESTRUCTURAL_FEATURE__GET_CONTAINER_CLASS, nil) })
	}
}

func TestEStructuralFeatureVolatileEIsSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureVolatileEUnset(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureVolatileESet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureVolatileEInverseAdd(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureVolatileEInverseRemove(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureTransientGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	obj.SetTransient(true)
	assert.Equal(t, true, obj.IsTransient())
}

func TestEStructuralFeatureTransientSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetTransient(true)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureTransientEGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Equal(t, obj.IsChangeable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__CHANGEABLE, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetDefaultValueLiteral(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, false, false))
	}
	{
		assert.Equal(t, obj.IsDerived(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DERIVED, false, false))
	}
	{
		assert.Equal(t, obj.GetEContainingClass(), obj.EGetFromID(ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, false, false))
	}
	{
		assert.Equal(t, obj.GetFeatureID(), obj.EGetFromID(ESTRUCTURAL_FEATURE__FEATURE_ID, false, false))
	}
	{
		assert.Equal(t, obj.IsTransient(), obj.EGetFromID(ESTRUCTURAL_FEATURE__TRANSIENT, false, false))
	}
	{
		assert.Equal(t, obj.IsUnsettable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__UNSETTABLE, false, false))
	}
	{
		assert.Equal(t, obj.IsVolatile(), obj.EGetFromID(ESTRUCTURAL_FEATURE__VOLATILE, false, false))
	}
}

func TestEStructuralFeatureTransientEInvoke(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ESTRUCTURAL_FEATURE__GET_CONTAINER_CLASS, nil) })
	}
}

func TestEStructuralFeatureTransientEIsSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureTransientEUnset(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureTransientESet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureTransientEInverseAdd(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureTransientEInverseRemove(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureDefaultValueLiteralGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	obj.SetDefaultValueLiteral("Test String")
	assert.Equal(t, "Test String", obj.GetDefaultValueLiteral())
}

func TestEStructuralFeatureDefaultValueLiteralSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetDefaultValueLiteral("Test String")
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureDefaultValueLiteralEGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Equal(t, obj.IsChangeable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__CHANGEABLE, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetDefaultValueLiteral(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, false, false))
	}
	{
		assert.Equal(t, obj.IsDerived(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DERIVED, false, false))
	}
	{
		assert.Equal(t, obj.GetEContainingClass(), obj.EGetFromID(ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, false, false))
	}
	{
		assert.Equal(t, obj.GetFeatureID(), obj.EGetFromID(ESTRUCTURAL_FEATURE__FEATURE_ID, false, false))
	}
	{
		assert.Equal(t, obj.IsTransient(), obj.EGetFromID(ESTRUCTURAL_FEATURE__TRANSIENT, false, false))
	}
	{
		assert.Equal(t, obj.IsUnsettable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__UNSETTABLE, false, false))
	}
	{
		assert.Equal(t, obj.IsVolatile(), obj.EGetFromID(ESTRUCTURAL_FEATURE__VOLATILE, false, false))
	}
}

func TestEStructuralFeatureDefaultValueLiteralEInvoke(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ESTRUCTURAL_FEATURE__GET_CONTAINER_CLASS, nil) })
	}
}

func TestEStructuralFeatureDefaultValueLiteralEIsSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureDefaultValueLiteralEUnset(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureDefaultValueLiteralESet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureDefaultValueLiteralEInverseAdd(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureDefaultValueLiteralEInverseRemove(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureUnsettableGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	obj.SetUnsettable(true)
	assert.Equal(t, true, obj.IsUnsettable())
}

func TestEStructuralFeatureUnsettableSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetUnsettable(true)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureUnsettableEGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Equal(t, obj.IsChangeable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__CHANGEABLE, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetDefaultValueLiteral(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, false, false))
	}
	{
		assert.Equal(t, obj.IsDerived(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DERIVED, false, false))
	}
	{
		assert.Equal(t, obj.GetEContainingClass(), obj.EGetFromID(ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, false, false))
	}
	{
		assert.Equal(t, obj.GetFeatureID(), obj.EGetFromID(ESTRUCTURAL_FEATURE__FEATURE_ID, false, false))
	}
	{
		assert.Equal(t, obj.IsTransient(), obj.EGetFromID(ESTRUCTURAL_FEATURE__TRANSIENT, false, false))
	}
	{
		assert.Equal(t, obj.IsUnsettable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__UNSETTABLE, false, false))
	}
	{
		assert.Equal(t, obj.IsVolatile(), obj.EGetFromID(ESTRUCTURAL_FEATURE__VOLATILE, false, false))
	}
}

func TestEStructuralFeatureUnsettableEInvoke(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ESTRUCTURAL_FEATURE__GET_CONTAINER_CLASS, nil) })
	}
}

func TestEStructuralFeatureUnsettableEIsSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureUnsettableEUnset(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureUnsettableESet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureUnsettableEInverseAdd(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureUnsettableEInverseRemove(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureDerivedGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	obj.SetDerived(true)
	assert.Equal(t, true, obj.IsDerived())
}

func TestEStructuralFeatureDerivedSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetDerived(true)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureDerivedEGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Equal(t, obj.IsChangeable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__CHANGEABLE, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetDefaultValueLiteral(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, false, false))
	}
	{
		assert.Equal(t, obj.IsDerived(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DERIVED, false, false))
	}
	{
		assert.Equal(t, obj.GetEContainingClass(), obj.EGetFromID(ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, false, false))
	}
	{
		assert.Equal(t, obj.GetFeatureID(), obj.EGetFromID(ESTRUCTURAL_FEATURE__FEATURE_ID, false, false))
	}
	{
		assert.Equal(t, obj.IsTransient(), obj.EGetFromID(ESTRUCTURAL_FEATURE__TRANSIENT, false, false))
	}
	{
		assert.Equal(t, obj.IsUnsettable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__UNSETTABLE, false, false))
	}
	{
		assert.Equal(t, obj.IsVolatile(), obj.EGetFromID(ESTRUCTURAL_FEATURE__VOLATILE, false, false))
	}
}

func TestEStructuralFeatureDerivedEInvoke(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ESTRUCTURAL_FEATURE__GET_CONTAINER_CLASS, nil) })
	}
}

func TestEStructuralFeatureDerivedEIsSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureDerivedEUnset(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureDerivedESet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureDerivedEInverseAdd(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureDerivedEInverseRemove(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureFeatureIDGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	obj.SetFeatureID(45)
	assert.Equal(t, 45, obj.GetFeatureID())
}

func TestEStructuralFeatureFeatureIDSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("SetTarget", obj).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj.EAdapters().Add(mockAdapter)
	obj.SetFeatureID(45)
	mockAdapter.AssertExpectations(t)
}

func TestEStructuralFeatureFeatureIDEGet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Equal(t, obj.IsChangeable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__CHANGEABLE, false, false))
	}
	{
		_ = obj
	}
	{
		assert.Equal(t, obj.GetDefaultValueLiteral(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, false, false))
	}
	{
		assert.Equal(t, obj.IsDerived(), obj.EGetFromID(ESTRUCTURAL_FEATURE__DERIVED, false, false))
	}
	{
		assert.Equal(t, obj.GetEContainingClass(), obj.EGetFromID(ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, false, false))
	}
	{
		assert.Equal(t, obj.GetFeatureID(), obj.EGetFromID(ESTRUCTURAL_FEATURE__FEATURE_ID, false, false))
	}
	{
		assert.Equal(t, obj.IsTransient(), obj.EGetFromID(ESTRUCTURAL_FEATURE__TRANSIENT, false, false))
	}
	{
		assert.Equal(t, obj.IsUnsettable(), obj.EGetFromID(ESTRUCTURAL_FEATURE__UNSETTABLE, false, false))
	}
	{
		assert.Equal(t, obj.IsVolatile(), obj.EGetFromID(ESTRUCTURAL_FEATURE__VOLATILE, false, false))
	}
}

func TestEStructuralFeatureFeatureIDEInvoke(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		assert.Panics(t, func() { obj.EInvokeFromID(ESTRUCTURAL_FEATURE__GET_CONTAINER_CLASS, nil) })
	}
}

func TestEStructuralFeatureFeatureIDEIsSet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureFeatureIDEUnset(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureFeatureIDESet(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStructuralFeatureFeatureIDEInverseAdd(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureFeatureIDEInverseRemove(t *testing.T) {
	{
	}
}

func TestEStructuralFeatureGetContainerClassOperation(t *testing.T) {
	obj := newEStructuralFeatureImpl()
	assert.Panics(t, func() { obj.GetContainerClass() })
}
