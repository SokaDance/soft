// Code generated by mockery v1.0.0. DO NOT EDIT.

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEcoreFactory is an autogenerated mock type for the EcoreFactory type
type MockEcoreFactory struct {
	mock.Mock
}

// CreateEAnnotation provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEAnnotation() EAnnotation {
	ret := _m.Called()

	var r0 EAnnotation
	if rf, ok := ret.Get(0).(func() EAnnotation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAnnotation)
		}
	}

	return r0
}

// CreateEAnnotationFromContainer provides a mock function with given fields: eContainer
func (_m *MockEcoreFactory) CreateEAnnotationFromContainer(eContainer EModelElement) EAnnotation {
	ret := _m.Called(eContainer)

	var r0 EAnnotation
	if rf, ok := ret.Get(0).(func(EModelElement) EAnnotation); ok {
		r0 = rf(eContainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAnnotation)
		}
	}

	return r0
}

// CreateEAttribute provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEAttribute() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// CreateEAttributeFromContainer provides a mock function with given fields: eContainer
func (_m *MockEcoreFactory) CreateEAttributeFromContainer(eContainer EClass) EAttribute {
	ret := _m.Called(eContainer)

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func(EClass) EAttribute); ok {
		r0 = rf(eContainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// CreateEAttributeFromContainerAndClassID provides a mock function with given fields: eContainer, classID
func (_m *MockEcoreFactory) CreateEAttributeFromContainerAndClassID(eContainer EClass, classID int) EAttribute {
	ret := _m.Called(eContainer, classID)

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func(EClass, int) EAttribute); ok {
		r0 = rf(eContainer, classID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// CreateEClass provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEClass() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// CreateEClassFromContainer provides a mock function with given fields: eContainer
func (_m *MockEcoreFactory) CreateEClassFromContainer(eContainer EPackage) EClass {
	ret := _m.Called(eContainer)

	var r0 EClass
	if rf, ok := ret.Get(0).(func(EPackage) EClass); ok {
		r0 = rf(eContainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// CreateEClassFromContainerAndClassID provides a mock function with given fields: eContainer, classID
func (_m *MockEcoreFactory) CreateEClassFromContainerAndClassID(eContainer EPackage, classID int) EClass {
	ret := _m.Called(eContainer, classID)

	var r0 EClass
	if rf, ok := ret.Get(0).(func(EPackage, int) EClass); ok {
		r0 = rf(eContainer, classID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// CreateEDataType provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEDataType() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// CreateEDataTypeFromContainer provides a mock function with given fields: eContainer
func (_m *MockEcoreFactory) CreateEDataTypeFromContainer(eContainer EPackage) EDataType {
	ret := _m.Called(eContainer)

	var r0 EDataType
	if rf, ok := ret.Get(0).(func(EPackage) EDataType); ok {
		r0 = rf(eContainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// CreateEDataTypeFromContainerAndClassID provides a mock function with given fields: eContainer, classID
func (_m *MockEcoreFactory) CreateEDataTypeFromContainerAndClassID(eContainer EPackage, classID int) EDataType {
	ret := _m.Called(eContainer, classID)

	var r0 EDataType
	if rf, ok := ret.Get(0).(func(EPackage, int) EDataType); ok {
		r0 = rf(eContainer, classID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// CreateEEnum provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEEnum() EEnum {
	ret := _m.Called()

	var r0 EEnum
	if rf, ok := ret.Get(0).(func() EEnum); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EEnum)
		}
	}

	return r0
}

// CreateEEnumFromContainer provides a mock function with given fields: eContainer
func (_m *MockEcoreFactory) CreateEEnumFromContainer(eContainer EPackage) EEnum {
	ret := _m.Called(eContainer)

	var r0 EEnum
	if rf, ok := ret.Get(0).(func(EPackage) EEnum); ok {
		r0 = rf(eContainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EEnum)
		}
	}

	return r0
}

// CreateEEnumFromContainerAndClassID provides a mock function with given fields: eContainer, classID
func (_m *MockEcoreFactory) CreateEEnumFromContainerAndClassID(eContainer EPackage, classID int) EEnum {
	ret := _m.Called(eContainer, classID)

	var r0 EEnum
	if rf, ok := ret.Get(0).(func(EPackage, int) EEnum); ok {
		r0 = rf(eContainer, classID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EEnum)
		}
	}

	return r0
}

// CreateEEnumLiteral provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEEnumLiteral() EEnumLiteral {
	ret := _m.Called()

	var r0 EEnumLiteral
	if rf, ok := ret.Get(0).(func() EEnumLiteral); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EEnumLiteral)
		}
	}

	return r0
}

// CreateEEnumLiteralFromContainer provides a mock function with given fields: eContainer
func (_m *MockEcoreFactory) CreateEEnumLiteralFromContainer(eContainer EEnum) EEnumLiteral {
	ret := _m.Called(eContainer)

	var r0 EEnumLiteral
	if rf, ok := ret.Get(0).(func(EEnum) EEnumLiteral); ok {
		r0 = rf(eContainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EEnumLiteral)
		}
	}

	return r0
}

// CreateEFactory provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEFactory() EFactory {
	ret := _m.Called()

	var r0 EFactory
	if rf, ok := ret.Get(0).(func() EFactory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EFactory)
		}
	}

	return r0
}

// CreateEFactoryFromContainer provides a mock function with given fields: eContainer
func (_m *MockEcoreFactory) CreateEFactoryFromContainer(eContainer EPackage) EFactory {
	ret := _m.Called(eContainer)

	var r0 EFactory
	if rf, ok := ret.Get(0).(func(EPackage) EFactory); ok {
		r0 = rf(eContainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EFactory)
		}
	}

	return r0
}

// CreateEGenericType provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEGenericType() EGenericType {
	ret := _m.Called()

	var r0 EGenericType
	if rf, ok := ret.Get(0).(func() EGenericType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EGenericType)
		}
	}

	return r0
}

// CreateEObject provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEObject() EObject {
	ret := _m.Called()

	var r0 EObject
	if rf, ok := ret.Get(0).(func() EObject); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EObject)
		}
	}

	return r0
}

// CreateEOperation provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEOperation() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// CreateEOperationFromContainer provides a mock function with given fields: eContainer
func (_m *MockEcoreFactory) CreateEOperationFromContainer(eContainer EClass) EOperation {
	ret := _m.Called(eContainer)

	var r0 EOperation
	if rf, ok := ret.Get(0).(func(EClass) EOperation); ok {
		r0 = rf(eContainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// CreateEOperationFromContainerAndClassID provides a mock function with given fields: eContainer, classID
func (_m *MockEcoreFactory) CreateEOperationFromContainerAndClassID(eContainer EClass, classID int) EOperation {
	ret := _m.Called(eContainer, classID)

	var r0 EOperation
	if rf, ok := ret.Get(0).(func(EClass, int) EOperation); ok {
		r0 = rf(eContainer, classID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// CreateEPackage provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEPackage() EPackage {
	ret := _m.Called()

	var r0 EPackage
	if rf, ok := ret.Get(0).(func() EPackage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EPackage)
		}
	}

	return r0
}

// CreateEPackageFromContainer provides a mock function with given fields: eContainer
func (_m *MockEcoreFactory) CreateEPackageFromContainer(eContainer EPackage) EPackage {
	ret := _m.Called(eContainer)

	var r0 EPackage
	if rf, ok := ret.Get(0).(func(EPackage) EPackage); ok {
		r0 = rf(eContainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EPackage)
		}
	}

	return r0
}

// CreateEParameter provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEParameter() EParameter {
	ret := _m.Called()

	var r0 EParameter
	if rf, ok := ret.Get(0).(func() EParameter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EParameter)
		}
	}

	return r0
}

// CreateEParameterFromContainer provides a mock function with given fields: eContainer
func (_m *MockEcoreFactory) CreateEParameterFromContainer(eContainer EOperation) EParameter {
	ret := _m.Called(eContainer)

	var r0 EParameter
	if rf, ok := ret.Get(0).(func(EOperation) EParameter); ok {
		r0 = rf(eContainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EParameter)
		}
	}

	return r0
}

// CreateEReference provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEReference() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// CreateEReferenceFromContainer provides a mock function with given fields: eContainer
func (_m *MockEcoreFactory) CreateEReferenceFromContainer(eContainer EClass) EReference {
	ret := _m.Called(eContainer)

	var r0 EReference
	if rf, ok := ret.Get(0).(func(EClass) EReference); ok {
		r0 = rf(eContainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// CreateEReferenceFromContainerAndClassID provides a mock function with given fields: eContainer, classID
func (_m *MockEcoreFactory) CreateEReferenceFromContainerAndClassID(eContainer EClass, classID int) EReference {
	ret := _m.Called(eContainer, classID)

	var r0 EReference
	if rf, ok := ret.Get(0).(func(EClass, int) EReference); ok {
		r0 = rf(eContainer, classID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// CreateEStringToStringMapEntry provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateEStringToStringMapEntry() EStringToStringMapEntry {
	ret := _m.Called()

	var r0 EStringToStringMapEntry
	if rf, ok := ret.Get(0).(func() EStringToStringMapEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStringToStringMapEntry)
		}
	}

	return r0
}

// CreateETypeParameter provides a mock function with given fields:
func (_m *MockEcoreFactory) CreateETypeParameter() ETypeParameter {
	ret := _m.Called()

	var r0 ETypeParameter
	if rf, ok := ret.Get(0).(func() ETypeParameter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ETypeParameter)
		}
	}

	return r0
}
