// Code generated by mockery v1.0.0. DO NOT EDIT.

package ecore

import (
	io "io"
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// MockEURIConverter is an autogenerated mock type for the EURIConverter type
type MockEURIConverter struct {
	mock.Mock
}

// createInputStream provides a mock function with given fields: uri
func (_m *MockEURIConverter) createInputStream(uri *url.URL) io.Reader {
	ret := _m.Called(uri)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(*url.URL) io.Reader); ok {
		r0 = rf(uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	return r0
}

// createOutputStream provides a mock function with given fields: uri
func (_m *MockEURIConverter) createOutputStream(uri *url.URL) io.Writer {
	ret := _m.Called(uri)

	var r0 io.Writer
	if rf, ok := ret.Get(0).(func(*url.URL) io.Writer); ok {
		r0 = rf(uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Writer)
		}
	}

	return r0
}

// getURIHandler provides a mock function with given fields: uri
func (_m *MockEURIConverter) getURIHandler(uri *url.URL) EURIHandler {
	ret := _m.Called(uri)

	var r0 EURIHandler
	if rf, ok := ret.Get(0).(func(*url.URL) EURIHandler); ok {
		r0 = rf(uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EURIHandler)
		}
	}

	return r0
}

// getURIHandlers provides a mock function with given fields:
func (_m *MockEURIConverter) getURIHandlers() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// normalize provides a mock function with given fields: uri
func (_m *MockEURIConverter) normalize(uri *url.URL) *url.URL {
	ret := _m.Called(uri)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(*url.URL) *url.URL); ok {
		r0 = rf(uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}
