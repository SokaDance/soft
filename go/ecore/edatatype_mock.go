// Code generated by mockery v1.0.0. DO NOT EDIT.

package ecore

import mock "github.com/stretchr/testify/mock"
import reflect "reflect"

// MockEDataType is an autogenerated mock type for the EDataType type
type MockEDataType struct {
	mock.Mock
}

// EAdapters provides a mock function with given fields:
func (_m *MockEDataType) EAdapters() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// EAllContents provides a mock function with given fields:
func (_m *MockEDataType) EAllContents() EIterator {
	ret := _m.Called()

	var r0 EIterator
	if rf, ok := ret.Get(0).(func() EIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EIterator)
		}
	}

	return r0
}

// EClass provides a mock function with given fields:
func (_m *MockEDataType) EClass() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// EContainer provides a mock function with given fields:
func (_m *MockEDataType) EContainer() EObject {
	ret := _m.Called()

	var r0 EObject
	if rf, ok := ret.Get(0).(func() EObject); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EObject)
		}
	}

	return r0
}

// EContainingFeature provides a mock function with given fields:
func (_m *MockEDataType) EContainingFeature() EStructuralFeature {
	ret := _m.Called()

	var r0 EStructuralFeature
	if rf, ok := ret.Get(0).(func() EStructuralFeature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStructuralFeature)
		}
	}

	return r0
}

// EContainmentFeature provides a mock function with given fields:
func (_m *MockEDataType) EContainmentFeature() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// EContents provides a mock function with given fields:
func (_m *MockEDataType) EContents() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// ECrossReferences provides a mock function with given fields:
func (_m *MockEDataType) ECrossReferences() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// EDeliver provides a mock function with given fields:
func (_m *MockEDataType) EDeliver() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EGet provides a mock function with given fields: _a0
func (_m *MockEDataType) EGet(_a0 EStructuralFeature) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EStructuralFeature) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EGetResolve provides a mock function with given fields: _a0, _a1
func (_m *MockEDataType) EGetResolve(_a0 EStructuralFeature, _a1 bool) interface{} {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EStructuralFeature, bool) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EInvoke provides a mock function with given fields: _a0, _a1
func (_m *MockEDataType) EInvoke(_a0 EOperation, _a1 EList) interface{} {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EOperation, EList) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EIsProxy provides a mock function with given fields:
func (_m *MockEDataType) EIsProxy() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EIsSet provides a mock function with given fields: _a0
func (_m *MockEDataType) EIsSet(_a0 EStructuralFeature) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(EStructuralFeature) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ENotificationRequired provides a mock function with given fields:
func (_m *MockEDataType) ENotificationRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ENotify provides a mock function with given fields: _a0
func (_m *MockEDataType) ENotify(_a0 ENotification) {
	_m.Called(_a0)
}

// EResource provides a mock function with given fields:
func (_m *MockEDataType) EResource() EResource {
	ret := _m.Called()

	var r0 EResource
	if rf, ok := ret.Get(0).(func() EResource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EResource)
		}
	}

	return r0
}

// ESet provides a mock function with given fields: _a0, _a1
func (_m *MockEDataType) ESet(_a0 EStructuralFeature, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// ESetDeliver provides a mock function with given fields: _a0
func (_m *MockEDataType) ESetDeliver(_a0 bool) {
	_m.Called(_a0)
}

// EUnset provides a mock function with given fields: _a0
func (_m *MockEDataType) EUnset(_a0 EStructuralFeature) {
	_m.Called(_a0)
}

// GetClassifierID provides a mock function with given fields:
func (_m *MockEDataType) GetClassifierID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetDefaultValue provides a mock function with given fields:
func (_m *MockEDataType) GetDefaultValue() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetEAnnotation provides a mock function with given fields: _a0
func (_m *MockEDataType) GetEAnnotation(_a0 string) EAnnotation {
	ret := _m.Called(_a0)

	var r0 EAnnotation
	if rf, ok := ret.Get(0).(func(string) EAnnotation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAnnotation)
		}
	}

	return r0
}

// GetEAnnotations provides a mock function with given fields:
func (_m *MockEDataType) GetEAnnotations() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEPackage provides a mock function with given fields:
func (_m *MockEDataType) GetEPackage() EPackage {
	ret := _m.Called()

	var r0 EPackage
	if rf, ok := ret.Get(0).(func() EPackage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EPackage)
		}
	}

	return r0
}

// GetInstanceClass provides a mock function with given fields:
func (_m *MockEDataType) GetInstanceClass() reflect.Type {
	ret := _m.Called()

	var r0 reflect.Type
	if rf, ok := ret.Get(0).(func() reflect.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *MockEDataType) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsInstance provides a mock function with given fields: _a0
func (_m *MockEDataType) IsInstance(_a0 interface{}) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsSerializable provides a mock function with given fields:
func (_m *MockEDataType) IsSerializable() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetClassifierID provides a mock function with given fields: _a0
func (_m *MockEDataType) SetClassifierID(_a0 int) {
	_m.Called(_a0)
}

// SetInstanceClass provides a mock function with given fields: _a0
func (_m *MockEDataType) SetInstanceClass(_a0 reflect.Type) {
	_m.Called(_a0)
}

// SetName provides a mock function with given fields: _a0
func (_m *MockEDataType) SetName(_a0 string) {
	_m.Called(_a0)
}

// SetSerializable provides a mock function with given fields: _a0
func (_m *MockEDataType) SetSerializable(_a0 bool) {
	_m.Called(_a0)
}
