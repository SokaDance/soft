// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2019 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

// eModelElementImpl is the implementation of the model object 'EModelElement'
type eModelElementImpl struct {
	*EObjectImpl
	eAnnotations EList
}

// newEModelElementImpl is the constructor of a eModelElementImpl
func newEModelElementImpl() *eModelElementImpl {
	eModelElement := new(eModelElementImpl)
	eModelElement.EObjectImpl = NewEObjectImpl()
	eModelElement.SetInterfaces(eModelElement)

	return eModelElement
}

type eModelElementImplInitializers interface {
	initEAnnotations() EList
}

func (eModelElement *eModelElementImpl) getInitializers() eModelElementImplInitializers {
	return eModelElement.AsEObject().(eModelElementImplInitializers)
}

func (eModelElement *eModelElementImpl) EStaticClass() EClass {
	return GetPackage().GetEModelElement()
}

// GetEAnnotation default implementation
func (eModelElement *eModelElementImpl) GetEAnnotation(string) EAnnotation {
	panic("GetEAnnotation not implemented")
}

// GetEAnnotations get the value of eAnnotations
func (eModelElement *eModelElementImpl) GetEAnnotations() EList {
	if eModelElement.eAnnotations == nil {
		eModelElement.eAnnotations = eModelElement.getInitializers().initEAnnotations()
	}
	return eModelElement.eAnnotations
}

func (eModelElement *eModelElementImpl) initEAnnotations() EList {
	return NewEObjectEList(eModelElement.AsEObjectInternal(), EMODEL_ELEMENT__EANNOTATIONS, EANNOTATION__EMODEL_ELEMENT, true, true, true, false, false)
}

func (eModelElement *eModelElementImpl) EGetFromID(featureID int, resolve, coreType bool) interface{} {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		return eModelElement.GetEAnnotations()
	default:
		return eModelElement.EObjectImpl.EGetFromID(featureID, resolve, coreType)
	}
}

func (eModelElement *eModelElementImpl) ESetFromID(featureID int, newValue interface{}) {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		e := newValue.(EList)
		eModelElement.GetEAnnotations().Clear()
		eModelElement.GetEAnnotations().Add(e)
	default:
		eModelElement.EObjectImpl.ESetFromID(featureID, newValue)
	}
}

func (eModelElement *eModelElementImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		eModelElement.GetEAnnotations().Clear()
	default:
		eModelElement.EObjectImpl.EUnsetFromID(featureID)
	}
}

func (eModelElement *eModelElementImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		return eModelElement.eAnnotations != nil && eModelElement.eAnnotations.Size() != 0
	default:
		return eModelElement.EObjectImpl.EIsSetFromID(featureID)
	}
}

func (eModelElement *eModelElementImpl) EInvokeFromID(operationID int, arguments EList) interface{} {
	switch operationID {
	case EMODEL_ELEMENT__GET_EANNOTATION_ESTRING:
		return eModelElement.GetEAnnotation(arguments.Get(0).(string))
	default:
		return eModelElement.EObjectImpl.EInvokeFromID(operationID, arguments)
	}
}

func (eModelElement *eModelElementImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		list := eModelElement.GetEAnnotations().(ENotifyingList)
		return list.AddWithNotification(otherEnd, notifications)
	default:
		return eModelElement.EObjectImpl.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (eModelElement *eModelElementImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case EMODEL_ELEMENT__EANNOTATIONS:
		list := eModelElement.GetEAnnotations().(ENotifyingList)
		return list.RemoveWithNotification(otherEnd, notifications)
	default:
		return eModelElement.EObjectImpl.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
