// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2019 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func discardEStringToStringMapEntry() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage

	_ = time.Now()
}

func TestEStringToStringMapEntryKeyGet(t *testing.T) {
	obj := newEStringToStringMapEntryImpl()
	obj.SetKey("Test String")
	assert.Equal(t, "Test String", obj.GetKey())
}

func TestEStringToStringMapEntryKeySet(t *testing.T) {
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj := newEStringToStringMapEntryImpl()
	obj.EAdapters().Add(mockAdapter)
	obj.SetKey("Test String")
	mockAdapter.AssertExpectations(t)
}

func TestEStringToStringMapEntryKeyEGet(t *testing.T) {
	obj := newEStringToStringMapEntryImpl()
	{
		assert.Equal(t, obj.GetKey(), obj.EGetFromID(ESTRING_TO_STRING_MAP_ENTRY__KEY, false, false))
	}
	{
		assert.Equal(t, obj.GetValue(), obj.EGetFromID(ESTRING_TO_STRING_MAP_ENTRY__VALUE, false, false))
	}
}

func TestEStringToStringMapEntryKeyEIsSet(t *testing.T) {
	obj := newEStringToStringMapEntryImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStringToStringMapEntryKeyEUnset(t *testing.T) {
	obj := newEStringToStringMapEntryImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStringToStringMapEntryKeyESet(t *testing.T) {
	obj := newEStringToStringMapEntryImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStringToStringMapEntryValueGet(t *testing.T) {
	obj := newEStringToStringMapEntryImpl()
	obj.SetValue("Test String")
	assert.Equal(t, "Test String", obj.GetValue())
}

func TestEStringToStringMapEntryValueSet(t *testing.T) {
	mockAdapter := &MockEAdapter{}
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	obj := newEStringToStringMapEntryImpl()
	obj.EAdapters().Add(mockAdapter)
	obj.SetValue("Test String")
	mockAdapter.AssertExpectations(t)
}

func TestEStringToStringMapEntryValueEGet(t *testing.T) {
	obj := newEStringToStringMapEntryImpl()
	{
		assert.Equal(t, obj.GetKey(), obj.EGetFromID(ESTRING_TO_STRING_MAP_ENTRY__KEY, false, false))
	}
	{
		assert.Equal(t, obj.GetValue(), obj.EGetFromID(ESTRING_TO_STRING_MAP_ENTRY__VALUE, false, false))
	}
}

func TestEStringToStringMapEntryValueEIsSet(t *testing.T) {
	obj := newEStringToStringMapEntryImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStringToStringMapEntryValueEUnset(t *testing.T) {
	obj := newEStringToStringMapEntryImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
}

func TestEStringToStringMapEntryValueESet(t *testing.T) {
	obj := newEStringToStringMapEntryImpl()
	{
		_ = obj
	}
	{
		_ = obj
	}
}
