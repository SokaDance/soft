// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2019 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
//*****************************************************************************

package ecore

// eClassImpl is the implementation of the model object 'EClass'
type eClassImpl struct {
	*eClassifierExt
	eOperations            EList
	eAllOperations         EList
	isAbstract             bool
	eContainments          EList
	eAllSuperTypes         EList
	eAttributes            EList
	eAllAttributes         EList
	isInterface            bool
	eAllReferences         EList
	eAllContainments       EList
	eAllStructuralFeatures EList
	eSuperTypes            EList
	eIDAttribute           EAttribute
	eReferences            EList
	eCrossReferences       EList
	eStructuralFeatures    EList
}

// newEClassImpl is the constructor of a eClassImpl
func newEClassImpl() *eClassImpl {
	eClass := new(eClassImpl)
	eClass.eClassifierExt = newEClassifierExt()
	eClass.SetInterfaces(eClass)
	eClass.isAbstract = false
	eClass.isInterface = false

	return eClass
}

type eClassImplInitializers interface {
	initEOperations() EList
	initEAllOperations()
	initEContainments()
	initEAllSuperTypes()
	initEAttributes()
	initEAllAttributes()
	initEAllReferences()
	initEAllContainments()
	initEAllStructuralFeatures()
	initESuperTypes() EList
	initEIDAttribute()
	initEReferences()
	initECrossReferences()
	initEStructuralFeatures() EList
}

func (eClass *eClassImpl) getInitializers() eClassImplInitializers {
	return eClass.GetEObject().(eClassImplInitializers)
}

func (eClass *eClassImpl) EStaticClass() EClass {
	return GetPackage().GetEClass()
}

// GetEStructuralFeatureFromString default implementation
func (eClass *eClassImpl) GetEStructuralFeatureFromString(string) EStructuralFeature {
	panic("GetEStructuralFeatureFromString not implemented")
}

// GetOperationCount default implementation
func (eClass *eClassImpl) GetOperationCount() int {
	panic("GetOperationCount not implemented")
}

// GetOverride default implementation
func (eClass *eClassImpl) GetOverride(EOperation) EOperation {
	panic("GetOverride not implemented")
}

// GetEOperation default implementation
func (eClass *eClassImpl) GetEOperation(int) EOperation {
	panic("GetEOperation not implemented")
}

// GetEStructuralFeature default implementation
func (eClass *eClassImpl) GetEStructuralFeature(int) EStructuralFeature {
	panic("GetEStructuralFeature not implemented")
}

// GetFeatureCount default implementation
func (eClass *eClassImpl) GetFeatureCount() int {
	panic("GetFeatureCount not implemented")
}

// GetFeatureType default implementation
func (eClass *eClassImpl) GetFeatureType(EStructuralFeature) EClassifier {
	panic("GetFeatureType not implemented")
}

// IsSuperTypeOf default implementation
func (eClass *eClassImpl) IsSuperTypeOf(EClass) bool {
	panic("IsSuperTypeOf not implemented")
}

// GetFeatureID default implementation
func (eClass *eClassImpl) GetFeatureID(EStructuralFeature) int {
	panic("GetFeatureID not implemented")
}

// GetOperationID default implementation
func (eClass *eClassImpl) GetOperationID(EOperation) int {
	panic("GetOperationID not implemented")
}

// GetEOperations get the value of eOperations
func (eClass *eClassImpl) GetEOperations() EList {
	if eClass.eOperations == nil {
		eClass.eOperations = eClass.getInitializers().initEOperations()
	}
	return eClass.eOperations

}

// GetEAllOperations get the value of eAllOperations
func (eClass *eClassImpl) GetEAllOperations() EList {
	eClass.getInitializers().initEAllOperations()
	return eClass.eAllOperations

}

// IsAbstract get the value of isAbstract
func (eClass *eClassImpl) IsAbstract() bool {
	return eClass.isAbstract

}

// SetAbstract set the value of isAbstract
func (eClass *eClassImpl) SetAbstract(newIsAbstract bool) {
	oldIsAbstract := eClass.isAbstract
	eClass.isAbstract = newIsAbstract
	if eClass.ENotificationRequired() {
		eClass.ENotify(NewNotificationByFeatureID(eClass.GetEObject(), SET, ECLASS__ABSTRACT, oldIsAbstract, newIsAbstract, NO_INDEX))
	}
}

// GetEContainments get the value of eContainments
func (eClass *eClassImpl) GetEContainments() EList {
	eClass.getInitializers().initEContainments()
	return eClass.eContainments

}

// GetEAllSuperTypes get the value of eAllSuperTypes
func (eClass *eClassImpl) GetEAllSuperTypes() EList {
	eClass.getInitializers().initEAllSuperTypes()
	return eClass.eAllSuperTypes

}

// GetEAttributes get the value of eAttributes
func (eClass *eClassImpl) GetEAttributes() EList {
	eClass.getInitializers().initEAttributes()
	return eClass.eAttributes

}

// GetEAllAttributes get the value of eAllAttributes
func (eClass *eClassImpl) GetEAllAttributes() EList {
	eClass.getInitializers().initEAllAttributes()
	return eClass.eAllAttributes

}

// IsInterface get the value of isInterface
func (eClass *eClassImpl) IsInterface() bool {
	return eClass.isInterface

}

// SetInterface set the value of isInterface
func (eClass *eClassImpl) SetInterface(newIsInterface bool) {
	oldIsInterface := eClass.isInterface
	eClass.isInterface = newIsInterface
	if eClass.ENotificationRequired() {
		eClass.ENotify(NewNotificationByFeatureID(eClass.GetEObject(), SET, ECLASS__INTERFACE, oldIsInterface, newIsInterface, NO_INDEX))
	}
}

// GetEAllReferences get the value of eAllReferences
func (eClass *eClassImpl) GetEAllReferences() EList {
	eClass.getInitializers().initEAllReferences()
	return eClass.eAllReferences

}

// GetEAllContainments get the value of eAllContainments
func (eClass *eClassImpl) GetEAllContainments() EList {
	eClass.getInitializers().initEAllContainments()
	return eClass.eAllContainments

}

// GetEAllStructuralFeatures get the value of eAllStructuralFeatures
func (eClass *eClassImpl) GetEAllStructuralFeatures() EList {
	eClass.getInitializers().initEAllStructuralFeatures()
	return eClass.eAllStructuralFeatures

}

// GetESuperTypes get the value of eSuperTypes
func (eClass *eClassImpl) GetESuperTypes() EList {
	if eClass.eSuperTypes == nil {
		eClass.eSuperTypes = eClass.getInitializers().initESuperTypes()
	}
	return eClass.eSuperTypes

}

// GetEIDAttribute get the value of eIDAttribute
func (eClass *eClassImpl) GetEIDAttribute() EAttribute {
	eClass.getInitializers().initEIDAttribute()
	return eClass.eIDAttribute

}

// GetEReferences get the value of eReferences
func (eClass *eClassImpl) GetEReferences() EList {
	eClass.getInitializers().initEReferences()
	return eClass.eReferences

}

// GetECrossReferences get the value of eCrossReferences
func (eClass *eClassImpl) GetECrossReferences() EList {
	eClass.getInitializers().initECrossReferences()
	return eClass.eCrossReferences

}

// GetEStructuralFeatures get the value of eStructuralFeatures
func (eClass *eClassImpl) GetEStructuralFeatures() EList {
	if eClass.eStructuralFeatures == nil {
		eClass.eStructuralFeatures = eClass.getInitializers().initEStructuralFeatures()
	}
	return eClass.eStructuralFeatures

}

func (eClass *eClassImpl) initEOperations() EList {
	return NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__EOPERATIONS, EOPERATION__ECONTAINING_CLASS, true, true, true, false, false)
}

func (eClass *eClassImpl) initEAllOperations() {
	eClass.eAllOperations = NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__EALL_OPERATIONS, -1, false, false, false, true, false)
}

func (eClass *eClassImpl) initEContainments() {
	eClass.eContainments = NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__ECONTAINMENTS, -1, false, false, false, true, false)
}

func (eClass *eClassImpl) initEAllSuperTypes() {
	eClass.eAllSuperTypes = NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__EALL_SUPER_TYPES, -1, false, false, false, true, false)
}

func (eClass *eClassImpl) initEAttributes() {
	eClass.eAttributes = NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__EATTRIBUTES, -1, false, false, false, true, false)
}

func (eClass *eClassImpl) initEAllAttributes() {
	eClass.eAllAttributes = NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__EALL_ATTRIBUTES, -1, false, false, false, true, false)
}

func (eClass *eClassImpl) initEAllReferences() {
	eClass.eAllReferences = NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__EALL_REFERENCES, -1, false, false, false, true, false)
}

func (eClass *eClassImpl) initEAllContainments() {
	eClass.eAllContainments = NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__EALL_CONTAINMENTS, -1, false, false, false, true, false)
}

func (eClass *eClassImpl) initEAllStructuralFeatures() {
	eClass.eAllStructuralFeatures = NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__EALL_STRUCTURAL_FEATURES, -1, false, false, false, true, false)
}

func (eClass *eClassImpl) initESuperTypes() EList {
	return NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__ESUPER_TYPES, -1, false, false, false, true, false)
}

func (eClass *eClassImpl) initEIDAttribute() {
	panic("initEIDAttribute not implemented")
}

func (eClass *eClassImpl) initEReferences() {
	eClass.eReferences = NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__EREFERENCES, -1, false, false, false, true, false)
}

func (eClass *eClassImpl) initECrossReferences() {
	eClass.eCrossReferences = NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__ECROSS_REFERENCES, -1, false, false, false, true, false)
}

func (eClass *eClassImpl) initEStructuralFeatures() EList {
	return NewEObjectEList(eClass.GetEObjectInternal(), ECLASS__ESTRUCTURAL_FEATURES, ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, true, true, true, false, false)
}

func (eClass *eClassImpl) EGetFromID(featureID int, resolve, coreType bool) interface{} {
	switch featureID {
	case ECLASS__ABSTRACT:
		return eClass.IsAbstract()
	case ECLASS__EALL_ATTRIBUTES:
		return eClass.GetEAllAttributes()
	case ECLASS__EALL_CONTAINMENTS:
		return eClass.GetEAllContainments()
	case ECLASS__EALL_OPERATIONS:
		return eClass.GetEAllOperations()
	case ECLASS__EALL_REFERENCES:
		return eClass.GetEAllReferences()
	case ECLASS__EALL_STRUCTURAL_FEATURES:
		return eClass.GetEAllStructuralFeatures()
	case ECLASS__EALL_SUPER_TYPES:
		return eClass.GetEAllSuperTypes()
	case ECLASS__EATTRIBUTES:
		return eClass.GetEAttributes()
	case ECLASS__ECONTAINMENTS:
		return eClass.GetEContainments()
	case ECLASS__ECROSS_REFERENCES:
		return eClass.GetECrossReferences()
	case ECLASS__EID_ATTRIBUTE:
		return eClass.GetEIDAttribute()
	case ECLASS__EOPERATIONS:
		return eClass.GetEOperations()
	case ECLASS__EREFERENCES:
		return eClass.GetEReferences()
	case ECLASS__ESTRUCTURAL_FEATURES:
		return eClass.GetEStructuralFeatures()
	case ECLASS__ESUPER_TYPES:
		return eClass.GetESuperTypes()
	case ECLASS__INTERFACE:
		return eClass.IsInterface()
	default:
		return eClass.eClassifierExt.EGetFromID(featureID, resolve, coreType)
	}
}

func (eClass *eClassImpl) ESetFromID(featureID int, newValue interface{}) {
	switch featureID {
	case ECLASS__ABSTRACT:
		a := newValue.(bool)
		eClass.SetAbstract(a)
	case ECLASS__EOPERATIONS:
		e := newValue.(EList)
		eClass.GetEOperations().Clear()
		eClass.GetEOperations().Add(e)
	case ECLASS__ESTRUCTURAL_FEATURES:
		e := newValue.(EList)
		eClass.GetEStructuralFeatures().Clear()
		eClass.GetEStructuralFeatures().Add(e)
	case ECLASS__ESUPER_TYPES:
		e := newValue.(EList)
		eClass.GetESuperTypes().Clear()
		eClass.GetESuperTypes().Add(e)
	case ECLASS__INTERFACE:
		i := newValue.(bool)
		eClass.SetInterface(i)
	default:
		eClass.eClassifierExt.ESetFromID(featureID, newValue)
	}
}

func (eClass *eClassImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case ECLASS__ABSTRACT:
		eClass.SetAbstract(false)
	case ECLASS__EOPERATIONS:
		eClass.GetEOperations().Clear()
	case ECLASS__ESTRUCTURAL_FEATURES:
		eClass.GetEStructuralFeatures().Clear()
	case ECLASS__ESUPER_TYPES:
		eClass.GetESuperTypes().Clear()
	case ECLASS__INTERFACE:
		eClass.SetInterface(false)
	default:
		eClass.eClassifierExt.EUnsetFromID(featureID)
	}
}

func (eClass *eClassImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case ECLASS__ABSTRACT:
		return eClass.isAbstract != false
	case ECLASS__EALL_ATTRIBUTES:
		return eClass.eAllAttributes != nil && eClass.eAllAttributes.Size() != 0
	case ECLASS__EALL_CONTAINMENTS:
		return eClass.eAllContainments != nil && eClass.eAllContainments.Size() != 0
	case ECLASS__EALL_OPERATIONS:
		return eClass.eAllOperations != nil && eClass.eAllOperations.Size() != 0
	case ECLASS__EALL_REFERENCES:
		return eClass.eAllReferences != nil && eClass.eAllReferences.Size() != 0
	case ECLASS__EALL_STRUCTURAL_FEATURES:
		return eClass.eAllStructuralFeatures != nil && eClass.eAllStructuralFeatures.Size() != 0
	case ECLASS__EALL_SUPER_TYPES:
		return eClass.eAllSuperTypes != nil && eClass.eAllSuperTypes.Size() != 0
	case ECLASS__EATTRIBUTES:
		return eClass.eAttributes != nil && eClass.eAttributes.Size() != 0
	case ECLASS__ECONTAINMENTS:
		return eClass.eContainments != nil && eClass.eContainments.Size() != 0
	case ECLASS__ECROSS_REFERENCES:
		return eClass.eCrossReferences != nil && eClass.eCrossReferences.Size() != 0
	case ECLASS__EID_ATTRIBUTE:
		return eClass.eIDAttribute != nil
	case ECLASS__EOPERATIONS:
		return eClass.eOperations != nil && eClass.eOperations.Size() != 0
	case ECLASS__EREFERENCES:
		return eClass.eReferences != nil && eClass.eReferences.Size() != 0
	case ECLASS__ESTRUCTURAL_FEATURES:
		return eClass.eStructuralFeatures != nil && eClass.eStructuralFeatures.Size() != 0
	case ECLASS__ESUPER_TYPES:
		return eClass.eSuperTypes != nil && eClass.eSuperTypes.Size() != 0
	case ECLASS__INTERFACE:
		return eClass.isInterface != false
	default:
		return eClass.eClassifierExt.EIsSetFromID(featureID)
	}
}

func (eClass *eClassImpl) EInvokeFromID(operationID int, arguments EList) interface{} {
	switch operationID {
	case ECLASS__GET_EOPERATION_EINT:
		return eClass.GetEOperation(arguments.Get(0).(int))
	case ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING:
		return eClass.GetEStructuralFeatureFromString(arguments.Get(0).(string))
	case ECLASS__GET_ESTRUCTURAL_FEATURE_EINT:
		return eClass.GetEStructuralFeature(arguments.Get(0).(int))
	case ECLASS__GET_FEATURE_COUNT:
		return eClass.GetFeatureCount()
	case ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE:
		return eClass.GetFeatureID(arguments.Get(0).(EStructuralFeature))
	case ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE:
		return eClass.GetFeatureType(arguments.Get(0).(EStructuralFeature))
	case ECLASS__GET_OPERATION_COUNT:
		return eClass.GetOperationCount()
	case ECLASS__GET_OPERATION_ID_EOPERATION:
		return eClass.GetOperationID(arguments.Get(0).(EOperation))
	case ECLASS__GET_OVERRIDE_EOPERATION:
		return eClass.GetOverride(arguments.Get(0).(EOperation))
	case ECLASS__IS_SUPER_TYPE_OF_ECLASS:
		return eClass.IsSuperTypeOf(arguments.Get(0).(EClass))
	default:
		return eClass.eClassifierExt.EInvokeFromID(operationID, arguments)
	}
}

func (eClass *eClassImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case ECLASS__EOPERATIONS:
		list := eClass.GetEOperations().(ENotifyingList)
		return list.AddWithNotification(otherEnd, notifications)
	case ECLASS__ESTRUCTURAL_FEATURES:
		list := eClass.GetEStructuralFeatures().(ENotifyingList)
		return list.AddWithNotification(otherEnd, notifications)
	default:
		return eClass.eClassifierExt.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (eClass *eClassImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case ECLASS__EOPERATIONS:
		list := eClass.GetEOperations().(ENotifyingList)
		return list.RemoveWithNotification(otherEnd, notifications)
	case ECLASS__ESTRUCTURAL_FEATURES:
		list := eClass.GetEStructuralFeatures().(ENotifyingList)
		return list.RemoveWithNotification(otherEnd, notifications)
	default:
		return eClass.eClassifierExt.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
