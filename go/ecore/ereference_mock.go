// Code generated by mockery v1.0.0. DO NOT EDIT.

package ecore

import mock "github.com/stretchr/testify/mock"
import reflect "reflect"

// MockEReference is an autogenerated mock type for the EReference type
type MockEReference struct {
	mock.Mock
}

// EAdapters provides a mock function with given fields:
func (_m *MockEReference) EAdapters() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// EAllContents provides a mock function with given fields:
func (_m *MockEReference) EAllContents() EIterator {
	ret := _m.Called()

	var r0 EIterator
	if rf, ok := ret.Get(0).(func() EIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EIterator)
		}
	}

	return r0
}

// EClass provides a mock function with given fields:
func (_m *MockEReference) EClass() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// EContainer provides a mock function with given fields:
func (_m *MockEReference) EContainer() EObject {
	ret := _m.Called()

	var r0 EObject
	if rf, ok := ret.Get(0).(func() EObject); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EObject)
		}
	}

	return r0
}

// EContainingFeature provides a mock function with given fields:
func (_m *MockEReference) EContainingFeature() EStructuralFeature {
	ret := _m.Called()

	var r0 EStructuralFeature
	if rf, ok := ret.Get(0).(func() EStructuralFeature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStructuralFeature)
		}
	}

	return r0
}

// EContainmentFeature provides a mock function with given fields:
func (_m *MockEReference) EContainmentFeature() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// EContents provides a mock function with given fields:
func (_m *MockEReference) EContents() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// ECrossReferences provides a mock function with given fields:
func (_m *MockEReference) ECrossReferences() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// EDeliver provides a mock function with given fields:
func (_m *MockEReference) EDeliver() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EGet provides a mock function with given fields: _a0
func (_m *MockEReference) EGet(_a0 EStructuralFeature) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EStructuralFeature) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EGetResolve provides a mock function with given fields: _a0, _a1
func (_m *MockEReference) EGetResolve(_a0 EStructuralFeature, _a1 bool) interface{} {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EStructuralFeature, bool) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EInvoke provides a mock function with given fields: _a0, _a1
func (_m *MockEReference) EInvoke(_a0 EOperation, _a1 EList) interface{} {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EOperation, EList) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EIsProxy provides a mock function with given fields:
func (_m *MockEReference) EIsProxy() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EIsSet provides a mock function with given fields: _a0
func (_m *MockEReference) EIsSet(_a0 EStructuralFeature) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(EStructuralFeature) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ENotificationRequired provides a mock function with given fields:
func (_m *MockEReference) ENotificationRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ENotify provides a mock function with given fields: _a0
func (_m *MockEReference) ENotify(_a0 ENotification) {
	_m.Called(_a0)
}

// EResource provides a mock function with given fields:
func (_m *MockEReference) EResource() EResource {
	ret := _m.Called()

	var r0 EResource
	if rf, ok := ret.Get(0).(func() EResource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EResource)
		}
	}

	return r0
}

// ESet provides a mock function with given fields: _a0, _a1
func (_m *MockEReference) ESet(_a0 EStructuralFeature, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// ESetDeliver provides a mock function with given fields: _a0
func (_m *MockEReference) ESetDeliver(_a0 bool) {
	_m.Called(_a0)
}

// EUnset provides a mock function with given fields: _a0
func (_m *MockEReference) EUnset(_a0 EStructuralFeature) {
	_m.Called(_a0)
}

// GetContainerClass provides a mock function with given fields:
func (_m *MockEReference) GetContainerClass() reflect.Type {
	ret := _m.Called()

	var r0 reflect.Type
	if rf, ok := ret.Get(0).(func() reflect.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	return r0
}

// GetDefaultValue provides a mock function with given fields:
func (_m *MockEReference) GetDefaultValue() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetDefaultValueLiteral provides a mock function with given fields:
func (_m *MockEReference) GetDefaultValueLiteral() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetEAnnotation provides a mock function with given fields: _a0
func (_m *MockEReference) GetEAnnotation(_a0 string) EAnnotation {
	ret := _m.Called(_a0)

	var r0 EAnnotation
	if rf, ok := ret.Get(0).(func(string) EAnnotation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAnnotation)
		}
	}

	return r0
}

// GetEAnnotations provides a mock function with given fields:
func (_m *MockEReference) GetEAnnotations() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEContainingClass provides a mock function with given fields:
func (_m *MockEReference) GetEContainingClass() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEKeys provides a mock function with given fields:
func (_m *MockEReference) GetEKeys() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEOpposite provides a mock function with given fields:
func (_m *MockEReference) GetEOpposite() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEReferenceType provides a mock function with given fields:
func (_m *MockEReference) GetEReferenceType() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEType provides a mock function with given fields:
func (_m *MockEReference) GetEType() EClassifier {
	ret := _m.Called()

	var r0 EClassifier
	if rf, ok := ret.Get(0).(func() EClassifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClassifier)
		}
	}

	return r0
}

// GetFeatureID provides a mock function with given fields:
func (_m *MockEReference) GetFeatureID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetLowerBound provides a mock function with given fields:
func (_m *MockEReference) GetLowerBound() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *MockEReference) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUpperBound provides a mock function with given fields:
func (_m *MockEReference) GetUpperBound() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// IsChangeable provides a mock function with given fields:
func (_m *MockEReference) IsChangeable() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsContainer provides a mock function with given fields:
func (_m *MockEReference) IsContainer() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsContainment provides a mock function with given fields:
func (_m *MockEReference) IsContainment() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsDerived provides a mock function with given fields:
func (_m *MockEReference) IsDerived() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsMany provides a mock function with given fields:
func (_m *MockEReference) IsMany() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsOrdered provides a mock function with given fields:
func (_m *MockEReference) IsOrdered() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsRequired provides a mock function with given fields:
func (_m *MockEReference) IsRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsResolveProxies provides a mock function with given fields:
func (_m *MockEReference) IsResolveProxies() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsTransient provides a mock function with given fields:
func (_m *MockEReference) IsTransient() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsUnique provides a mock function with given fields:
func (_m *MockEReference) IsUnique() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsUnsettable provides a mock function with given fields:
func (_m *MockEReference) IsUnsettable() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsVolatile provides a mock function with given fields:
func (_m *MockEReference) IsVolatile() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetChangeable provides a mock function with given fields: _a0
func (_m *MockEReference) SetChangeable(_a0 bool) {
	_m.Called(_a0)
}

// SetContainment provides a mock function with given fields: _a0
func (_m *MockEReference) SetContainment(_a0 bool) {
	_m.Called(_a0)
}

// SetDefaultValue provides a mock function with given fields: _a0
func (_m *MockEReference) SetDefaultValue(_a0 interface{}) {
	_m.Called(_a0)
}

// SetDefaultValueLiteral provides a mock function with given fields: _a0
func (_m *MockEReference) SetDefaultValueLiteral(_a0 string) {
	_m.Called(_a0)
}

// SetDerived provides a mock function with given fields: _a0
func (_m *MockEReference) SetDerived(_a0 bool) {
	_m.Called(_a0)
}

// SetEOpposite provides a mock function with given fields: _a0
func (_m *MockEReference) SetEOpposite(_a0 EReference) {
	_m.Called(_a0)
}

// SetEType provides a mock function with given fields: _a0
func (_m *MockEReference) SetEType(_a0 EClassifier) {
	_m.Called(_a0)
}

// SetFeatureID provides a mock function with given fields: _a0
func (_m *MockEReference) SetFeatureID(_a0 int) {
	_m.Called(_a0)
}

// SetLowerBound provides a mock function with given fields: _a0
func (_m *MockEReference) SetLowerBound(_a0 int) {
	_m.Called(_a0)
}

// SetName provides a mock function with given fields: _a0
func (_m *MockEReference) SetName(_a0 string) {
	_m.Called(_a0)
}

// SetOrdered provides a mock function with given fields: _a0
func (_m *MockEReference) SetOrdered(_a0 bool) {
	_m.Called(_a0)
}

// SetResolveProxies provides a mock function with given fields: _a0
func (_m *MockEReference) SetResolveProxies(_a0 bool) {
	_m.Called(_a0)
}

// SetTransient provides a mock function with given fields: _a0
func (_m *MockEReference) SetTransient(_a0 bool) {
	_m.Called(_a0)
}

// SetUnique provides a mock function with given fields: _a0
func (_m *MockEReference) SetUnique(_a0 bool) {
	_m.Called(_a0)
}

// SetUnsettable provides a mock function with given fields: _a0
func (_m *MockEReference) SetUnsettable(_a0 bool) {
	_m.Called(_a0)
}

// SetUpperBound provides a mock function with given fields: _a0
func (_m *MockEReference) SetUpperBound(_a0 int) {
	_m.Called(_a0)
}

// SetVolatile provides a mock function with given fields: _a0
func (_m *MockEReference) SetVolatile(_a0 bool) {
	_m.Called(_a0)
}

// UnsetEType provides a mock function with given fields:
func (_m *MockEReference) UnsetEType() {
	_m.Called()
}
