// Code generated by mockery v1.0.0. DO NOT EDIT.

package ecore

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// MockEClass is an autogenerated mock type for the EClass type
type MockEClass struct {
	mock.Mock
}

// EAdapters provides a mock function with given fields:
func (_m *MockEClass) EAdapters() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// EAllContents provides a mock function with given fields:
func (_m *MockEClass) EAllContents() EIterator {
	ret := _m.Called()

	var r0 EIterator
	if rf, ok := ret.Get(0).(func() EIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EIterator)
		}
	}

	return r0
}

// EClass provides a mock function with given fields:
func (_m *MockEClass) EClass() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// EContainer provides a mock function with given fields:
func (_m *MockEClass) EContainer() EObject {
	ret := _m.Called()

	var r0 EObject
	if rf, ok := ret.Get(0).(func() EObject); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EObject)
		}
	}

	return r0
}

// EContainingFeature provides a mock function with given fields:
func (_m *MockEClass) EContainingFeature() EStructuralFeature {
	ret := _m.Called()

	var r0 EStructuralFeature
	if rf, ok := ret.Get(0).(func() EStructuralFeature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStructuralFeature)
		}
	}

	return r0
}

// EContainmentFeature provides a mock function with given fields:
func (_m *MockEClass) EContainmentFeature() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// EContents provides a mock function with given fields:
func (_m *MockEClass) EContents() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// ECrossReferences provides a mock function with given fields:
func (_m *MockEClass) ECrossReferences() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// EDeliver provides a mock function with given fields:
func (_m *MockEClass) EDeliver() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EGet provides a mock function with given fields: _a0
func (_m *MockEClass) EGet(_a0 EStructuralFeature) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EStructuralFeature) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EGetResolve provides a mock function with given fields: _a0, _a1
func (_m *MockEClass) EGetResolve(_a0 EStructuralFeature, _a1 bool) interface{} {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EStructuralFeature, bool) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EInvoke provides a mock function with given fields: _a0, _a1
func (_m *MockEClass) EInvoke(_a0 EOperation, _a1 EList) interface{} {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EOperation, EList) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EIsProxy provides a mock function with given fields:
func (_m *MockEClass) EIsProxy() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EIsSet provides a mock function with given fields: _a0
func (_m *MockEClass) EIsSet(_a0 EStructuralFeature) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(EStructuralFeature) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ENotificationRequired provides a mock function with given fields:
func (_m *MockEClass) ENotificationRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ENotify provides a mock function with given fields: _a0
func (_m *MockEClass) ENotify(_a0 ENotification) {
	_m.Called(_a0)
}

// EResource provides a mock function with given fields:
func (_m *MockEClass) EResource() EResource {
	ret := _m.Called()

	var r0 EResource
	if rf, ok := ret.Get(0).(func() EResource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EResource)
		}
	}

	return r0
}

// ESet provides a mock function with given fields: _a0, _a1
func (_m *MockEClass) ESet(_a0 EStructuralFeature, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// ESetDeliver provides a mock function with given fields: _a0
func (_m *MockEClass) ESetDeliver(_a0 bool) {
	_m.Called(_a0)
}

// EUnset provides a mock function with given fields: _a0
func (_m *MockEClass) EUnset(_a0 EStructuralFeature) {
	_m.Called(_a0)
}

// GetClassifierID provides a mock function with given fields:
func (_m *MockEClass) GetClassifierID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetDefaultValue provides a mock function with given fields:
func (_m *MockEClass) GetDefaultValue() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetEAllAttributes provides a mock function with given fields:
func (_m *MockEClass) GetEAllAttributes() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEAllContainments provides a mock function with given fields:
func (_m *MockEClass) GetEAllContainments() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEAllOperations provides a mock function with given fields:
func (_m *MockEClass) GetEAllOperations() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEAllReferences provides a mock function with given fields:
func (_m *MockEClass) GetEAllReferences() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEAllStructuralFeatures provides a mock function with given fields:
func (_m *MockEClass) GetEAllStructuralFeatures() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEAllSuperTypes provides a mock function with given fields:
func (_m *MockEClass) GetEAllSuperTypes() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEAnnotation provides a mock function with given fields: _a0
func (_m *MockEClass) GetEAnnotation(_a0 string) EAnnotation {
	ret := _m.Called(_a0)

	var r0 EAnnotation
	if rf, ok := ret.Get(0).(func(string) EAnnotation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAnnotation)
		}
	}

	return r0
}

// GetEAnnotations provides a mock function with given fields:
func (_m *MockEClass) GetEAnnotations() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEAttributes provides a mock function with given fields:
func (_m *MockEClass) GetEAttributes() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEContainments provides a mock function with given fields:
func (_m *MockEClass) GetEContainments() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetECrossReferences provides a mock function with given fields:
func (_m *MockEClass) GetECrossReferences() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEIDAttribute provides a mock function with given fields:
func (_m *MockEClass) GetEIDAttribute() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEOperation provides a mock function with given fields: _a0
func (_m *MockEClass) GetEOperation(_a0 int) EOperation {
	ret := _m.Called(_a0)

	var r0 EOperation
	if rf, ok := ret.Get(0).(func(int) EOperation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEOperations provides a mock function with given fields:
func (_m *MockEClass) GetEOperations() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEPackage provides a mock function with given fields:
func (_m *MockEClass) GetEPackage() EPackage {
	ret := _m.Called()

	var r0 EPackage
	if rf, ok := ret.Get(0).(func() EPackage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EPackage)
		}
	}

	return r0
}

// GetEReferences provides a mock function with given fields:
func (_m *MockEClass) GetEReferences() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEStructuralFeature provides a mock function with given fields: _a0
func (_m *MockEClass) GetEStructuralFeature(_a0 int) EStructuralFeature {
	ret := _m.Called(_a0)

	var r0 EStructuralFeature
	if rf, ok := ret.Get(0).(func(int) EStructuralFeature); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStructuralFeature)
		}
	}

	return r0
}

// GetEStructuralFeatureFromString provides a mock function with given fields: _a0
func (_m *MockEClass) GetEStructuralFeatureFromString(_a0 string) EStructuralFeature {
	ret := _m.Called(_a0)

	var r0 EStructuralFeature
	if rf, ok := ret.Get(0).(func(string) EStructuralFeature); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStructuralFeature)
		}
	}

	return r0
}

// GetEStructuralFeatures provides a mock function with given fields:
func (_m *MockEClass) GetEStructuralFeatures() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetESuperTypes provides a mock function with given fields:
func (_m *MockEClass) GetESuperTypes() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetFeatureCount provides a mock function with given fields:
func (_m *MockEClass) GetFeatureCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetFeatureID provides a mock function with given fields: _a0
func (_m *MockEClass) GetFeatureID(_a0 EStructuralFeature) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(EStructuralFeature) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetFeatureType provides a mock function with given fields: _a0
func (_m *MockEClass) GetFeatureType(_a0 EStructuralFeature) EClassifier {
	ret := _m.Called(_a0)

	var r0 EClassifier
	if rf, ok := ret.Get(0).(func(EStructuralFeature) EClassifier); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClassifier)
		}
	}

	return r0
}

// GetInstanceClass provides a mock function with given fields:
func (_m *MockEClass) GetInstanceClass() reflect.Type {
	ret := _m.Called()

	var r0 reflect.Type
	if rf, ok := ret.Get(0).(func() reflect.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *MockEClass) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetOperationCount provides a mock function with given fields:
func (_m *MockEClass) GetOperationCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetOperationID provides a mock function with given fields: _a0
func (_m *MockEClass) GetOperationID(_a0 EOperation) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(EOperation) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetOverride provides a mock function with given fields: _a0
func (_m *MockEClass) GetOverride(_a0 EOperation) EOperation {
	ret := _m.Called(_a0)

	var r0 EOperation
	if rf, ok := ret.Get(0).(func(EOperation) EOperation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// IsAbstract provides a mock function with given fields:
func (_m *MockEClass) IsAbstract() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsInstance provides a mock function with given fields: _a0
func (_m *MockEClass) IsInstance(_a0 interface{}) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsInterface provides a mock function with given fields:
func (_m *MockEClass) IsInterface() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsSuperTypeOf provides a mock function with given fields: _a0
func (_m *MockEClass) IsSuperTypeOf(_a0 EClass) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(EClass) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetAbstract provides a mock function with given fields: _a0
func (_m *MockEClass) SetAbstract(_a0 bool) {
	_m.Called(_a0)
}

// SetClassifierID provides a mock function with given fields: _a0
func (_m *MockEClass) SetClassifierID(_a0 int) {
	_m.Called(_a0)
}

// SetInstanceClass provides a mock function with given fields: _a0
func (_m *MockEClass) SetInstanceClass(_a0 reflect.Type) {
	_m.Called(_a0)
}

// SetInterface provides a mock function with given fields: _a0
func (_m *MockEClass) SetInterface(_a0 bool) {
	_m.Called(_a0)
}

// SetName provides a mock function with given fields: _a0
func (_m *MockEClass) SetName(_a0 string) {
	_m.Called(_a0)
}
