// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2019 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************

package ecore

// eDataTypeImpl is the implementation of the model object 'EDataType'
type eDataTypeImpl struct {
	*eClassifierExt
	isSerializable bool
}

// newEDataTypeImpl is the constructor of a eDataTypeImpl
func newEDataTypeImpl() *eDataTypeImpl {
	eDataType := new(eDataTypeImpl)
	eDataType.eClassifierExt = newEClassifierExt()
	eDataType.SetInterfaces(eDataType)
	eDataType.isSerializable = true

	return eDataType
}

func (eDataType *eDataTypeImpl) EStaticClass() EClass {
	return GetPackage().GetEDataType()
}

// IsSerializable get the value of isSerializable
func (eDataType *eDataTypeImpl) IsSerializable() bool {
	return eDataType.isSerializable
}

// SetSerializable set the value of isSerializable
func (eDataType *eDataTypeImpl) SetSerializable(newIsSerializable bool) {
	oldIsSerializable := eDataType.isSerializable
	eDataType.isSerializable = newIsSerializable
	if eDataType.ENotificationRequired() {
		eDataType.ENotify(NewNotificationByFeatureID(eDataType.GetEObject(), SET, EDATA_TYPE__SERIALIZABLE, oldIsSerializable, newIsSerializable, NO_INDEX))
	}
}

func (eDataType *eDataTypeImpl) EGetFromID(featureID int, resolve, coreType bool) interface{} {
	switch featureID {
	case EDATA_TYPE__SERIALIZABLE:
		return eDataType.IsSerializable()
	default:
		return eDataType.eClassifierExt.EGetFromID(featureID, resolve, coreType)
	}
}

func (eDataType *eDataTypeImpl) ESetFromID(featureID int, newValue interface{}) {
	switch featureID {
	case EDATA_TYPE__SERIALIZABLE:
		s := newValue.(bool)
		eDataType.SetSerializable(s)
	default:
		eDataType.eClassifierExt.ESetFromID(featureID, newValue)
	}
}

func (eDataType *eDataTypeImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case EDATA_TYPE__SERIALIZABLE:
		eDataType.SetSerializable(true)
	default:
		eDataType.eClassifierExt.EUnsetFromID(featureID)
	}
}

func (eDataType *eDataTypeImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case EDATA_TYPE__SERIALIZABLE:
		return eDataType.isSerializable != true
	default:
		return eDataType.eClassifierExt.EIsSetFromID(featureID)
	}
}
