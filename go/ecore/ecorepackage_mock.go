// Code generated by mockery v1.0.0. DO NOT EDIT.

package ecore

import mock "github.com/stretchr/testify/mock"

// MockEcorePackage is an autogenerated mock type for the EcorePackage type
type MockEcorePackage struct {
	mock.Mock
}

// EAdapters provides a mock function with given fields:
func (_m *MockEcorePackage) EAdapters() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// EAllContents provides a mock function with given fields:
func (_m *MockEcorePackage) EAllContents() EIterator {
	ret := _m.Called()

	var r0 EIterator
	if rf, ok := ret.Get(0).(func() EIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EIterator)
		}
	}

	return r0
}

// EClass provides a mock function with given fields:
func (_m *MockEcorePackage) EClass() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// EContainer provides a mock function with given fields:
func (_m *MockEcorePackage) EContainer() EObject {
	ret := _m.Called()

	var r0 EObject
	if rf, ok := ret.Get(0).(func() EObject); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EObject)
		}
	}

	return r0
}

// EContainingFeature provides a mock function with given fields:
func (_m *MockEcorePackage) EContainingFeature() EStructuralFeature {
	ret := _m.Called()

	var r0 EStructuralFeature
	if rf, ok := ret.Get(0).(func() EStructuralFeature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStructuralFeature)
		}
	}

	return r0
}

// EContainmentFeature provides a mock function with given fields:
func (_m *MockEcorePackage) EContainmentFeature() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// EContents provides a mock function with given fields:
func (_m *MockEcorePackage) EContents() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// ECrossReferences provides a mock function with given fields:
func (_m *MockEcorePackage) ECrossReferences() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// EDeliver provides a mock function with given fields:
func (_m *MockEcorePackage) EDeliver() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EGet provides a mock function with given fields: _a0
func (_m *MockEcorePackage) EGet(_a0 EStructuralFeature) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EStructuralFeature) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EGetResolve provides a mock function with given fields: _a0, _a1
func (_m *MockEcorePackage) EGetResolve(_a0 EStructuralFeature, _a1 bool) interface{} {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EStructuralFeature, bool) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EInvoke provides a mock function with given fields: _a0, _a1
func (_m *MockEcorePackage) EInvoke(_a0 EOperation, _a1 EList) interface{} {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(EOperation, EList) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EIsProxy provides a mock function with given fields:
func (_m *MockEcorePackage) EIsProxy() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EIsSet provides a mock function with given fields: _a0
func (_m *MockEcorePackage) EIsSet(_a0 EStructuralFeature) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(EStructuralFeature) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ENotificationRequired provides a mock function with given fields:
func (_m *MockEcorePackage) ENotificationRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ENotify provides a mock function with given fields: _a0
func (_m *MockEcorePackage) ENotify(_a0 ENotification) {
	_m.Called(_a0)
}

// EResource provides a mock function with given fields:
func (_m *MockEcorePackage) EResource() EResource {
	ret := _m.Called()

	var r0 EResource
	if rf, ok := ret.Get(0).(func() EResource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EResource)
		}
	}

	return r0
}

// ESet provides a mock function with given fields: _a0, _a1
func (_m *MockEcorePackage) ESet(_a0 EStructuralFeature, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// ESetDeliver provides a mock function with given fields: _a0
func (_m *MockEcorePackage) ESetDeliver(_a0 bool) {
	_m.Called(_a0)
}

// EUnset provides a mock function with given fields: _a0
func (_m *MockEcorePackage) EUnset(_a0 EStructuralFeature) {
	_m.Called(_a0)
}

// GetEAnnotation provides a mock function with given fields: _a0
func (_m *MockEcorePackage) GetEAnnotation(_a0 string) EAnnotation {
	ret := _m.Called(_a0)

	var r0 EAnnotation
	if rf, ok := ret.Get(0).(func(string) EAnnotation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAnnotation)
		}
	}

	return r0
}

// GetEAnnotationClass provides a mock function with given fields:
func (_m *MockEcorePackage) GetEAnnotationClass() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEAnnotation_Contents provides a mock function with given fields:
func (_m *MockEcorePackage) GetEAnnotation_Contents() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEAnnotation_Details provides a mock function with given fields:
func (_m *MockEcorePackage) GetEAnnotation_Details() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEAnnotation_EModelElement provides a mock function with given fields:
func (_m *MockEcorePackage) GetEAnnotation_EModelElement() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEAnnotation_References provides a mock function with given fields:
func (_m *MockEcorePackage) GetEAnnotation_References() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEAnnotation_Source provides a mock function with given fields:
func (_m *MockEcorePackage) GetEAnnotation_Source() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEAnnotations provides a mock function with given fields:
func (_m *MockEcorePackage) GetEAnnotations() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEAttribute provides a mock function with given fields:
func (_m *MockEcorePackage) GetEAttribute() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEAttribute_EAttributeType provides a mock function with given fields:
func (_m *MockEcorePackage) GetEAttribute_EAttributeType() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEAttribute_ID provides a mock function with given fields:
func (_m *MockEcorePackage) GetEAttribute_ID() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEBigDecimal provides a mock function with given fields:
func (_m *MockEcorePackage) GetEBigDecimal() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEBigInteger provides a mock function with given fields:
func (_m *MockEcorePackage) GetEBigInteger() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEBoolean provides a mock function with given fields:
func (_m *MockEcorePackage) GetEBoolean() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEBooleanObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEBooleanObject() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEByte provides a mock function with given fields:
func (_m *MockEcorePackage) GetEByte() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEByteArray provides a mock function with given fields:
func (_m *MockEcorePackage) GetEByteArray() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEByteObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEByteObject() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEChar provides a mock function with given fields:
func (_m *MockEcorePackage) GetEChar() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetECharacterObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetECharacterObject() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEClass provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEClass_Abstract provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_Abstract() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEClass_EAllAttributes provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EAllAttributes() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_EAllContainments provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EAllContainments() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_EAllOperations provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EAllOperations() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_EAllReferences provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EAllReferences() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_EAllStructuralFeatures provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EAllStructuralFeatures() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_EAllSuperTypes provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EAllSuperTypes() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_EAttributes provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EAttributes() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_EContainments provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EContainments() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_ECrossReferences provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_ECrossReferences() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_EIDAttribute provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EIDAttribute() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_EOperations provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EOperations() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_EReferences provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EReferences() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_EStructuralFeatures provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_EStructuralFeatures() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_ESuperTypes provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_ESuperTypes() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClass_GetEOperation_EInt provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_GetEOperation_EInt() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEClass_GetEStructuralFeature_EInt provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_GetEStructuralFeature_EInt() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEClass_GetEStructuralFeature_EString provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_GetEStructuralFeature_EString() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEClass_GetFeatureCount provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_GetFeatureCount() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEClass_GetFeatureID_EStructuralFeature provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_GetFeatureID_EStructuralFeature() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEClass_GetFeatureType_EStructuralFeature provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_GetFeatureType_EStructuralFeature() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEClass_GetOperationCount provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_GetOperationCount() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEClass_GetOperationID_EOperation provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_GetOperationID_EOperation() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEClass_GetOverride_EOperation provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_GetOverride_EOperation() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEClass_Interface provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_Interface() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEClass_IsSuperTypeOf_EClass provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClass_IsSuperTypeOf_EClass() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEClassifier provides a mock function with given fields: _a0
func (_m *MockEcorePackage) GetEClassifier(_a0 string) EClassifier {
	ret := _m.Called(_a0)

	var r0 EClassifier
	if rf, ok := ret.Get(0).(func(string) EClassifier); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClassifier)
		}
	}

	return r0
}

// GetEClassifierClass provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClassifierClass() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEClassifier_ClassifierID provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClassifier_ClassifierID() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEClassifier_DefaultValue provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClassifier_DefaultValue() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEClassifier_EPackage provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClassifier_EPackage() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEClassifier_InstanceClass provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClassifier_InstanceClass() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEClassifier_IsInstance_EJavaObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClassifier_IsInstance_EJavaObject() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEClassifiers provides a mock function with given fields:
func (_m *MockEcorePackage) GetEClassifiers() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetEDataType provides a mock function with given fields:
func (_m *MockEcorePackage) GetEDataType() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEDataType_Serializable provides a mock function with given fields:
func (_m *MockEcorePackage) GetEDataType_Serializable() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEDate provides a mock function with given fields:
func (_m *MockEcorePackage) GetEDate() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEDiagnosticChain provides a mock function with given fields:
func (_m *MockEcorePackage) GetEDiagnosticChain() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEDouble provides a mock function with given fields:
func (_m *MockEcorePackage) GetEDouble() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEDoubleObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEDoubleObject() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEEList provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEList() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEEnum provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEnum() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEEnumLiteral provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEnumLiteral() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEEnumLiteral_EEnum provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEnumLiteral_EEnum() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEEnumLiteral_Instance provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEnumLiteral_Instance() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEEnumLiteral_Literal provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEnumLiteral_Literal() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEEnumLiteral_Value provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEnumLiteral_Value() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEEnum_ELiterals provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEnum_ELiterals() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEEnum_GetEEnumLiteralByLiteral_EString provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEnum_GetEEnumLiteralByLiteral_EString() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEEnum_GetEEnumLiteral_EInt provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEnum_GetEEnumLiteral_EInt() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEEnum_GetEEnumLiteral_EString provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEnum_GetEEnumLiteral_EString() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEEnumerator provides a mock function with given fields:
func (_m *MockEcorePackage) GetEEnumerator() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEFactory provides a mock function with given fields:
func (_m *MockEcorePackage) GetEFactory() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEFactoryInstance provides a mock function with given fields:
func (_m *MockEcorePackage) GetEFactoryInstance() EFactory {
	ret := _m.Called()

	var r0 EFactory
	if rf, ok := ret.Get(0).(func() EFactory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EFactory)
		}
	}

	return r0
}

// GetEFactory_ConvertToString_EDataType_EJavaObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEFactory_ConvertToString_EDataType_EJavaObject() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEFactory_CreateFromString_EDataType_EString provides a mock function with given fields:
func (_m *MockEcorePackage) GetEFactory_CreateFromString_EDataType_EString() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEFactory_Create_EClass provides a mock function with given fields:
func (_m *MockEcorePackage) GetEFactory_Create_EClass() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEFactory_EPackage provides a mock function with given fields:
func (_m *MockEcorePackage) GetEFactory_EPackage() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEFeatureMap provides a mock function with given fields:
func (_m *MockEcorePackage) GetEFeatureMap() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEFeatureMapEntry provides a mock function with given fields:
func (_m *MockEcorePackage) GetEFeatureMapEntry() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEFloat provides a mock function with given fields:
func (_m *MockEcorePackage) GetEFloat() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEFloatObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEFloatObject() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEGenericType provides a mock function with given fields:
func (_m *MockEcorePackage) GetEGenericType() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEGenericType_EClassifier provides a mock function with given fields:
func (_m *MockEcorePackage) GetEGenericType_EClassifier() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEGenericType_ELowerBound provides a mock function with given fields:
func (_m *MockEcorePackage) GetEGenericType_ELowerBound() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEGenericType_ERawType provides a mock function with given fields:
func (_m *MockEcorePackage) GetEGenericType_ERawType() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEGenericType_ETypeArguments provides a mock function with given fields:
func (_m *MockEcorePackage) GetEGenericType_ETypeArguments() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEGenericType_ETypeParameter provides a mock function with given fields:
func (_m *MockEcorePackage) GetEGenericType_ETypeParameter() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEGenericType_EUpperBound provides a mock function with given fields:
func (_m *MockEcorePackage) GetEGenericType_EUpperBound() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEGenericType_IsInstance_EJavaObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEGenericType_IsInstance_EJavaObject() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEInt provides a mock function with given fields:
func (_m *MockEcorePackage) GetEInt() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEIntegerObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEIntegerObject() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEInvocationTargetException provides a mock function with given fields:
func (_m *MockEcorePackage) GetEInvocationTargetException() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEJavaClass provides a mock function with given fields:
func (_m *MockEcorePackage) GetEJavaClass() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEJavaObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEJavaObject() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetELong provides a mock function with given fields:
func (_m *MockEcorePackage) GetELong() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetELongObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetELongObject() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEMap provides a mock function with given fields:
func (_m *MockEcorePackage) GetEMap() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEModelElement provides a mock function with given fields:
func (_m *MockEcorePackage) GetEModelElement() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEModelElement_EAnnotations provides a mock function with given fields:
func (_m *MockEcorePackage) GetEModelElement_EAnnotations() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEModelElement_GetEAnnotation_EString provides a mock function with given fields:
func (_m *MockEcorePackage) GetEModelElement_GetEAnnotation_EString() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetENamedElement provides a mock function with given fields:
func (_m *MockEcorePackage) GetENamedElement() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetENamedElement_Name provides a mock function with given fields:
func (_m *MockEcorePackage) GetENamedElement_Name() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEObject_EAllContents provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EAllContents() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EClass provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EClass() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EContainer provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EContainer() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EContainingFeature provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EContainingFeature() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EContainmentFeature provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EContainmentFeature() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EContents provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EContents() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_ECrossReferences provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_ECrossReferences() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EGet_EStructuralFeature provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EGet_EStructuralFeature() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EGet_EStructuralFeature_EBoolean provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EGet_EStructuralFeature_EBoolean() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EInvoke_EOperation_EEList provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EInvoke_EOperation_EEList() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EIsProxy provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EIsProxy() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EIsSet_EStructuralFeature provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EIsSet_EStructuralFeature() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EResource provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EResource() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_ESet_EStructuralFeature_EJavaObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_ESet_EStructuralFeature_EJavaObject() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEObject_EUnset_EStructuralFeature provides a mock function with given fields:
func (_m *MockEcorePackage) GetEObject_EUnset_EStructuralFeature() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEOperation provides a mock function with given fields:
func (_m *MockEcorePackage) GetEOperation() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEOperation_EContainingClass provides a mock function with given fields:
func (_m *MockEcorePackage) GetEOperation_EContainingClass() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEOperation_EExceptions provides a mock function with given fields:
func (_m *MockEcorePackage) GetEOperation_EExceptions() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEOperation_EParameters provides a mock function with given fields:
func (_m *MockEcorePackage) GetEOperation_EParameters() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEOperation_IsOverrideOf_EOperation provides a mock function with given fields:
func (_m *MockEcorePackage) GetEOperation_IsOverrideOf_EOperation() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEOperation_OperationID provides a mock function with given fields:
func (_m *MockEcorePackage) GetEOperation_OperationID() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEPackage provides a mock function with given fields:
func (_m *MockEcorePackage) GetEPackage() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEPackage_EClassifiers provides a mock function with given fields:
func (_m *MockEcorePackage) GetEPackage_EClassifiers() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEPackage_EFactoryInstance provides a mock function with given fields:
func (_m *MockEcorePackage) GetEPackage_EFactoryInstance() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEPackage_ESubPackages provides a mock function with given fields:
func (_m *MockEcorePackage) GetEPackage_ESubPackages() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEPackage_ESuperPackage provides a mock function with given fields:
func (_m *MockEcorePackage) GetEPackage_ESuperPackage() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEPackage_GetEClassifier_EString provides a mock function with given fields:
func (_m *MockEcorePackage) GetEPackage_GetEClassifier_EString() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEPackage_NsPrefix provides a mock function with given fields:
func (_m *MockEcorePackage) GetEPackage_NsPrefix() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEPackage_NsURI provides a mock function with given fields:
func (_m *MockEcorePackage) GetEPackage_NsURI() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEParameter provides a mock function with given fields:
func (_m *MockEcorePackage) GetEParameter() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEParameter_EOperation provides a mock function with given fields:
func (_m *MockEcorePackage) GetEParameter_EOperation() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEReference provides a mock function with given fields:
func (_m *MockEcorePackage) GetEReference() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEReference_Container provides a mock function with given fields:
func (_m *MockEcorePackage) GetEReference_Container() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEReference_Containment provides a mock function with given fields:
func (_m *MockEcorePackage) GetEReference_Containment() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEReference_EKeys provides a mock function with given fields:
func (_m *MockEcorePackage) GetEReference_EKeys() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEReference_EOpposite provides a mock function with given fields:
func (_m *MockEcorePackage) GetEReference_EOpposite() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEReference_EReferenceType provides a mock function with given fields:
func (_m *MockEcorePackage) GetEReference_EReferenceType() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEReference_ResolveProxies provides a mock function with given fields:
func (_m *MockEcorePackage) GetEReference_ResolveProxies() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEResource provides a mock function with given fields:
func (_m *MockEcorePackage) GetEResource() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEResourceSet provides a mock function with given fields:
func (_m *MockEcorePackage) GetEResourceSet() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEShort provides a mock function with given fields:
func (_m *MockEcorePackage) GetEShort() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEShortObject provides a mock function with given fields:
func (_m *MockEcorePackage) GetEShortObject() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEString provides a mock function with given fields:
func (_m *MockEcorePackage) GetEString() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetEStringToStringMapEntry provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStringToStringMapEntry() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEStringToStringMapEntry_Key provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStringToStringMapEntry_Key() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEStringToStringMapEntry_Value provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStringToStringMapEntry_Value() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEStructuralFeature provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStructuralFeature() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetEStructuralFeature_Changeable provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStructuralFeature_Changeable() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEStructuralFeature_DefaultValue provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStructuralFeature_DefaultValue() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEStructuralFeature_DefaultValueLiteral provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStructuralFeature_DefaultValueLiteral() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEStructuralFeature_Derived provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStructuralFeature_Derived() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEStructuralFeature_EContainingClass provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStructuralFeature_EContainingClass() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetEStructuralFeature_FeatureID provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStructuralFeature_FeatureID() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEStructuralFeature_GetContainerClass provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStructuralFeature_GetContainerClass() EOperation {
	ret := _m.Called()

	var r0 EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EOperation)
		}
	}

	return r0
}

// GetEStructuralFeature_Transient provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStructuralFeature_Transient() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEStructuralFeature_Unsettable provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStructuralFeature_Unsettable() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetEStructuralFeature_Volatile provides a mock function with given fields:
func (_m *MockEcorePackage) GetEStructuralFeature_Volatile() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetESubPackages provides a mock function with given fields:
func (_m *MockEcorePackage) GetESubPackages() EList {
	ret := _m.Called()

	var r0 EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EList)
		}
	}

	return r0
}

// GetESuperPackage provides a mock function with given fields:
func (_m *MockEcorePackage) GetESuperPackage() EPackage {
	ret := _m.Called()

	var r0 EPackage
	if rf, ok := ret.Get(0).(func() EPackage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EPackage)
		}
	}

	return r0
}

// GetETreeIterator provides a mock function with given fields:
func (_m *MockEcorePackage) GetETreeIterator() EDataType {
	ret := _m.Called()

	var r0 EDataType
	if rf, ok := ret.Get(0).(func() EDataType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EDataType)
		}
	}

	return r0
}

// GetETypeParameter provides a mock function with given fields:
func (_m *MockEcorePackage) GetETypeParameter() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetETypeParameter_EBounds provides a mock function with given fields:
func (_m *MockEcorePackage) GetETypeParameter_EBounds() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetETypedElement provides a mock function with given fields:
func (_m *MockEcorePackage) GetETypedElement() EClass {
	ret := _m.Called()

	var r0 EClass
	if rf, ok := ret.Get(0).(func() EClass); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EClass)
		}
	}

	return r0
}

// GetETypedElement_EType provides a mock function with given fields:
func (_m *MockEcorePackage) GetETypedElement_EType() EReference {
	ret := _m.Called()

	var r0 EReference
	if rf, ok := ret.Get(0).(func() EReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EReference)
		}
	}

	return r0
}

// GetETypedElement_LowerBound provides a mock function with given fields:
func (_m *MockEcorePackage) GetETypedElement_LowerBound() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetETypedElement_Many provides a mock function with given fields:
func (_m *MockEcorePackage) GetETypedElement_Many() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetETypedElement_Ordered provides a mock function with given fields:
func (_m *MockEcorePackage) GetETypedElement_Ordered() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetETypedElement_Required provides a mock function with given fields:
func (_m *MockEcorePackage) GetETypedElement_Required() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetETypedElement_Unique provides a mock function with given fields:
func (_m *MockEcorePackage) GetETypedElement_Unique() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetETypedElement_UpperBound provides a mock function with given fields:
func (_m *MockEcorePackage) GetETypedElement_UpperBound() EAttribute {
	ret := _m.Called()

	var r0 EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EAttribute)
		}
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *MockEcorePackage) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNsPrefix provides a mock function with given fields:
func (_m *MockEcorePackage) GetNsPrefix() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNsURI provides a mock function with given fields:
func (_m *MockEcorePackage) GetNsURI() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetEFactoryInstance provides a mock function with given fields: _a0
func (_m *MockEcorePackage) SetEFactoryInstance(_a0 EFactory) {
	_m.Called(_a0)
}

// SetName provides a mock function with given fields: _a0
func (_m *MockEcorePackage) SetName(_a0 string) {
	_m.Called(_a0)
}

// SetNsPrefix provides a mock function with given fields: _a0
func (_m *MockEcorePackage) SetNsPrefix(_a0 string) {
	_m.Called(_a0)
}

// SetNsURI provides a mock function with given fields: _a0
func (_m *MockEcorePackage) SetNsURI(_a0 string) {
	_m.Called(_a0)
}
