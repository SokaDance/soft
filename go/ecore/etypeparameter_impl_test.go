// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2019 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
//*****************************************************************************

package ecore

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func discardETypeParameter() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage

	_ = time.Now()
}

func TestETypeParameterEBoundsGetList(t *testing.T) {
	obj := newETypeParameterImpl()
	assert.NotNil(t, obj.GetEBounds())
}

func TestETypeParameterEBoundsEGet(t *testing.T) {
	obj := newETypeParameterImpl()
	{
		assert.Equal(t, obj.GetEBounds(), obj.EGetFromID(ETYPE_PARAMETER__EBOUNDS, false, false))
	}
}

func TestETypeParameterEBoundsEIsSet(t *testing.T) {
	obj := newETypeParameterImpl()
	{
		assert.Equal(t, obj.eBounds != nil && obj.eBounds.Size() != 0, obj.EIsSetFromID(ETYPE_PARAMETER__EBOUNDS))
	}
}

func TestETypeParameterEBoundsEUnset(t *testing.T) {
	obj := newETypeParameterImpl()
	{
		obj.EUnsetFromID(ETYPE_PARAMETER__EBOUNDS)
		obj.GetEBounds().Clear()
		assert.Equal(t, 0, obj.GetEBounds().Size())
	}
}

func TestETypeParameterEBoundsESet(t *testing.T) {
	obj := newETypeParameterImpl()
	{
		elem := NewEmptyArrayEList()
		obj.ESetFromID(ETYPE_PARAMETER__EBOUNDS, elem)
		assert.Equal(t, 1, obj.GetEBounds().Size())
		assert.Equal(t, elem, obj.GetEBounds().Get(0))
	}
}

func TestETypeParameterEBoundsEInverseRemove(t *testing.T) {
	{
		obj := newETypeParameterImpl()
		mock := &MockEObject{}
		obj.GetEBounds().Add(mock)
		obj.EBasicInverseRemove(mock, ETYPE_PARAMETER__EBOUNDS, &MockENotificationChain{})
		assert.Equal(t, 0, obj.GetEBounds().Size())
	}
}
